{
  "analysis": {
    "node-legacy": {
      "runtime": {
        "name": "node-legacy",
        "displayName": "Node.js Legacy",
        "language": "javascript",
        "exts": [
          ".js",
          ".cjs"
        ],
        "sourceDir": "snippets/analysis"
      },
      "snippets": [
        {
          "id": "autoscaling-profiles-limits",
          "title": "Autoscaling Profile Limits",
          "description": "Monitor and manage autoscaling profile limits and usage",
          "language": "javascript",
          "tags": [
            "autoscaling",
            "profile",
            "limits",
            "monitoring",
            "management"
          ],
          "filename": "autoscaling-profiles-limits.js",
          "file_path": "node-legacy/autoscaling-profiles-limits.js",
          "code": "/*\n * TagoIO - Analysis Example\n * Auto Scaling analysis\n *\n * Check out the SDK documentation on: https://js.sdk.tago.io\n *\n * Ths is a script to automatically check your current usage, and auto-scale your account if needed.\n * You can get the analysis template with all the Environment Variables here:\n *          https://admin.tago.io/template/62151212ec8d8f0012c52772\n *\n * In order to use this analysis, you must setup all the environment variables needed.\n * You're also required to create an Action of trigger type Schedule,\n *  and choose to run this analysis.\n * In the action you set how often you want to run this script to check your limits.\n * It can set to a minimum of 1 minute.\n *\n * Environment Variables\n * In order to use this analysis, you must setup the Environment Variable table.\n *   account_token: Your account token. Check the steps at the end to understand how to generate it.\n *   The 95 value will scale data input when it reach 95% of the usage.\n *   Keep it blank to not scale data input.\n *   input: 95\n *   output: 95\n *   data_records: 95\n *   analysis: 95\n *   sms: 95\n *   email: 95\n *   push_notification: 95\n *   file_storage: 95\n *\n * Steps to generate an account_token:\n * 1 - Enter the following link: https://admin.tago.io/account/\n * 2 - Select your Profile.\n * 3 - Enter Tokens tab.\n * 4 - Generate a new Token with Expires Never.\n * 5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n */\n\nconst { Analysis, Account, Utils } = require(\"@tago-io/sdk\");\n\n/**\n * Check if service needs autoscaling\n * @param {number} currentUsage current usage of the profile\n * @param {number} allocated limit allocated of the profile\n * @param {number} scale percentage of usage to allow scaling up\n * @returns\n */\nfunction checkAutoScale(currentUsage, allocated, scale) {\n  if (!scale || !allocated) {\n    return false;\n  }\n  const threshold = allocated * (scale * 0.01);\n\n  return threshold <= currentUsage;\n}\n\n/**\n *  Get next valid service limit\n *\n * @param {{amount: number}[]} serviceValues\n * @param {number} accountLimit\n */\nfunction getNextTier(serviceValues, accountLimit) {\n  if (!accountLimit) {\n    return undefined;\n  }\n  const nextValue = serviceValues\n    .sort((a, b) => a.amount - b.amount)\n    .find(({ amount }) => amount > accountLimit);\n\n  return nextValue?.amount || undefined;\n}\n\n/**\n * Parses the current limit of the account\n * @param {*} servicesLimit\n * @returns\n */\nfunction getAccountLimit(servicesLimit) {\n  return Object.keys(servicesLimit).reduce((result, key) => {\n    result[key] = servicesLimit[key];\n\n    return result;\n  }, {});\n}\n\n/**\n * Find the ID of the profile from the token being used.\n * @param {Account} account\n * @param {string} token\n * @returns {string | null} profile id\n */\nasync function getProfileIDByToken(account, token) {\n  const profiles = await account.profiles.list();\n  for (const profile of profiles) {\n    const [token_exist] = await account.profiles.tokenList(profile.id, {\n      token,\n    });\n    if (token_exist) {\n      return profile.id;\n    }\n  }\n  return false;\n}\n\n/**\n * Calculate services to be scaled\n * @param {*} prices Service prices\n * @param {*} profileLimit\n * @param {*} profileLimitUsed\n * @param {*} accountLimit\n * @param {*} environment\n * @returns\n */\nfunction calculateAutoScale(prices, profileLimit, profileLimitUsed, accountLimit, environment) {\n  const autoScaleServices = {};\n  for (const statisticKey in profileLimit) {\n    if (!environment[statisticKey]) {\n      continue;\n    }\n\n    const scale = Number(environment[statisticKey]);\n    if (scale <= 0) {\n      continue;\n    }\n\n    if (isNaN(scale)) {\n      console.error(\n        `[ERROR] Ignoring ${statisticKey}, because the environment variable value is not a number.\\n`\n      );\n      continue;\n    }\n\n    const needAutoScale = checkAutoScale(\n      profileLimitUsed[statisticKey],\n      profileLimit[statisticKey],\n      scale\n    );\n\n    if (!needAutoScale) {\n      continue;\n    }\n\n    const nextTier = getNextTier(prices[statisticKey], accountLimit[statisticKey]?.limit);\n\n    if (nextTier) {\n      autoScaleServices[statisticKey] = { limit: nextTier };\n    }\n  }\n\n  if (!Object.keys(autoScaleServices).length) {\n    return null;\n  }\n\n  return autoScaleServices;\n}\n\nfunction reallocateProfiles(accountLimit, autoScaleServices, profileAllocation) {\n  const newAllocation = {};\n\n  for (const service in autoScaleServices) {\n    const newAccountLimit = autoScaleServices?.[service]?.limit || 0;\n    const oldAccountLimit = accountLimit?.[service]?.limit || 0;\n\n    const difference = newAccountLimit - oldAccountLimit;\n\n    if (isNaN(difference) || difference <= 0) {\n      continue;\n    }\n\n    const currentAllocation = profileAllocation?.[service] || 0;\n\n    newAllocation[service] = difference + currentAllocation;\n  }\n\n  if (!Object.keys(newAllocation).length) {\n    return null;\n  }\n\n  return newAllocation;\n}\n\n/**\n * Get the environment variables and parses it to a JSON\n * @param {*} context Analysis context\n * @returns\n */\nfunction setupEnvironment(context) {\n  const environment = Utils.envToJson(context.environment);\n  if (!environment) {\n    return undefined;\n  }\n\n  if (!environment.account_token || environment.account_token.length !== 36) {\n    throw \"[ERROR] You must enter a valid account_token in the environment variable\";\n  }\n\n  return environment;\n}\n\n// This function will run when you execute your analysis\nasync function startAnalysis(context) {\n  const environment = setupEnvironment(context);\n\n  // Setup the account and get's the ID of the profile the account token belongs to.\n  const account = new Account({ token: environment.account_token });\n  const id = await getProfileIDByToken(account, environment.account_token);\n  if (!id) {\n    throw \"Profile not found for the account token in the environment variable\";\n  }\n\n  // Get the current subscriptions of our account for all the services.\n  const { services: servicesLimit } = await account.billing.getSubscription();\n  const accountLimit = getAccountLimit(servicesLimit);\n\n  // get current limit and used resources of the profile.\n  const { limit, limit_used } = await account.profiles.summary(id);\n\n  // get the tiers of all services, so we know the next tier for our limits.\n  const billing = await account.billing.getPrices();\n\n  // Check each service to see if it needs scaling\n  const autoScaleServices = calculateAutoScale(\n    billing,\n    limit,\n    limit_used,\n    accountLimit,\n    environment\n  );\n\n  // Stop if no auto-scale needed\n  if (!autoScaleServices) {\n    console.info(\"Services are okay, no auto-scaling needed.\");\n    return;\n  }\n\n  console.info(\"Auto-scaling the services:\");\n  for (const service in autoScaleServices) {\n    console.info(\n      `${service} from ${accountLimit?.[service]?.limit} to ${autoScaleServices?.[service]?.limit}`\n    );\n  }\n\n  // Update our subscription, so we are actually scaling the account.\n  const billing_success = await account.billing.editSubscription({\n    services: autoScaleServices,\n  });\n\n  if (!billing_success) {\n    return;\n  }\n\n  // Stop here if account has only one profile. No need to reallocate resources\n  const profiles = await account.profiles.list();\n  if (profiles.length > 1) {\n    // Wait purchase to be completed\n    await new Promise((resolve) => {\n      setTimeout(resolve, 2000);\n    });\n\n    // Make sure we reallocate only what we just subscribed\n    const amountToReallocate = reallocateProfiles(accountLimit, autoScaleServices, limit);\n\n    console.info(\"New allocation:\");\n    if (amountToReallocate) {\n      for (const service in amountToReallocate) {\n        console.info(`${service} from ${limit?.[service]} to ${amountToReallocate?.[service]}`);\n      }\n\n      // Allocate all the subscribed limit to the profile.\n      await account.billing.editAllocation([\n        {\n          profile: id,\n          ...amountToReallocate,\n        },\n      ]);\n    }\n  }\n}\n\n// ? Export functions to be tested\nif (process.env.NODE_ENV === \"test\") {\n  module.exports = {\n    checkAutoScale,\n    reallocateProfiles,\n    calculateAutoScale,\n    getNextTier,\n    setupEnvironment,\n  };\n} else {\n  Analysis.use(startAnalysis);\n\n  // To run analysis on your machine (external)\n  // Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n}\n"
        },
        {
          "id": "avg-min-max",
          "title": "Average, Minimum and Maximum",
          "description": "Calculate minimum, maximum, and average values from device data",
          "language": "javascript",
          "tags": [
            "data",
            "calculation",
            "average",
            "min",
            "max",
            "statistics"
          ],
          "filename": "avg-min-max.js",
          "file_path": "node-legacy/avg-min-max.js",
          "code": "/*\n * Analysis Example\n * Minimum, maximum, and average\n *\n * Get the minimum, maximum, and the average value of the variable temperature from your device,\n * and save these values in new variables\n *\n * Instructions\n * To run this analysis you need to add a device token to the environment variables,\n * To do that, go to your device, then token and copy your token.\n * Go the the analysis, then environment variables,\n * type device_token on key, and paste your token on value\n */\n\nconst { Analysis, Device, Utils } = require(\"@tago-io/sdk\");\n\n// The function myAnalysis will run when you execute your analysis\nasync function startAnalysis(context) {\n  // reads the values from the environment and saves it in the variable env_vars\n  const env_vars = Utils.envToJson(context.environment);\n  if (!env_vars.device_token) {\n    return context.log(\"Device token not found on environment parameters\");\n  }\n\n  const device = new Device({ token: env_vars.device_token });\n\n  // This is a filter to get the minimum value of the variable temperature in the last day\n  const minFilter = {\n    variable: \"temperature\",\n    query: \"min\",\n    start_date: \"1 day\",\n  };\n\n  // Now we use the filter for the device to get the data\n  // check if the variable min has any value\n  // if so, we crete a new object to send to TagoIO\n  const [min] = await device.getData(minFilter);\n  if (min) {\n    const minValue = {\n      variable: \"temperature_minimum\",\n      value: min.value,\n      unit: \"F\",\n    };\n\n    // Now we send the new object with the minimum value\n    await device.sendData(minValue).then(context.log(\"Temperature Minimum Updated\"));\n  } else {\n    context.log(\"Minimum value not found\");\n  }\n\n  // This is a filter to get the maximum value of the variable temperature in the last day\n  const maxFilter = {\n    variable: \"temperature\",\n    query: \"max\",\n    start_date: \"1 day\",\n  };\n\n  const [max] = await device.getData(maxFilter);\n\n  if (max) {\n    const maxValue = {\n      variable: \"temperature_maximum\",\n      value: max.value,\n      unit: \"F\",\n    };\n\n    await device.sendData(maxValue).then(context.log(\"Temperature Maximum Updated\"));\n  } else {\n    context.log(\"Maximum value not found\");\n  }\n\n  // This is a filter to get the last 1000 values of the variable temperature in the last day\n  const avgFilter = {\n    variable: \"temperature\",\n    qty: 1000,\n    start_date: \"1 day\",\n  };\n\n  const dataAvgArray = await device.getData(avgFilter);\n\n  if (dataAvgArray.length) {\n    let temperatureSum = dataAvgArray.reduce((previousValue, currentValue) => {\n      return previousValue + Number(currentValue.value);\n    }, 0);\n\n    temperatureSum = temperatureSum / dataAvgArray.length;\n\n    const avgValue = {\n      variable: \"temperature_average\",\n      value: temperatureSum,\n      unit: \"F\",\n    };\n\n    await device.sendData(avgValue).then(context.log(\"Temperature Average Updated\"));\n  } else {\n    context.log(\"No result found for the avg calculation\");\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "aws-iot-device-location",
          "title": "AWS IoT Device Location",
          "description": "AWS IoT Core Device Location service integration",
          "language": "javascript",
          "tags": [
            "aws",
            "iot",
            "location",
            "integration",
            "tracking"
          ],
          "filename": "aws-iot-device-location.js",
          "file_path": "node-legacy/aws-iot-device-location.js",
          "code": "/*\n * TagoIO (https://tago.io/)\n * TagoIO Builder V3.1.3 (https://git.io/JJ8Si)\n * -------------------\n * Generated by     :: vitorlima\n * Generated at     :: quinta-feira, 28 de novembro de 2024 às 17:20 Horário Universal Coordenado\n * Machine          :: Vitors-MacBook-Air.local <darwin> - Node.js v20.14.0\n * Origin file      :: analysis/analysis.ts <TypeScript>\n * Destination file :: analysis/analysis.tago-io.js\n * -------------------\n */\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) =>\n  function __require() {\n    return (\n      mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports\n    );\n  };\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if ((from && typeof from === \"object\") || typeof from === \"function\") {\n    for (const key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, {\n          get: () => from[key],\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,\n        });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (\n  (target = mod != null ? __create(__getProtoOf(mod)) : {}),\n  __copyProps(\n    isNodeMode || !mod || !mod.__esModule\n      ? __defProp(target, \"default\", { value: mod, enumerable: true })\n      : target,\n    mod\n  )\n);\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// node_modules/@smithy/types/dist-cjs/index.js\nvar require_dist_cjs = __commonJS({\n  \"node_modules/@smithy/types/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      AlgorithmId: () => AlgorithmId,\n      EndpointURLScheme: () => EndpointURLScheme,\n      FieldPosition: () => FieldPosition,\n      HttpApiKeyAuthLocation: () => HttpApiKeyAuthLocation,\n      HttpAuthLocation: () => HttpAuthLocation,\n      IniSectionType: () => IniSectionType,\n      RequestHandlerProtocol: () => RequestHandlerProtocol,\n      SMITHY_CONTEXT_KEY: () => SMITHY_CONTEXT_KEY,\n      getDefaultClientConfiguration: () => getDefaultClientConfiguration,\n      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2) => {\n      HttpAuthLocation2[\"HEADER\"] = \"header\";\n      HttpAuthLocation2[\"QUERY\"] = \"query\";\n      return HttpAuthLocation2;\n    })(HttpAuthLocation || {});\n    var HttpApiKeyAuthLocation = /* @__PURE__ */ ((HttpApiKeyAuthLocation2) => {\n      HttpApiKeyAuthLocation2[\"HEADER\"] = \"header\";\n      HttpApiKeyAuthLocation2[\"QUERY\"] = \"query\";\n      return HttpApiKeyAuthLocation2;\n    })(HttpApiKeyAuthLocation || {});\n    var EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2) => {\n      EndpointURLScheme2[\"HTTP\"] = \"http\";\n      EndpointURLScheme2[\"HTTPS\"] = \"https\";\n      return EndpointURLScheme2;\n    })(EndpointURLScheme || {});\n    var AlgorithmId = /* @__PURE__ */ ((AlgorithmId2) => {\n      AlgorithmId2[\"MD5\"] = \"md5\";\n      AlgorithmId2[\"CRC32\"] = \"crc32\";\n      AlgorithmId2[\"CRC32C\"] = \"crc32c\";\n      AlgorithmId2[\"SHA1\"] = \"sha1\";\n      AlgorithmId2[\"SHA256\"] = \"sha256\";\n      return AlgorithmId2;\n    })(AlgorithmId || {});\n    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      const checksumAlgorithms = [];\n      if (runtimeConfig.sha256 !== void 0) {\n        checksumAlgorithms.push({\n          algorithmId: () => \"sha256\",\n          checksumConstructor: () => runtimeConfig.sha256,\n        });\n      }\n      if (runtimeConfig.md5 != void 0) {\n        checksumAlgorithms.push({\n          algorithmId: () => \"md5\",\n          checksumConstructor: () => runtimeConfig.md5,\n        });\n      }\n      return {\n        _checksumAlgorithms: checksumAlgorithms,\n        addChecksumAlgorithm(algo) {\n          this._checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms() {\n          return this._checksumAlgorithms;\n        },\n      };\n    }, \"getChecksumConfiguration\");\n    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {\n      const runtimeConfig = {};\n      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n      });\n      return runtimeConfig;\n    }, \"resolveChecksumRuntimeConfig\");\n    var getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      return {\n        ...getChecksumConfiguration(runtimeConfig),\n      };\n    }, \"getDefaultClientConfiguration\");\n    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {\n      return {\n        ...resolveChecksumRuntimeConfig(config),\n      };\n    }, \"resolveDefaultRuntimeConfig\");\n    var FieldPosition = /* @__PURE__ */ ((FieldPosition2) => {\n      FieldPosition2[(FieldPosition2[\"HEADER\"] = 0)] = \"HEADER\";\n      FieldPosition2[(FieldPosition2[\"TRAILER\"] = 1)] = \"TRAILER\";\n      return FieldPosition2;\n    })(FieldPosition || {});\n    var SMITHY_CONTEXT_KEY = \"__smithy_context\";\n    var IniSectionType = /* @__PURE__ */ ((IniSectionType2) => {\n      IniSectionType2[\"PROFILE\"] = \"profile\";\n      IniSectionType2[\"SSO_SESSION\"] = \"sso-session\";\n      IniSectionType2[\"SERVICES\"] = \"services\";\n      return IniSectionType2;\n    })(IniSectionType || {});\n    var RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2) => {\n      RequestHandlerProtocol2[\"HTTP_0_9\"] = \"http/0.9\";\n      RequestHandlerProtocol2[\"HTTP_1_0\"] = \"http/1.0\";\n      RequestHandlerProtocol2[\"TDS_8_0\"] = \"tds/8.0\";\n      return RequestHandlerProtocol2;\n    })(RequestHandlerProtocol || {});\n  },\n});\n\n// node_modules/@smithy/protocol-http/dist-cjs/index.js\nvar require_dist_cjs2 = __commonJS({\n  \"node_modules/@smithy/protocol-http/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      Field: () => Field,\n      Fields: () => Fields,\n      HttpRequest: () => HttpRequest,\n      HttpResponse: () => HttpResponse,\n      getHttpHandlerExtensionConfiguration: () => getHttpHandlerExtensionConfiguration,\n      isValidHostname: () => isValidHostname,\n      resolveHttpHandlerRuntimeConfig: () => resolveHttpHandlerRuntimeConfig,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      let httpHandler = runtimeConfig.httpHandler;\n      return {\n        setHttpHandler(handler) {\n          httpHandler = handler;\n        },\n        httpHandler() {\n          return httpHandler;\n        },\n        updateHttpClientConfig(key, value) {\n          httpHandler.updateHttpClientConfig(key, value);\n        },\n        httpHandlerConfigs() {\n          return httpHandler.httpHandlerConfigs();\n        },\n      };\n    }, \"getHttpHandlerExtensionConfiguration\");\n    var resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name(\n      (httpHandlerExtensionConfiguration) => {\n        return {\n          httpHandler: httpHandlerExtensionConfiguration.httpHandler(),\n        };\n      },\n      \"resolveHttpHandlerRuntimeConfig\"\n    );\n    var import_types = require_dist_cjs();\n    var _Field = class _Field {\n      constructor({ name, kind = import_types.FieldPosition.HEADER, values = [] }) {\n        this.name = name;\n        this.kind = kind;\n        this.values = values;\n      }\n      add(value) {\n        this.values.push(value);\n      }\n      set(values) {\n        this.values = values;\n      }\n      remove(value) {\n        this.values = this.values.filter((v) => v !== value);\n      }\n      toString() {\n        return this.values\n          .map((v) => (v.includes(\",\") || v.includes(\" \") ? `\"${v}\"` : v))\n          .join(\", \");\n      }\n      get() {\n        return this.values;\n      }\n    };\n    __name(_Field, \"Field\");\n    var Field = _Field;\n    var _Fields = class _Fields {\n      constructor({ fields = [], encoding = \"utf-8\" }) {\n        this.entries = {};\n        fields.forEach(this.setField.bind(this));\n        this.encoding = encoding;\n      }\n      setField(field) {\n        this.entries[field.name.toLowerCase()] = field;\n      }\n      getField(name) {\n        return this.entries[name.toLowerCase()];\n      }\n      removeField(name) {\n        delete this.entries[name.toLowerCase()];\n      }\n      getByType(kind) {\n        return Object.values(this.entries).filter((field) => field.kind === kind);\n      }\n    };\n    __name(_Fields, \"Fields\");\n    var Fields = _Fields;\n    var _HttpRequest = class _HttpRequest2 {\n      constructor(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n          ? options.protocol.slice(-1) !== \":\"\n            ? `${options.protocol}:`\n            : options.protocol\n          : \"https:\";\n        this.path = options.path\n          ? options.path.charAt(0) !== \"/\"\n            ? `/${options.path}`\n            : options.path\n          : \"/\";\n        this.username = options.username;\n        this.password = options.password;\n        this.fragment = options.fragment;\n      }\n      static isInstance(request) {\n        if (!request) return false;\n        const req = request;\n        return (\n          \"method\" in req &&\n          \"protocol\" in req &&\n          \"hostname\" in req &&\n          \"path\" in req &&\n          typeof req[\"query\"] === \"object\" &&\n          typeof req[\"headers\"] === \"object\"\n        );\n      }\n      clone() {\n        const cloned = new _HttpRequest2({\n          ...this,\n          headers: { ...this.headers },\n        });\n        if (cloned.query) cloned.query = cloneQuery(cloned.query);\n        return cloned;\n      }\n    };\n    __name(_HttpRequest, \"HttpRequest\");\n    var HttpRequest = _HttpRequest;\n    function cloneQuery(query) {\n      return Object.keys(query).reduce((carry, paramName) => {\n        const param = query[paramName];\n        return {\n          ...carry,\n          [paramName]: Array.isArray(param) ? [...param] : param,\n        };\n      }, {});\n    }\n    __name(cloneQuery, \"cloneQuery\");\n    var _HttpResponse = class _HttpResponse {\n      constructor(options) {\n        this.statusCode = options.statusCode;\n        this.reason = options.reason;\n        this.headers = options.headers || {};\n        this.body = options.body;\n      }\n      static isInstance(response) {\n        if (!response) return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n      }\n    };\n    __name(_HttpResponse, \"HttpResponse\");\n    var HttpResponse = _HttpResponse;\n    function isValidHostname(hostname) {\n      const hostPattern = /^[a-z0-9][a-z0-9.-]*[a-z0-9]$/;\n      return hostPattern.test(hostname);\n    }\n    __name(isValidHostname, \"isValidHostname\");\n  },\n});\n\n// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\nvar require_dist_cjs3 = __commonJS({\n  \"node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      getHostHeaderPlugin: () => getHostHeaderPlugin,\n      hostHeaderMiddleware: () => hostHeaderMiddleware,\n      hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,\n      resolveHostHeaderConfig: () => resolveHostHeaderConfig,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_protocol_http = require_dist_cjs2();\n    function resolveHostHeaderConfig(input) {\n      return input;\n    }\n    __name(resolveHostHeaderConfig, \"resolveHostHeaderConfig\");\n    var hostHeaderMiddleware = /* @__PURE__ */ __name(\n      (options) => (next) => async (args) => {\n        if (!import_protocol_http.HttpRequest.isInstance(args.request)) return next(args);\n        const { request } = args;\n        const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n        if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n          delete request.headers[\"host\"];\n          request.headers[\":authority\"] =\n            request.hostname + (request.port ? \":\" + request.port : \"\");\n        } else if (!request.headers[\"host\"]) {\n          let host = request.hostname;\n          if (request.port != null) host += `:${request.port}`;\n          request.headers[\"host\"] = host;\n        }\n        return next(args);\n      },\n      \"hostHeaderMiddleware\"\n    );\n    var hostHeaderMiddlewareOptions = {\n      name: \"hostHeaderMiddleware\",\n      step: \"build\",\n      priority: \"low\",\n      tags: [\"HOST\"],\n      override: true,\n    };\n    var getHostHeaderPlugin = /* @__PURE__ */ __name(\n      (options) => ({\n        applyToStack: (clientStack) => {\n          clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n        },\n      }),\n      \"getHostHeaderPlugin\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\nvar require_dist_cjs4 = __commonJS({\n  \"node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      getLoggerPlugin: () => getLoggerPlugin,\n      loggerMiddleware: () => loggerMiddleware,\n      loggerMiddlewareOptions: () => loggerMiddlewareOptions,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var loggerMiddleware = /* @__PURE__ */ __name(\n      () => (next, context) => async (args) => {\n        var _a, _b;\n        try {\n          const response = await next(args);\n          const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n          const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } =\n            dynamoDbDocumentClientOptions;\n          const inputFilterSensitiveLog =\n            overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n          const outputFilterSensitiveLog =\n            overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;\n          const { $metadata, ...outputWithoutMetadata } = response.output;\n          (_a = logger == null ? void 0 : logger.info) == null\n            ? void 0\n            : _a.call(logger, {\n                clientName,\n                commandName,\n                input: inputFilterSensitiveLog(args.input),\n                output: outputFilterSensitiveLog(outputWithoutMetadata),\n                metadata: $metadata,\n              });\n          return response;\n        } catch (error) {\n          const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n          const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n          const inputFilterSensitiveLog =\n            overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n          (_b = logger == null ? void 0 : logger.error) == null\n            ? void 0\n            : _b.call(logger, {\n                clientName,\n                commandName,\n                input: inputFilterSensitiveLog(args.input),\n                error,\n                metadata: error.$metadata,\n              });\n          throw error;\n        }\n      },\n      \"loggerMiddleware\"\n    );\n    var loggerMiddlewareOptions = {\n      name: \"loggerMiddleware\",\n      tags: [\"LOGGER\"],\n      step: \"initialize\",\n      override: true,\n    };\n    var getLoggerPlugin = /* @__PURE__ */ __name(\n      (options) => ({\n        applyToStack: (clientStack) => {\n          clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n        },\n      }),\n      \"getLoggerPlugin\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\nvar require_dist_cjs5 = __commonJS({\n  \"node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,\n      getRecursionDetectionPlugin: () => getRecursionDetectionPlugin,\n      recursionDetectionMiddleware: () => recursionDetectionMiddleware,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_protocol_http = require_dist_cjs2();\n    var TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\n    var ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\n    var ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\n    var recursionDetectionMiddleware = /* @__PURE__ */ __name(\n      (options) => (next) => async (args) => {\n        const { request } = args;\n        if (\n          !import_protocol_http.HttpRequest.isInstance(request) ||\n          options.runtime !== \"node\" ||\n          Object.hasOwn(request.headers, TRACE_ID_HEADER_NAME)\n        ) {\n          return next(args);\n        }\n        const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n        const traceId = process.env[ENV_TRACE_ID];\n        const nonEmptyString = /* @__PURE__ */ __name(\n          (str) => typeof str === \"string\" && str.length > 0,\n          \"nonEmptyString\"\n        );\n        if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n          request.headers[TRACE_ID_HEADER_NAME] = traceId;\n        }\n        return next({\n          ...args,\n          request,\n        });\n      },\n      \"recursionDetectionMiddleware\"\n    );\n    var addRecursionDetectionMiddlewareOptions = {\n      step: \"build\",\n      tags: [\"RECURSION_DETECTION\"],\n      name: \"recursionDetectionMiddleware\",\n      override: true,\n      priority: \"low\",\n    };\n    var getRecursionDetectionPlugin = /* @__PURE__ */ __name(\n      (options) => ({\n        applyToStack: (clientStack) => {\n          clientStack.add(\n            recursionDetectionMiddleware(options),\n            addRecursionDetectionMiddlewareOptions\n          );\n        },\n      }),\n      \"getRecursionDetectionPlugin\"\n    );\n  },\n});\n\n// node_modules/@smithy/util-endpoints/dist-cjs/index.js\nvar require_dist_cjs6 = __commonJS({\n  \"node_modules/@smithy/util-endpoints/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      EndpointError: () => EndpointError2,\n      customEndpointFunctions: () => customEndpointFunctions,\n      isIpAddress: () => isIpAddress2,\n      isValidHostLabel: () => isValidHostLabel,\n      resolveEndpoint: () => resolveEndpoint2,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var IP_V4_REGEX = /^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$/;\n    var isIpAddress2 = /* @__PURE__ */ __name(\n      (value) => IP_V4_REGEX.test(value) || (value.startsWith(\"[\") && value.endsWith(\"]\")),\n      \"isIpAddress\"\n    );\n    var VALID_HOST_LABEL_REGEX = /^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$/;\n    var isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false) => {\n      if (!allowSubDomains) {\n        return VALID_HOST_LABEL_REGEX.test(value);\n      }\n      const labels = value.split(\".\");\n      for (const label of labels) {\n        if (!isValidHostLabel(label)) {\n          return false;\n        }\n      }\n      return true;\n    }, \"isValidHostLabel\");\n    var customEndpointFunctions = {};\n    var debugId = \"endpoints\";\n    function toDebugString(input) {\n      if (typeof input !== \"object\" || input == null) {\n        return input;\n      }\n      if (\"ref\" in input) {\n        return `$${toDebugString(input.ref)}`;\n      }\n      if (\"fn\" in input) {\n        return `${input.fn}(${(input.argv || []).map(toDebugString).join(\", \")})`;\n      }\n      return JSON.stringify(input, null, 2);\n    }\n    __name(toDebugString, \"toDebugString\");\n    var _EndpointError = class _EndpointError extends Error {\n      constructor(message) {\n        super(message);\n        this.name = \"EndpointError\";\n      }\n    };\n    __name(_EndpointError, \"EndpointError\");\n    var EndpointError2 = _EndpointError;\n    var booleanEquals = /* @__PURE__ */ __name(\n      (value1, value2) => value1 === value2,\n      \"booleanEquals\"\n    );\n    var getAttrPathList = /* @__PURE__ */ __name((path) => {\n      const parts = path.split(\".\");\n      const pathList = [];\n      for (const part of parts) {\n        const squareBracketIndex = part.indexOf(\"[\");\n        if (squareBracketIndex !== -1) {\n          if (part.indexOf(\"]\") !== part.length - 1) {\n            throw new EndpointError2(`Path: '${path}' does not end with ']'`);\n          }\n          const arrayIndex = part.slice(squareBracketIndex + 1, -1);\n          if (Number.isNaN(parseInt(arrayIndex))) {\n            throw new EndpointError2(`Invalid array index: '${arrayIndex}' in path: '${path}'`);\n          }\n          if (squareBracketIndex !== 0) {\n            pathList.push(part.slice(0, squareBracketIndex));\n          }\n          pathList.push(arrayIndex);\n        } else {\n          pathList.push(part);\n        }\n      }\n      return pathList;\n    }, \"getAttrPathList\");\n    var getAttr = /* @__PURE__ */ __name(\n      (value, path) =>\n        getAttrPathList(path).reduce((acc, index) => {\n          if (typeof acc !== \"object\") {\n            throw new EndpointError2(\n              `Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`\n            );\n          } else if (Array.isArray(acc)) {\n            return acc[parseInt(index)];\n          }\n          return acc[index];\n        }, value),\n      \"getAttr\"\n    );\n    var isSet = /* @__PURE__ */ __name((value) => value != null, \"isSet\");\n    var not = /* @__PURE__ */ __name((value) => !value, \"not\");\n    var import_types3 = require_dist_cjs();\n    var DEFAULT_PORTS = {\n      [import_types3.EndpointURLScheme.HTTP]: 80,\n      [import_types3.EndpointURLScheme.HTTPS]: 443,\n    };\n    var parseURL = /* @__PURE__ */ __name((value) => {\n      const whatwgURL = (() => {\n        try {\n          if (value instanceof URL) {\n            return value;\n          }\n          if (typeof value === \"object\" && \"hostname\" in value) {\n            const {\n              hostname: hostname2,\n              port,\n              protocol: protocol2 = \"\",\n              path = \"\",\n              query = {},\n            } = value;\n            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : \"\"}${path}`);\n            url.search = Object.entries(query)\n              .map(([k, v]) => `${k}=${v}`)\n              .join(\"&\");\n            return url;\n          }\n          return new URL(value);\n        } catch (error) {\n          return null;\n        }\n      })();\n      if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n      }\n      const urlString = whatwgURL.href;\n      const { host, hostname, pathname, protocol, search } = whatwgURL;\n      if (search) {\n        return null;\n      }\n      const scheme = protocol.slice(0, -1);\n      if (!Object.values(import_types3.EndpointURLScheme).includes(scheme)) {\n        return null;\n      }\n      const isIp = isIpAddress2(hostname);\n      const inputContainsDefaultPort =\n        urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||\n        (typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));\n      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n      return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp,\n      };\n    }, \"parseURL\");\n    var stringEquals = /* @__PURE__ */ __name(\n      (value1, value2) => value1 === value2,\n      \"stringEquals\"\n    );\n    var substring = /* @__PURE__ */ __name((input, start, stop, reverse) => {\n      if (start >= stop || input.length < stop) {\n        return null;\n      }\n      if (!reverse) {\n        return input.substring(start, stop);\n      }\n      return input.substring(input.length - stop, input.length - start);\n    }, \"substring\");\n    var uriEncode = /* @__PURE__ */ __name(\n      (value) =>\n        encodeURIComponent(value).replace(\n          /[!*'()]/g,\n          (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n        ),\n      \"uriEncode\"\n    );\n    var endpointFunctions = {\n      booleanEquals,\n      getAttr,\n      isSet,\n      isValidHostLabel,\n      not,\n      parseURL,\n      stringEquals,\n      substring,\n      uriEncode,\n    };\n    var evaluateTemplate = /* @__PURE__ */ __name((template, options) => {\n      const evaluatedTemplateArr = [];\n      const templateContext = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n      };\n      let currentIndex = 0;\n      while (currentIndex < template.length) {\n        const openingBraceIndex = template.indexOf(\"{\", currentIndex);\n        if (openingBraceIndex === -1) {\n          evaluatedTemplateArr.push(template.slice(currentIndex));\n          break;\n        }\n        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));\n        const closingBraceIndex = template.indexOf(\"}\", openingBraceIndex);\n        if (closingBraceIndex === -1) {\n          evaluatedTemplateArr.push(template.slice(openingBraceIndex));\n          break;\n        }\n        if (template[openingBraceIndex + 1] === \"{\" && template[closingBraceIndex + 1] === \"}\") {\n          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));\n          currentIndex = closingBraceIndex + 2;\n        }\n        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);\n        if (parameterName.includes(\"#\")) {\n          const [refName, attrName] = parameterName.split(\"#\");\n          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));\n        } else {\n          evaluatedTemplateArr.push(templateContext[parameterName]);\n        }\n        currentIndex = closingBraceIndex + 1;\n      }\n      return evaluatedTemplateArr.join(\"\");\n    }, \"evaluateTemplate\");\n    var getReferenceValue = /* @__PURE__ */ __name(({ ref }, options) => {\n      const referenceRecord = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n      };\n      return referenceRecord[ref];\n    }, \"getReferenceValue\");\n    var evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options) => {\n      if (typeof obj === \"string\") {\n        return evaluateTemplate(obj, options);\n      } else if (obj[\"fn\"]) {\n        return callFunction(obj, options);\n      } else if (obj[\"ref\"]) {\n        return getReferenceValue(obj, options);\n      }\n      throw new EndpointError2(\n        `'${keyName}': ${String(obj)} is not a string, function or reference.`\n      );\n    }, \"evaluateExpression\");\n    var callFunction = /* @__PURE__ */ __name(({ fn, argv }, options) => {\n      const evaluatedArgs = argv.map((arg) =>\n        [\"boolean\", \"number\"].includes(typeof arg) ? arg : evaluateExpression(arg, \"arg\", options)\n      );\n      const fnSegments = fn.split(\".\");\n      if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {\n        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);\n      }\n      return endpointFunctions[fn](...evaluatedArgs);\n    }, \"callFunction\");\n    var evaluateCondition = /* @__PURE__ */ __name(({ assign, ...fnArgs }, options) => {\n      var _a, _b;\n      if (assign && assign in options.referenceRecord) {\n        throw new EndpointError2(`'${assign}' is already defined in Reference Record.`);\n      }\n      const value = callFunction(fnArgs, options);\n      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null\n        ? void 0\n        : _b.call(\n            _a,\n            `${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`\n          );\n      return {\n        result: value === \"\" ? true : !!value,\n        ...(assign != null && { toAssign: { name: assign, value } }),\n      };\n    }, \"evaluateCondition\");\n    var evaluateConditions = /* @__PURE__ */ __name((conditions = [], options) => {\n      var _a, _b;\n      const conditionsReferenceRecord = {};\n      for (const condition of conditions) {\n        const { result, toAssign } = evaluateCondition(condition, {\n          ...options,\n          referenceRecord: {\n            ...options.referenceRecord,\n            ...conditionsReferenceRecord,\n          },\n        });\n        if (!result) {\n          return { result };\n        }\n        if (toAssign) {\n          conditionsReferenceRecord[toAssign.name] = toAssign.value;\n          (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null\n            ? void 0\n            : _b.call(\n                _a,\n                `${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`\n              );\n        }\n      }\n      return { result: true, referenceRecord: conditionsReferenceRecord };\n    }, \"evaluateConditions\");\n    var getEndpointHeaders = /* @__PURE__ */ __name(\n      (headers, options) =>\n        Object.entries(headers).reduce(\n          (acc, [headerKey, headerVal]) => ({\n            ...acc,\n            [headerKey]: headerVal.map((headerValEntry) => {\n              const processedExpr = evaluateExpression(\n                headerValEntry,\n                \"Header value entry\",\n                options\n              );\n              if (typeof processedExpr !== \"string\") {\n                throw new EndpointError2(\n                  `Header '${headerKey}' value '${processedExpr}' is not a string`\n                );\n              }\n              return processedExpr;\n            }),\n          }),\n          {}\n        ),\n      \"getEndpointHeaders\"\n    );\n    var getEndpointProperty = /* @__PURE__ */ __name((property, options) => {\n      if (Array.isArray(property)) {\n        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));\n      }\n      switch (typeof property) {\n        case \"string\":\n          return evaluateTemplate(property, options);\n        case \"object\":\n          if (property === null) {\n            throw new EndpointError2(`Unexpected endpoint property: ${property}`);\n          }\n          return getEndpointProperties(property, options);\n        case \"boolean\":\n          return property;\n        default:\n          throw new EndpointError2(`Unexpected endpoint property type: ${typeof property}`);\n      }\n    }, \"getEndpointProperty\");\n    var getEndpointProperties = /* @__PURE__ */ __name(\n      (properties, options) =>\n        Object.entries(properties).reduce(\n          (acc, [propertyKey, propertyVal]) => ({\n            ...acc,\n            [propertyKey]: getEndpointProperty(propertyVal, options),\n          }),\n          {}\n        ),\n      \"getEndpointProperties\"\n    );\n    var getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options) => {\n      const expression = evaluateExpression(endpointUrl, \"Endpoint URL\", options);\n      if (typeof expression === \"string\") {\n        try {\n          return new URL(expression);\n        } catch (error) {\n          console.error(`Failed to construct URL with ${expression}`, error);\n          throw error;\n        }\n      }\n      throw new EndpointError2(`Endpoint URL must be a string, got ${typeof expression}`);\n    }, \"getEndpointUrl\");\n    var evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options) => {\n      var _a, _b;\n      const { conditions, endpoint } = endpointRule;\n      const { result, referenceRecord } = evaluateConditions(conditions, options);\n      if (!result) {\n        return;\n      }\n      const endpointRuleOptions = {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n      };\n      const { url, properties, headers } = endpoint;\n      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null\n        ? void 0\n        : _b.call(_a, `${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);\n      return {\n        ...(headers != void 0 && {\n          headers: getEndpointHeaders(headers, endpointRuleOptions),\n        }),\n        ...(properties != void 0 && {\n          properties: getEndpointProperties(properties, endpointRuleOptions),\n        }),\n        url: getEndpointUrl(url, endpointRuleOptions),\n      };\n    }, \"evaluateEndpointRule\");\n    var evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options) => {\n      const { conditions, error } = errorRule;\n      const { result, referenceRecord } = evaluateConditions(conditions, options);\n      if (!result) {\n        return;\n      }\n      throw new EndpointError2(\n        evaluateExpression(error, \"Error\", {\n          ...options,\n          referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n        })\n      );\n    }, \"evaluateErrorRule\");\n    var evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options) => {\n      const { conditions, rules } = treeRule;\n      const { result, referenceRecord } = evaluateConditions(conditions, options);\n      if (!result) {\n        return;\n      }\n      return evaluateRules(rules, {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n      });\n    }, \"evaluateTreeRule\");\n    var evaluateRules = /* @__PURE__ */ __name((rules, options) => {\n      for (const rule of rules) {\n        if (rule.type === \"endpoint\") {\n          const endpointOrUndefined = evaluateEndpointRule(rule, options);\n          if (endpointOrUndefined) {\n            return endpointOrUndefined;\n          }\n        } else if (rule.type === \"error\") {\n          evaluateErrorRule(rule, options);\n        } else if (rule.type === \"tree\") {\n          const endpointOrUndefined = evaluateTreeRule(rule, options);\n          if (endpointOrUndefined) {\n            return endpointOrUndefined;\n          }\n        } else {\n          throw new EndpointError2(`Unknown endpoint rule: ${rule}`);\n        }\n      }\n      throw new EndpointError2(`Rules evaluation failed`);\n    }, \"evaluateRules\");\n    var resolveEndpoint2 = /* @__PURE__ */ __name((ruleSetObject, options) => {\n      var _a, _b, _c, _d, _e;\n      const { endpointParams, logger } = options;\n      const { parameters, rules } = ruleSetObject;\n      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null\n        ? void 0\n        : _b.call(_a, `${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);\n      const paramsWithDefault = Object.entries(parameters)\n        .filter(([, v]) => v.default != null)\n        .map(([k, v]) => [k, v.default]);\n      if (paramsWithDefault.length > 0) {\n        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {\n          endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;\n        }\n      }\n      const requiredParams = Object.entries(parameters)\n        .filter(([, v]) => v.required)\n        .map(([k]) => k);\n      for (const requiredParam of requiredParams) {\n        if (endpointParams[requiredParam] == null) {\n          throw new EndpointError2(`Missing required parameter: '${requiredParam}'`);\n        }\n      }\n      const endpoint = evaluateRules(rules, { endpointParams, logger, referenceRecord: {} });\n      if ((_c = options.endpointParams) == null ? void 0 : _c.Endpoint) {\n        try {\n          const givenEndpoint = new URL(options.endpointParams.Endpoint);\n          const { protocol, port } = givenEndpoint;\n          endpoint.url.protocol = protocol;\n          endpoint.url.port = port;\n        } catch (e) {}\n      }\n      (_e = (_d = options.logger) == null ? void 0 : _d.debug) == null\n        ? void 0\n        : _e.call(_d, `${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);\n      return endpoint;\n    }, \"resolveEndpoint\");\n  },\n});\n\n// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js\nvar require_dist_cjs7 = __commonJS({\n  \"node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      ConditionObject: () => import_util_endpoints.ConditionObject,\n      DeprecatedObject: () => import_util_endpoints.DeprecatedObject,\n      EndpointError: () => import_util_endpoints.EndpointError,\n      EndpointObject: () => import_util_endpoints.EndpointObject,\n      EndpointObjectHeaders: () => import_util_endpoints.EndpointObjectHeaders,\n      EndpointObjectProperties: () => import_util_endpoints.EndpointObjectProperties,\n      EndpointParams: () => import_util_endpoints.EndpointParams,\n      EndpointResolverOptions: () => import_util_endpoints.EndpointResolverOptions,\n      EndpointRuleObject: () => import_util_endpoints.EndpointRuleObject,\n      ErrorRuleObject: () => import_util_endpoints.ErrorRuleObject,\n      EvaluateOptions: () => import_util_endpoints.EvaluateOptions,\n      Expression: () => import_util_endpoints.Expression,\n      FunctionArgv: () => import_util_endpoints.FunctionArgv,\n      FunctionObject: () => import_util_endpoints.FunctionObject,\n      FunctionReturn: () => import_util_endpoints.FunctionReturn,\n      ParameterObject: () => import_util_endpoints.ParameterObject,\n      ReferenceObject: () => import_util_endpoints.ReferenceObject,\n      ReferenceRecord: () => import_util_endpoints.ReferenceRecord,\n      RuleSetObject: () => import_util_endpoints.RuleSetObject,\n      RuleSetRules: () => import_util_endpoints.RuleSetRules,\n      TreeRuleObject: () => import_util_endpoints.TreeRuleObject,\n      awsEndpointFunctions: () => awsEndpointFunctions,\n      getUserAgentPrefix: () => getUserAgentPrefix,\n      isIpAddress: () => import_util_endpoints.isIpAddress,\n      partition: () => partition,\n      resolveEndpoint: () => import_util_endpoints.resolveEndpoint,\n      setPartitionInfo: () => setPartitionInfo,\n      useDefaultPartitionInfo: () => useDefaultPartitionInfo,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_util_endpoints = require_dist_cjs6();\n    var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {\n      if (allowSubDomains) {\n        for (const label of value.split(\".\")) {\n          if (!isVirtualHostableS3Bucket(label)) {\n            return false;\n          }\n        }\n        return true;\n      }\n      if (!(0, import_util_endpoints.isValidHostLabel)(value)) {\n        return false;\n      }\n      if (value.length < 3 || value.length > 63) {\n        return false;\n      }\n      if (value !== value.toLowerCase()) {\n        return false;\n      }\n      if ((0, import_util_endpoints.isIpAddress)(value)) {\n        return false;\n      }\n      return true;\n    }, \"isVirtualHostableS3Bucket\");\n    var parseArn = /* @__PURE__ */ __name((value) => {\n      const segments = value.split(\":\");\n      if (segments.length < 6) return null;\n      const [arn, partition2, service, region, accountId, ...resourceId] = segments;\n      if (arn !== \"arn\" || partition2 === \"\" || service === \"\" || resourceId[0] === \"\") return null;\n      return {\n        partition: partition2,\n        service,\n        region,\n        accountId,\n        resourceId: resourceId[0].includes(\"/\") ? resourceId[0].split(\"/\") : resourceId,\n      };\n    }, \"parseArn\");\n    var partitions_default = {\n      partitions: [\n        {\n          id: \"aws\",\n          outputs: {\n            dnsSuffix: \"amazonaws.com\",\n            dualStackDnsSuffix: \"api.aws\",\n            implicitGlobalRegion: \"us-east-1\",\n            name: \"aws\",\n            supportsDualStack: true,\n            supportsFIPS: true,\n          },\n          regionRegex: \"^(us|eu|ap|sa|ca|me|af|il)\\\\-\\\\w+\\\\-\\\\d+$\",\n          regions: {\n            \"af-south-1\": {\n              description: \"Africa (Cape Town)\",\n            },\n            \"ap-east-1\": {\n              description: \"Asia Pacific (Hong Kong)\",\n            },\n            \"ap-northeast-1\": {\n              description: \"Asia Pacific (Tokyo)\",\n            },\n            \"ap-northeast-2\": {\n              description: \"Asia Pacific (Seoul)\",\n            },\n            \"ap-northeast-3\": {\n              description: \"Asia Pacific (Osaka)\",\n            },\n            \"ap-south-1\": {\n              description: \"Asia Pacific (Mumbai)\",\n            },\n            \"ap-south-2\": {\n              description: \"Asia Pacific (Hyderabad)\",\n            },\n            \"ap-southeast-1\": {\n              description: \"Asia Pacific (Singapore)\",\n            },\n            \"ap-southeast-2\": {\n              description: \"Asia Pacific (Sydney)\",\n            },\n            \"ap-southeast-3\": {\n              description: \"Asia Pacific (Jakarta)\",\n            },\n            \"ap-southeast-4\": {\n              description: \"Asia Pacific (Melbourne)\",\n            },\n            \"aws-global\": {\n              description: \"AWS Standard global region\",\n            },\n            \"ca-central-1\": {\n              description: \"Canada (Central)\",\n            },\n            \"ca-west-1\": {\n              description: \"Canada West (Calgary)\",\n            },\n            \"eu-central-1\": {\n              description: \"Europe (Frankfurt)\",\n            },\n            \"eu-central-2\": {\n              description: \"Europe (Zurich)\",\n            },\n            \"eu-north-1\": {\n              description: \"Europe (Stockholm)\",\n            },\n            \"eu-south-1\": {\n              description: \"Europe (Milan)\",\n            },\n            \"eu-south-2\": {\n              description: \"Europe (Spain)\",\n            },\n            \"eu-west-1\": {\n              description: \"Europe (Ireland)\",\n            },\n            \"eu-west-2\": {\n              description: \"Europe (London)\",\n            },\n            \"eu-west-3\": {\n              description: \"Europe (Paris)\",\n            },\n            \"il-central-1\": {\n              description: \"Israel (Tel Aviv)\",\n            },\n            \"me-central-1\": {\n              description: \"Middle East (UAE)\",\n            },\n            \"me-south-1\": {\n              description: \"Middle East (Bahrain)\",\n            },\n            \"sa-east-1\": {\n              description: \"South America (Sao Paulo)\",\n            },\n            \"us-east-1\": {\n              description: \"US East (N. Virginia)\",\n            },\n            \"us-east-2\": {\n              description: \"US East (Ohio)\",\n            },\n            \"us-west-1\": {\n              description: \"US West (N. California)\",\n            },\n            \"us-west-2\": {\n              description: \"US West (Oregon)\",\n            },\n          },\n        },\n        {\n          id: \"aws-cn\",\n          outputs: {\n            dnsSuffix: \"amazonaws.com.cn\",\n            dualStackDnsSuffix: \"api.amazonwebservices.com.cn\",\n            implicitGlobalRegion: \"cn-northwest-1\",\n            name: \"aws-cn\",\n            supportsDualStack: true,\n            supportsFIPS: true,\n          },\n          regionRegex: \"^cn\\\\-\\\\w+\\\\-\\\\d+$\",\n          regions: {\n            \"aws-cn-global\": {\n              description: \"AWS China global region\",\n            },\n            \"cn-north-1\": {\n              description: \"China (Beijing)\",\n            },\n            \"cn-northwest-1\": {\n              description: \"China (Ningxia)\",\n            },\n          },\n        },\n        {\n          id: \"aws-us-gov\",\n          outputs: {\n            dnsSuffix: \"amazonaws.com\",\n            dualStackDnsSuffix: \"api.aws\",\n            implicitGlobalRegion: \"us-gov-west-1\",\n            name: \"aws-us-gov\",\n            supportsDualStack: true,\n            supportsFIPS: true,\n          },\n          regionRegex: \"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$\",\n          regions: {\n            \"aws-us-gov-global\": {\n              description: \"AWS GovCloud (US) global region\",\n            },\n            \"us-gov-east-1\": {\n              description: \"AWS GovCloud (US-East)\",\n            },\n            \"us-gov-west-1\": {\n              description: \"AWS GovCloud (US-West)\",\n            },\n          },\n        },\n        {\n          id: \"aws-iso\",\n          outputs: {\n            dnsSuffix: \"c2s.ic.gov\",\n            dualStackDnsSuffix: \"c2s.ic.gov\",\n            implicitGlobalRegion: \"us-iso-east-1\",\n            name: \"aws-iso\",\n            supportsDualStack: false,\n            supportsFIPS: true,\n          },\n          regionRegex: \"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$\",\n          regions: {\n            \"aws-iso-global\": {\n              description: \"AWS ISO (US) global region\",\n            },\n            \"us-iso-east-1\": {\n              description: \"US ISO East\",\n            },\n            \"us-iso-west-1\": {\n              description: \"US ISO WEST\",\n            },\n          },\n        },\n        {\n          id: \"aws-iso-b\",\n          outputs: {\n            dnsSuffix: \"sc2s.sgov.gov\",\n            dualStackDnsSuffix: \"sc2s.sgov.gov\",\n            implicitGlobalRegion: \"us-isob-east-1\",\n            name: \"aws-iso-b\",\n            supportsDualStack: false,\n            supportsFIPS: true,\n          },\n          regionRegex: \"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$\",\n          regions: {\n            \"aws-iso-b-global\": {\n              description: \"AWS ISOB (US) global region\",\n            },\n            \"us-isob-east-1\": {\n              description: \"US ISOB East (Ohio)\",\n            },\n          },\n        },\n        {\n          id: \"aws-iso-e\",\n          outputs: {\n            dnsSuffix: \"cloud.adc-e.uk\",\n            dualStackDnsSuffix: \"cloud.adc-e.uk\",\n            implicitGlobalRegion: \"eu-isoe-west-1\",\n            name: \"aws-iso-e\",\n            supportsDualStack: false,\n            supportsFIPS: true,\n          },\n          regionRegex: \"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$\",\n          regions: {\n            \"eu-isoe-west-1\": {\n              description: \"EU ISOE West\",\n            },\n          },\n        },\n        {\n          id: \"aws-iso-f\",\n          outputs: {\n            dnsSuffix: \"csp.hci.ic.gov\",\n            dualStackDnsSuffix: \"csp.hci.ic.gov\",\n            implicitGlobalRegion: \"us-isof-south-1\",\n            name: \"aws-iso-f\",\n            supportsDualStack: false,\n            supportsFIPS: true,\n          },\n          regionRegex: \"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$\",\n          regions: {},\n        },\n      ],\n      version: \"1.1\",\n    };\n    var selectedPartitionsInfo = partitions_default;\n    var selectedUserAgentPrefix = \"\";\n    var partition = /* @__PURE__ */ __name((value) => {\n      const { partitions } = selectedPartitionsInfo;\n      for (const partition2 of partitions) {\n        const { regions, outputs } = partition2;\n        for (const [region, regionData] of Object.entries(regions)) {\n          if (region === value) {\n            return {\n              ...outputs,\n              ...regionData,\n            };\n          }\n        }\n      }\n      for (const partition2 of partitions) {\n        const { regionRegex, outputs } = partition2;\n        if (new RegExp(regionRegex).test(value)) {\n          return {\n            ...outputs,\n          };\n        }\n      }\n      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === \"aws\");\n      if (!DEFAULT_PARTITION) {\n        throw new Error(\n          \"Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.\"\n        );\n      }\n      return {\n        ...DEFAULT_PARTITION.outputs,\n      };\n    }, \"partition\");\n    var setPartitionInfo = /* @__PURE__ */ __name((partitionsInfo, userAgentPrefix = \"\") => {\n      selectedPartitionsInfo = partitionsInfo;\n      selectedUserAgentPrefix = userAgentPrefix;\n    }, \"setPartitionInfo\");\n    var useDefaultPartitionInfo = /* @__PURE__ */ __name(() => {\n      setPartitionInfo(partitions_default, \"\");\n    }, \"useDefaultPartitionInfo\");\n    var getUserAgentPrefix = /* @__PURE__ */ __name(\n      () => selectedUserAgentPrefix,\n      \"getUserAgentPrefix\"\n    );\n    var awsEndpointFunctions = {\n      isVirtualHostableS3Bucket,\n      parseArn,\n      partition,\n    };\n    import_util_endpoints.customEndpointFunctions.aws = awsEndpointFunctions;\n  },\n});\n\n// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\nvar require_dist_cjs8 = __commonJS({\n  \"node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,\n      getUserAgentPlugin: () => getUserAgentPlugin,\n      resolveUserAgentConfig: () => resolveUserAgentConfig,\n      userAgentMiddleware: () => userAgentMiddleware,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    function resolveUserAgentConfig(input) {\n      return {\n        ...input,\n        customUserAgent:\n          typeof input.customUserAgent === \"string\"\n            ? [[input.customUserAgent]]\n            : input.customUserAgent,\n      };\n    }\n    __name(resolveUserAgentConfig, \"resolveUserAgentConfig\");\n    var import_util_endpoints = require_dist_cjs7();\n    var import_protocol_http = require_dist_cjs2();\n    var USER_AGENT = \"user-agent\";\n    var X_AMZ_USER_AGENT = \"x-amz-user-agent\";\n    var SPACE = \" \";\n    var UA_NAME_SEPARATOR = \"/\";\n    var UA_NAME_ESCAPE_REGEX = /[^!$%&'*+\\-.^_`|~\\d\\w]/g;\n    var UA_VALUE_ESCAPE_REGEX = /[^!$%&'*+\\-.^_`|~\\d\\w#]/g;\n    var UA_ESCAPE_CHAR = \"-\";\n    var userAgentMiddleware = /* @__PURE__ */ __name(\n      (options) => (next, context) => async (args) => {\n        var _a, _b;\n        const { request } = args;\n        if (!import_protocol_http.HttpRequest.isInstance(request)) return next(args);\n        const { headers } = request;\n        const userAgent =\n          ((_a = context == null ? void 0 : context.userAgent) == null\n            ? void 0\n            : _a.map(escapeUserAgent)) || [];\n        const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n        const customUserAgent =\n          ((_b = options == null ? void 0 : options.customUserAgent) == null\n            ? void 0\n            : _b.map(escapeUserAgent)) || [];\n        const prefix = (0, import_util_endpoints.getUserAgentPrefix)();\n        const sdkUserAgentValue = (prefix ? [prefix] : [])\n          .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])\n          .join(SPACE);\n        const normalUAValue = [\n          ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n          ...customUserAgent,\n        ].join(SPACE);\n        if (options.runtime !== \"browser\") {\n          if (normalUAValue) {\n            headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT]\n              ? `${headers[USER_AGENT]} ${normalUAValue}`\n              : normalUAValue;\n          }\n          headers[USER_AGENT] = sdkUserAgentValue;\n        } else {\n          headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;\n        }\n        return next({\n          ...args,\n          request,\n        });\n      },\n      \"userAgentMiddleware\"\n    );\n    var escapeUserAgent = /* @__PURE__ */ __name((userAgentPair) => {\n      var _a;\n      const name = userAgentPair[0]\n        .split(UA_NAME_SEPARATOR)\n        .map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR))\n        .join(UA_NAME_SEPARATOR);\n      const version =\n        (_a = userAgentPair[1]) == null\n          ? void 0\n          : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);\n      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);\n      const prefix = name.substring(0, prefixSeparatorIndex);\n      let uaName = name.substring(prefixSeparatorIndex + 1);\n      if (prefix === \"api\") {\n        uaName = uaName.toLowerCase();\n      }\n      return [prefix, uaName, version]\n        .filter((item) => item && item.length > 0)\n        .reduce((acc, item, index) => {\n          switch (index) {\n            case 0:\n              return item;\n            case 1:\n              return `${acc}/${item}`;\n            default:\n              return `${acc}#${item}`;\n          }\n        }, \"\");\n    }, \"escapeUserAgent\");\n    var getUserAgentMiddlewareOptions = {\n      name: \"getUserAgentMiddleware\",\n      step: \"build\",\n      priority: \"low\",\n      tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n      override: true,\n    };\n    var getUserAgentPlugin = /* @__PURE__ */ __name(\n      (config) => ({\n        applyToStack: (clientStack) => {\n          clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n        },\n      }),\n      \"getUserAgentPlugin\"\n    );\n  },\n});\n\n// node_modules/@smithy/util-config-provider/dist-cjs/index.js\nvar require_dist_cjs9 = __commonJS({\n  \"node_modules/@smithy/util-config-provider/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      SelectorType: () => SelectorType,\n      booleanSelector: () => booleanSelector,\n      numberSelector: () => numberSelector,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var booleanSelector = /* @__PURE__ */ __name((obj, key, type) => {\n      if (!(key in obj)) return void 0;\n      if (obj[key] === \"true\") return true;\n      if (obj[key] === \"false\") return false;\n      throw new Error(`Cannot load ${type} \"${key}\". Expected \"true\" or \"false\", got ${obj[key]}.`);\n    }, \"booleanSelector\");\n    var numberSelector = /* @__PURE__ */ __name((obj, key, type) => {\n      if (!(key in obj)) return void 0;\n      const numberValue = parseInt(obj[key], 10);\n      if (Number.isNaN(numberValue)) {\n        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);\n      }\n      return numberValue;\n    }, \"numberSelector\");\n    var SelectorType = /* @__PURE__ */ ((SelectorType2) => {\n      SelectorType2[\"ENV\"] = \"env\";\n      SelectorType2[\"CONFIG\"] = \"shared config entry\";\n      return SelectorType2;\n    })(SelectorType || {});\n  },\n});\n\n// node_modules/@smithy/util-middleware/dist-cjs/index.js\nvar require_dist_cjs10 = __commonJS({\n  \"node_modules/@smithy/util-middleware/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      getSmithyContext: () => getSmithyContext2,\n      normalizeProvider: () => normalizeProvider,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_types = require_dist_cjs();\n    var getSmithyContext2 = /* @__PURE__ */ __name(\n      (context) =>\n        context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}),\n      \"getSmithyContext\"\n    );\n    var normalizeProvider = /* @__PURE__ */ __name((input) => {\n      if (typeof input === \"function\") return input;\n      const promisified = Promise.resolve(input);\n      return () => promisified;\n    }, \"normalizeProvider\");\n  },\n});\n\n// node_modules/@smithy/config-resolver/dist-cjs/index.js\nvar require_dist_cjs11 = __commonJS({\n  \"node_modules/@smithy/config-resolver/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,\n      CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,\n      DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,\n      DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,\n      ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,\n      ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,\n      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,\n      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,\n      NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,\n      NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,\n      REGION_ENV_NAME: () => REGION_ENV_NAME,\n      REGION_INI_NAME: () => REGION_INI_NAME,\n      getRegionInfo: () => getRegionInfo,\n      resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,\n      resolveEndpointsConfig: () => resolveEndpointsConfig,\n      resolveRegionConfig: () => resolveRegionConfig,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_util_config_provider = require_dist_cjs9();\n    var ENV_USE_DUALSTACK_ENDPOINT = \"AWS_USE_DUALSTACK_ENDPOINT\";\n    var CONFIG_USE_DUALSTACK_ENDPOINT = \"use_dualstack_endpoint\";\n    var DEFAULT_USE_DUALSTACK_ENDPOINT = false;\n    var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) =>\n        (0, import_util_config_provider.booleanSelector)(\n          env,\n          ENV_USE_DUALSTACK_ENDPOINT,\n          import_util_config_provider.SelectorType.ENV\n        ),\n      configFileSelector: (profile) =>\n        (0, import_util_config_provider.booleanSelector)(\n          profile,\n          CONFIG_USE_DUALSTACK_ENDPOINT,\n          import_util_config_provider.SelectorType.CONFIG\n        ),\n      default: false,\n    };\n    var ENV_USE_FIPS_ENDPOINT = \"AWS_USE_FIPS_ENDPOINT\";\n    var CONFIG_USE_FIPS_ENDPOINT = \"use_fips_endpoint\";\n    var DEFAULT_USE_FIPS_ENDPOINT = false;\n    var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) =>\n        (0, import_util_config_provider.booleanSelector)(\n          env,\n          ENV_USE_FIPS_ENDPOINT,\n          import_util_config_provider.SelectorType.ENV\n        ),\n      configFileSelector: (profile) =>\n        (0, import_util_config_provider.booleanSelector)(\n          profile,\n          CONFIG_USE_FIPS_ENDPOINT,\n          import_util_config_provider.SelectorType.CONFIG\n        ),\n      default: false,\n    };\n    var import_util_middleware = require_dist_cjs10();\n    var resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input) => {\n      const { endpoint, urlParser } = input;\n      return {\n        ...input,\n        tls: input.tls ?? true,\n        endpoint: (0, import_util_middleware.normalizeProvider)(\n          typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint\n        ),\n        isCustomEndpoint: true,\n        useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(\n          input.useDualstackEndpoint ?? false\n        ),\n      };\n    }, \"resolveCustomEndpointsConfig\");\n    var getEndpointFromRegion = /* @__PURE__ */ __name(async (input) => {\n      const { tls = true } = input;\n      const region = await input.region();\n      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n      if (!dnsHostRegex.test(region)) {\n        throw new Error(\"Invalid region in client config\");\n      }\n      const useDualstackEndpoint = await input.useDualstackEndpoint();\n      const useFipsEndpoint = await input.useFipsEndpoint();\n      const { hostname } =\n        (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) ?? {};\n      if (!hostname) {\n        throw new Error(\"Cannot resolve hostname from client config\");\n      }\n      return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n    }, \"getEndpointFromRegion\");\n    var resolveEndpointsConfig = /* @__PURE__ */ __name((input) => {\n      const useDualstackEndpoint = (0, import_util_middleware.normalizeProvider)(\n        input.useDualstackEndpoint ?? false\n      );\n      const { endpoint, useFipsEndpoint, urlParser } = input;\n      return {\n        ...input,\n        tls: input.tls ?? true,\n        endpoint: endpoint\n          ? (0, import_util_middleware.normalizeProvider)(\n              typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint\n            )\n          : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),\n        isCustomEndpoint: !!endpoint,\n        useDualstackEndpoint,\n      };\n    }, \"resolveEndpointsConfig\");\n    var REGION_ENV_NAME = \"AWS_REGION\";\n    var REGION_INI_NAME = \"region\";\n    var NODE_REGION_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) => env[REGION_ENV_NAME],\n      configFileSelector: (profile) => profile[REGION_INI_NAME],\n      default: () => {\n        throw new Error(\"Region is missing\");\n      },\n    };\n    var NODE_REGION_CONFIG_FILE_OPTIONS = {\n      preferredFile: \"credentials\",\n    };\n    var isFipsRegion = /* @__PURE__ */ __name(\n      (region) =>\n        typeof region === \"string\" && (region.startsWith(\"fips-\") || region.endsWith(\"-fips\")),\n      \"isFipsRegion\"\n    );\n    var getRealRegion = /* @__PURE__ */ __name(\n      (region) =>\n        isFipsRegion(region)\n          ? [\"fips-aws-global\", \"aws-fips\"].includes(region)\n            ? \"us-east-1\"\n            : region.replace(/fips-(dkr-|prod-)?|-fips/, \"\")\n          : region,\n      \"getRealRegion\"\n    );\n    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {\n      const { region, useFipsEndpoint } = input;\n      if (!region) {\n        throw new Error(\"Region is missing\");\n      }\n      return {\n        ...input,\n        region: async () => {\n          if (typeof region === \"string\") {\n            return getRealRegion(region);\n          }\n          const providedRegion = await region();\n          return getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n          const providedRegion = typeof region === \"string\" ? region : await region();\n          if (isFipsRegion(providedRegion)) {\n            return true;\n          }\n          return typeof useFipsEndpoint !== \"function\"\n            ? Promise.resolve(!!useFipsEndpoint)\n            : useFipsEndpoint();\n        },\n      };\n    }, \"resolveRegionConfig\");\n    var getHostnameFromVariants = /* @__PURE__ */ __name(\n      (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {\n        var _a;\n        return (_a = variants.find(\n          ({ tags }) =>\n            useFipsEndpoint === tags.includes(\"fips\") &&\n            useDualstackEndpoint === tags.includes(\"dualstack\")\n        )) == null\n          ? void 0\n          : _a.hostname;\n      },\n      \"getHostnameFromVariants\"\n    );\n    var getResolvedHostname = /* @__PURE__ */ __name(\n      (resolvedRegion, { regionHostname, partitionHostname }) =>\n        regionHostname\n          ? regionHostname\n          : partitionHostname\n            ? partitionHostname.replace(\"{region}\", resolvedRegion)\n            : void 0,\n      \"getResolvedHostname\"\n    );\n    var getResolvedPartition = /* @__PURE__ */ __name(\n      (region, { partitionHash }) =>\n        Object.keys(partitionHash || {}).find((key) =>\n          partitionHash[key].regions.includes(region)\n        ) ?? \"aws\",\n      \"getResolvedPartition\"\n    );\n    var getResolvedSigningRegion = /* @__PURE__ */ __name(\n      (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {\n        if (signingRegion) {\n          return signingRegion;\n        } else if (useFipsEndpoint) {\n          const regionRegexJs = regionRegex\n            .replace(\"\\\\\\\\\", \"\\\\\")\n            .replace(/^\\^/g, \"\\\\.\")\n            .replace(/\\$$/g, \"\\\\.\");\n          const regionRegexmatchArray = hostname.match(regionRegexJs);\n          if (regionRegexmatchArray) {\n            return regionRegexmatchArray[0].slice(1, -1);\n          }\n        }\n      },\n      \"getResolvedSigningRegion\"\n    );\n    var getRegionInfo = /* @__PURE__ */ __name(\n      (\n        region,\n        {\n          useFipsEndpoint = false,\n          useDualstackEndpoint = false,\n          signingService,\n          regionHash,\n          partitionHash,\n        }\n      ) => {\n        var _a, _b, _c, _d, _e;\n        const partition = getResolvedPartition(region, { partitionHash });\n        const resolvedRegion =\n          region in regionHash\n            ? region\n            : (((_a = partitionHash[partition]) == null ? void 0 : _a.endpoint) ?? region);\n        const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };\n        const regionHostname = getHostnameFromVariants(\n          (_b = regionHash[resolvedRegion]) == null ? void 0 : _b.variants,\n          hostnameOptions\n        );\n        const partitionHostname = getHostnameFromVariants(\n          (_c = partitionHash[partition]) == null ? void 0 : _c.variants,\n          hostnameOptions\n        );\n        const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });\n        if (hostname === void 0) {\n          throw new Error(\n            `Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`\n          );\n        }\n        const signingRegion = getResolvedSigningRegion(hostname, {\n          signingRegion: (_d = regionHash[resolvedRegion]) == null ? void 0 : _d.signingRegion,\n          regionRegex: partitionHash[partition].regionRegex,\n          useFipsEndpoint,\n        });\n        return {\n          partition,\n          signingService,\n          hostname,\n          ...(signingRegion && { signingRegion }),\n          ...(((_e = regionHash[resolvedRegion]) == null ? void 0 : _e.signingService) && {\n            signingService: regionHash[resolvedRegion].signingService,\n          }),\n        };\n      },\n      \"getRegionInfo\"\n    );\n  },\n});\n\n// node_modules/@smithy/property-provider/dist-cjs/index.js\nvar require_dist_cjs12 = __commonJS({\n  \"node_modules/@smithy/property-provider/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      CredentialsProviderError: () => CredentialsProviderError,\n      ProviderError: () => ProviderError,\n      TokenProviderError: () => TokenProviderError,\n      chain: () => chain,\n      fromStatic: () => fromStatic,\n      memoize: () => memoize,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var _ProviderError = class _ProviderError2 extends Error {\n      constructor(message, options = true) {\n        var _a;\n        let logger;\n        let tryNextLink = true;\n        if (typeof options === \"boolean\") {\n          logger = void 0;\n          tryNextLink = options;\n        } else if (options != null && typeof options === \"object\") {\n          logger = options.logger;\n          tryNextLink = options.tryNextLink ?? true;\n        }\n        super(message);\n        this.name = \"ProviderError\";\n        this.tryNextLink = tryNextLink;\n        Object.setPrototypeOf(this, _ProviderError2.prototype);\n        (_a = logger == null ? void 0 : logger.debug) == null\n          ? void 0\n          : _a.call(logger, `@smithy/property-provider ${tryNextLink ? \"->\" : \"(!)\"} ${message}`);\n      }\n      static from(error, options = true) {\n        return Object.assign(new _ProviderError2(error.message, options), error);\n      }\n    };\n    __name(_ProviderError, \"ProviderError\");\n    var ProviderError = _ProviderError;\n    var _CredentialsProviderError = class _CredentialsProviderError2 extends ProviderError {\n      constructor(message, options = true) {\n        super(message, options);\n        this.name = \"CredentialsProviderError\";\n        Object.setPrototypeOf(this, _CredentialsProviderError2.prototype);\n      }\n    };\n    __name(_CredentialsProviderError, \"CredentialsProviderError\");\n    var CredentialsProviderError = _CredentialsProviderError;\n    var _TokenProviderError = class _TokenProviderError2 extends ProviderError {\n      constructor(message, options = true) {\n        super(message, options);\n        this.name = \"TokenProviderError\";\n        Object.setPrototypeOf(this, _TokenProviderError2.prototype);\n      }\n    };\n    __name(_TokenProviderError, \"TokenProviderError\");\n    var TokenProviderError = _TokenProviderError;\n    var chain = /* @__PURE__ */ __name(\n      (...providers) =>\n        async () => {\n          if (providers.length === 0) {\n            throw new ProviderError(\"No providers in chain\");\n          }\n          let lastProviderError;\n          for (const provider of providers) {\n            try {\n              const credentials = await provider();\n              return credentials;\n            } catch (err) {\n              lastProviderError = err;\n              if (err == null ? void 0 : err.tryNextLink) {\n                continue;\n              }\n              throw err;\n            }\n          }\n          throw lastProviderError;\n        },\n      \"chain\"\n    );\n    var fromStatic = /* @__PURE__ */ __name(\n      (staticValue) => () => Promise.resolve(staticValue),\n      \"fromStatic\"\n    );\n    var memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {\n      let resolved;\n      let pending;\n      let hasResult;\n      let isConstant = false;\n      const coalesceProvider = /* @__PURE__ */ __name(async () => {\n        if (!pending) {\n          pending = provider();\n        }\n        try {\n          resolved = await pending;\n          hasResult = true;\n          isConstant = false;\n        } finally {\n          pending = void 0;\n        }\n        return resolved;\n      }, \"coalesceProvider\");\n      if (isExpired === void 0) {\n        return async (options) => {\n          if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {\n            resolved = await coalesceProvider();\n          }\n          return resolved;\n        };\n      }\n      return async (options) => {\n        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {\n          resolved = await coalesceProvider();\n        }\n        if (isConstant) {\n          return resolved;\n        }\n        if (requiresRefresh && !requiresRefresh(resolved)) {\n          isConstant = true;\n          return resolved;\n        }\n        if (isExpired(resolved)) {\n          await coalesceProvider();\n          return resolved;\n        }\n        return resolved;\n      };\n    }, \"memoize\");\n  },\n});\n\n// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\nvar require_getHomeDir = __commonJS({\n  \"node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getHomeDir = void 0;\n    var os_1 = require(\"os\");\n    var path_1 = require(\"path\");\n    var homeDirCache = {};\n    var getHomeDirCacheKey = () => {\n      if (process && process.geteuid) {\n        return `${process.geteuid()}`;\n      }\n      return \"DEFAULT\";\n    };\n    var getHomeDir2 = () => {\n      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;\n      if (HOME) return HOME;\n      if (USERPROFILE) return USERPROFILE;\n      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;\n      const homeDirCacheKey = getHomeDirCacheKey();\n      if (!homeDirCache[homeDirCacheKey]) homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();\n      return homeDirCache[homeDirCacheKey];\n    };\n    exports.getHomeDir = getHomeDir2;\n  },\n});\n\n// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\nvar require_getSSOTokenFilepath = __commonJS({\n  \"node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getSSOTokenFilepath = void 0;\n    var crypto_1 = require(\"crypto\");\n    var path_1 = require(\"path\");\n    var getHomeDir_1 = require_getHomeDir();\n    var getSSOTokenFilepath2 = (id) => {\n      const hasher = (0, crypto_1.createHash)(\"sha1\");\n      const cacheName = hasher.update(id).digest(\"hex\");\n      return (0, path_1.join)(\n        (0, getHomeDir_1.getHomeDir)(),\n        \".aws\",\n        \"sso\",\n        \"cache\",\n        `${cacheName}.json`\n      );\n    };\n    exports.getSSOTokenFilepath = getSSOTokenFilepath2;\n  },\n});\n\n// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js\nvar require_getSSOTokenFromFile = __commonJS({\n  \"node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getSSOTokenFromFile = void 0;\n    var fs_1 = require(\"fs\");\n    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();\n    var { readFile } = fs_1.promises;\n    var getSSOTokenFromFile2 = async (id) => {\n      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);\n      const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n      return JSON.parse(ssoTokenText);\n    };\n    exports.getSSOTokenFromFile = getSSOTokenFromFile2;\n  },\n});\n\n// node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js\nvar require_slurpFile = __commonJS({\n  \"node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.slurpFile = void 0;\n    var fs_1 = require(\"fs\");\n    var { readFile } = fs_1.promises;\n    var filePromisesHash = {};\n    var slurpFile = (path, options) => {\n      if (\n        !filePromisesHash[path] ||\n        (options === null || options === void 0 ? void 0 : options.ignoreCache)\n      ) {\n        filePromisesHash[path] = readFile(path, \"utf8\");\n      }\n      return filePromisesHash[path];\n    };\n    exports.slurpFile = slurpFile;\n  },\n});\n\n// node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js\nvar require_dist_cjs13 = __commonJS({\n  \"node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __reExport = (target, mod, secondTarget) => (\n      __copyProps2(target, mod, \"default\"),\n      secondTarget && __copyProps2(secondTarget, mod, \"default\")\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      CONFIG_PREFIX_SEPARATOR: () => CONFIG_PREFIX_SEPARATOR,\n      DEFAULT_PROFILE: () => DEFAULT_PROFILE,\n      ENV_PROFILE: () => ENV_PROFILE,\n      getProfileName: () => getProfileName,\n      loadSharedConfigFiles: () => loadSharedConfigFiles,\n      loadSsoSessionData: () => loadSsoSessionData,\n      parseKnownFiles: () => parseKnownFiles,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    __reExport(src_exports, require_getHomeDir(), module2.exports);\n    var ENV_PROFILE = \"AWS_PROFILE\";\n    var DEFAULT_PROFILE = \"default\";\n    var getProfileName = /* @__PURE__ */ __name(\n      (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE,\n      \"getProfileName\"\n    );\n    __reExport(src_exports, require_getSSOTokenFilepath(), module2.exports);\n    __reExport(src_exports, require_getSSOTokenFromFile(), module2.exports);\n    var import_types = require_dist_cjs();\n    var getConfigData = /* @__PURE__ */ __name(\n      (data) =>\n        Object.entries(data)\n          .filter(([key]) => {\n            const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);\n            if (indexOfSeparator === -1) {\n              return false;\n            }\n            return Object.values(import_types.IniSectionType).includes(\n              key.substring(0, indexOfSeparator)\n            );\n          })\n          .reduce(\n            (acc, [key, value]) => {\n              const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);\n              const updatedKey =\n                key.substring(0, indexOfSeparator) === import_types.IniSectionType.PROFILE\n                  ? key.substring(indexOfSeparator + 1)\n                  : key;\n              acc[updatedKey] = value;\n              return acc;\n            },\n            {\n              ...(data.default && { default: data.default }),\n            }\n          ),\n      \"getConfigData\"\n    );\n    var import_path = require(\"path\");\n    var import_getHomeDir = require_getHomeDir();\n    var ENV_CONFIG_PATH = \"AWS_CONFIG_FILE\";\n    var getConfigFilepath = /* @__PURE__ */ __name(\n      () =>\n        process.env[ENV_CONFIG_PATH] ||\n        (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), \".aws\", \"config\"),\n      \"getConfigFilepath\"\n    );\n    var import_getHomeDir2 = require_getHomeDir();\n    var ENV_CREDENTIALS_PATH = \"AWS_SHARED_CREDENTIALS_FILE\";\n    var getCredentialsFilepath = /* @__PURE__ */ __name(\n      () =>\n        process.env[ENV_CREDENTIALS_PATH] ||\n        (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), \".aws\", \"credentials\"),\n      \"getCredentialsFilepath\"\n    );\n    var prefixKeyRegex = /^([\\w-]+)\\s([\"'])?([\\w-@+.%:/]+)\\2$/;\n    var profileNameBlockList = [\"__proto__\", \"profile __proto__\"];\n    var parseIni = /* @__PURE__ */ __name((iniData) => {\n      const map = {};\n      let currentSection;\n      let currentSubSection;\n      for (const iniLine of iniData.split(/\\r?\\n/)) {\n        const trimmedLine = iniLine.split(/(^|\\s)[;#]/)[0].trim();\n        const isSection = trimmedLine[0] === \"[\" && trimmedLine[trimmedLine.length - 1] === \"]\";\n        if (isSection) {\n          currentSection = void 0;\n          currentSubSection = void 0;\n          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);\n          const matches = prefixKeyRegex.exec(sectionName);\n          if (matches) {\n            const [, prefix, , name] = matches;\n            if (Object.values(import_types.IniSectionType).includes(prefix)) {\n              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);\n            }\n          } else {\n            currentSection = sectionName;\n          }\n          if (profileNameBlockList.includes(sectionName)) {\n            throw new Error(`Found invalid profile name \"${sectionName}\"`);\n          }\n        } else if (currentSection) {\n          const indexOfEqualsSign = trimmedLine.indexOf(\"=\");\n          if (![0, -1].includes(indexOfEqualsSign)) {\n            const [name, value] = [\n              trimmedLine.substring(0, indexOfEqualsSign).trim(),\n              trimmedLine.substring(indexOfEqualsSign + 1).trim(),\n            ];\n            if (value === \"\") {\n              currentSubSection = name;\n            } else {\n              if (currentSubSection && iniLine.trimStart() === iniLine) {\n                currentSubSection = void 0;\n              }\n              map[currentSection] = map[currentSection] || {};\n              const key = currentSubSection\n                ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR)\n                : name;\n              map[currentSection][key] = value;\n            }\n          }\n        }\n      }\n      return map;\n    }, \"parseIni\");\n    var import_slurpFile = require_slurpFile();\n    var swallowError = /* @__PURE__ */ __name(() => ({}), \"swallowError\");\n    var CONFIG_PREFIX_SEPARATOR = \".\";\n    var loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {}) => {\n      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;\n      const parsedFiles = await Promise.all([\n        (0, import_slurpFile.slurpFile)(configFilepath, {\n          ignoreCache: init.ignoreCache,\n        })\n          .then(parseIni)\n          .then(getConfigData)\n          .catch(swallowError),\n        (0, import_slurpFile.slurpFile)(filepath, {\n          ignoreCache: init.ignoreCache,\n        })\n          .then(parseIni)\n          .catch(swallowError),\n      ]);\n      return {\n        configFile: parsedFiles[0],\n        credentialsFile: parsedFiles[1],\n      };\n    }, \"loadSharedConfigFiles\");\n    var getSsoSessionData = /* @__PURE__ */ __name(\n      (data) =>\n        Object.entries(data)\n          .filter(([key]) =>\n            key.startsWith(import_types.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)\n          )\n          .reduce(\n            (acc, [key, value]) => ({\n              ...acc,\n              [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value,\n            }),\n            {}\n          ),\n      \"getSsoSessionData\"\n    );\n    var import_slurpFile2 = require_slurpFile();\n    var swallowError2 = /* @__PURE__ */ __name(() => ({}), \"swallowError\");\n    var loadSsoSessionData = /* @__PURE__ */ __name(\n      async (init = {}) =>\n        (0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath())\n          .then(parseIni)\n          .then(getSsoSessionData)\n          .catch(swallowError2),\n      \"loadSsoSessionData\"\n    );\n    var mergeConfigFiles = /* @__PURE__ */ __name((...files) => {\n      const merged = {};\n      for (const file of files) {\n        for (const [key, values] of Object.entries(file)) {\n          if (merged[key] !== void 0) {\n            Object.assign(merged[key], values);\n          } else {\n            merged[key] = values;\n          }\n        }\n      }\n      return merged;\n    }, \"mergeConfigFiles\");\n    var parseKnownFiles = /* @__PURE__ */ __name(async (init) => {\n      const parsedFiles = await loadSharedConfigFiles(init);\n      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);\n    }, \"parseKnownFiles\");\n  },\n});\n\n// node_modules/@smithy/node-config-provider/dist-cjs/index.js\nvar require_dist_cjs14 = __commonJS({\n  \"node_modules/@smithy/node-config-provider/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      loadConfig: () => loadConfig,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_property_provider = require_dist_cjs12();\n    function getSelectorName(functionString) {\n      try {\n        const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));\n        constants.delete(\"CONFIG\");\n        constants.delete(\"CONFIG_PREFIX_SEPARATOR\");\n        constants.delete(\"ENV\");\n        return [...constants].join(\", \");\n      } catch (e) {\n        return functionString;\n      }\n    }\n    __name(getSelectorName, \"getSelectorName\");\n    var fromEnv = /* @__PURE__ */ __name(\n      (envVarSelector, logger) => async () => {\n        try {\n          const config = envVarSelector(process.env);\n          if (config === void 0) {\n            throw new Error();\n          }\n          return config;\n        } catch (e) {\n          throw new import_property_provider.CredentialsProviderError(\n            e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`,\n            { logger }\n          );\n        }\n      },\n      \"fromEnv\"\n    );\n    var import_shared_ini_file_loader = require_dist_cjs13();\n    var fromSharedConfigFiles = /* @__PURE__ */ __name(\n      (configSelector, { preferredFile = \"config\", ...init } = {}) =>\n        async () => {\n          const profile = (0, import_shared_ini_file_loader.getProfileName)(init);\n          const { configFile, credentialsFile } = await (0,\n          import_shared_ini_file_loader.loadSharedConfigFiles)(init);\n          const profileFromCredentials = credentialsFile[profile] || {};\n          const profileFromConfig = configFile[profile] || {};\n          const mergedProfile =\n            preferredFile === \"config\"\n              ? { ...profileFromCredentials, ...profileFromConfig }\n              : { ...profileFromConfig, ...profileFromCredentials };\n          try {\n            const cfgFile = preferredFile === \"config\" ? configFile : credentialsFile;\n            const configValue = configSelector(mergedProfile, cfgFile);\n            if (configValue === void 0) {\n              throw new Error();\n            }\n            return configValue;\n          } catch (e) {\n            throw new import_property_provider.CredentialsProviderError(\n              e.message ||\n                `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`,\n              { logger: init.logger }\n            );\n          }\n        },\n      \"fromSharedConfigFiles\"\n    );\n    var isFunction = /* @__PURE__ */ __name((func) => typeof func === \"function\", \"isFunction\");\n    var fromStatic = /* @__PURE__ */ __name(\n      (defaultValue) =>\n        isFunction(defaultValue)\n          ? async () => await defaultValue()\n          : (0, import_property_provider.fromStatic)(defaultValue),\n      \"fromStatic\"\n    );\n    var loadConfig = /* @__PURE__ */ __name(\n      (\n        { environmentVariableSelector, configFileSelector, default: defaultValue },\n        configuration = {}\n      ) =>\n        (0, import_property_provider.memoize)(\n          (0, import_property_provider.chain)(\n            fromEnv(environmentVariableSelector),\n            fromSharedConfigFiles(configFileSelector, configuration),\n            fromStatic(defaultValue)\n          )\n        ),\n      \"loadConfig\"\n    );\n  },\n});\n\n// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js\nvar require_getEndpointUrlConfig = __commonJS({\n  \"node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getEndpointUrlConfig = void 0;\n    var shared_ini_file_loader_1 = require_dist_cjs13();\n    var ENV_ENDPOINT_URL = \"AWS_ENDPOINT_URL\";\n    var CONFIG_ENDPOINT_URL = \"endpoint_url\";\n    var getEndpointUrlConfig = (serviceId) => ({\n      environmentVariableSelector: (env) => {\n        const serviceSuffixParts = serviceId.split(\" \").map((w) => w.toUpperCase());\n        const serviceEndpointUrl = env[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join(\"_\")];\n        if (serviceEndpointUrl) return serviceEndpointUrl;\n        const endpointUrl = env[ENV_ENDPOINT_URL];\n        if (endpointUrl) return endpointUrl;\n        return void 0;\n      },\n      configFileSelector: (profile, config) => {\n        if (config && profile.services) {\n          const servicesSection =\n            config[\n              [\"services\", profile.services].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)\n            ];\n          if (servicesSection) {\n            const servicePrefixParts = serviceId.split(\" \").map((w) => w.toLowerCase());\n            const endpointUrl2 =\n              servicesSection[\n                [servicePrefixParts.join(\"_\"), CONFIG_ENDPOINT_URL].join(\n                  shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR\n                )\n              ];\n            if (endpointUrl2) return endpointUrl2;\n          }\n        }\n        const endpointUrl = profile[CONFIG_ENDPOINT_URL];\n        if (endpointUrl) return endpointUrl;\n        return void 0;\n      },\n      default: void 0,\n    });\n    exports.getEndpointUrlConfig = getEndpointUrlConfig;\n  },\n});\n\n// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js\nvar require_getEndpointFromConfig = __commonJS({\n  \"node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getEndpointFromConfig = void 0;\n    var node_config_provider_1 = require_dist_cjs14();\n    var getEndpointUrlConfig_1 = require_getEndpointUrlConfig();\n    var getEndpointFromConfig = async (serviceId) =>\n      (0, node_config_provider_1.loadConfig)(\n        (0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId)\n      )();\n    exports.getEndpointFromConfig = getEndpointFromConfig;\n  },\n});\n\n// node_modules/@smithy/querystring-parser/dist-cjs/index.js\nvar require_dist_cjs15 = __commonJS({\n  \"node_modules/@smithy/querystring-parser/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      parseQueryString: () => parseQueryString,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    function parseQueryString(querystring) {\n      const query = {};\n      querystring = querystring.replace(/^\\?/, \"\");\n      if (querystring) {\n        for (const pair of querystring.split(\"&\")) {\n          let [key, value = null] = pair.split(\"=\");\n          key = decodeURIComponent(key);\n          if (value) {\n            value = decodeURIComponent(value);\n          }\n          if (!(key in query)) {\n            query[key] = value;\n          } else if (Array.isArray(query[key])) {\n            query[key].push(value);\n          } else {\n            query[key] = [query[key], value];\n          }\n        }\n      }\n      return query;\n    }\n    __name(parseQueryString, \"parseQueryString\");\n  },\n});\n\n// node_modules/@smithy/url-parser/dist-cjs/index.js\nvar require_dist_cjs16 = __commonJS({\n  \"node_modules/@smithy/url-parser/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      parseUrl: () => parseUrl,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_querystring_parser = require_dist_cjs15();\n    var parseUrl = /* @__PURE__ */ __name((url) => {\n      if (typeof url === \"string\") {\n        return parseUrl(new URL(url));\n      }\n      const { hostname, pathname, port, protocol, search } = url;\n      let query;\n      if (search) {\n        query = (0, import_querystring_parser.parseQueryString)(search);\n      }\n      return {\n        hostname,\n        port: port ? parseInt(port) : void 0,\n        protocol,\n        path: pathname,\n        query,\n      };\n    }, \"parseUrl\");\n  },\n});\n\n// node_modules/@smithy/middleware-serde/dist-cjs/index.js\nvar require_dist_cjs17 = __commonJS({\n  \"node_modules/@smithy/middleware-serde/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      deserializerMiddleware: () => deserializerMiddleware,\n      deserializerMiddlewareOption: () => deserializerMiddlewareOption,\n      getSerdePlugin: () => getSerdePlugin,\n      serializerMiddleware: () => serializerMiddleware,\n      serializerMiddlewareOption: () => serializerMiddlewareOption,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var deserializerMiddleware = /* @__PURE__ */ __name(\n      (options, deserializer) => (next) => async (args) => {\n        const { response } = await next(args);\n        try {\n          const parsed = await deserializer(response, options);\n          return {\n            response,\n            output: parsed,\n          };\n        } catch (error) {\n          Object.defineProperty(error, \"$response\", {\n            value: response,\n          });\n          if (!(\"$metadata\" in error)) {\n            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;\n            error.message += \"\\n  \" + hint;\n            if (typeof error.$responseBodyText !== \"undefined\") {\n              if (error.$response) {\n                error.$response.body = error.$responseBodyText;\n              }\n            }\n          }\n          throw error;\n        }\n      },\n      \"deserializerMiddleware\"\n    );\n    var serializerMiddleware = /* @__PURE__ */ __name(\n      (options, serializer) => (next, context) => async (args) => {\n        var _a;\n        const endpoint =\n          ((_a = context.endpointV2) == null ? void 0 : _a.url) && options.urlParser\n            ? async () => options.urlParser(context.endpointV2.url)\n            : options.endpoint;\n        if (!endpoint) {\n          throw new Error(\"No valid endpoint provider available.\");\n        }\n        const request = await serializer(args.input, { ...options, endpoint });\n        return next({\n          ...args,\n          request,\n        });\n      },\n      \"serializerMiddleware\"\n    );\n    var deserializerMiddlewareOption = {\n      name: \"deserializerMiddleware\",\n      step: \"deserialize\",\n      tags: [\"DESERIALIZER\"],\n      override: true,\n    };\n    var serializerMiddlewareOption = {\n      name: \"serializerMiddleware\",\n      step: \"serialize\",\n      tags: [\"SERIALIZER\"],\n      override: true,\n    };\n    function getSerdePlugin(config, serializer, deserializer) {\n      return {\n        applyToStack: (commandStack) => {\n          commandStack.add(\n            deserializerMiddleware(config, deserializer),\n            deserializerMiddlewareOption\n          );\n          commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);\n        },\n      };\n    }\n    __name(getSerdePlugin, \"getSerdePlugin\");\n  },\n});\n\n// node_modules/@smithy/middleware-endpoint/dist-cjs/index.js\nvar require_dist_cjs18 = __commonJS({\n  \"node_modules/@smithy/middleware-endpoint/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      endpointMiddleware: () => endpointMiddleware,\n      endpointMiddlewareOptions: () => endpointMiddlewareOptions,\n      getEndpointFromInstructions: () => getEndpointFromInstructions,\n      getEndpointPlugin: () => getEndpointPlugin,\n      resolveEndpointConfig: () => resolveEndpointConfig,\n      resolveParams: () => resolveParams,\n      toEndpointV1: () => toEndpointV1,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams) => {\n      const bucket = (endpointParams == null ? void 0 : endpointParams.Bucket) || \"\";\n      if (typeof endpointParams.Bucket === \"string\") {\n        endpointParams.Bucket = bucket\n          .replace(/#/g, encodeURIComponent(\"#\"))\n          .replace(/\\?/g, encodeURIComponent(\"?\"));\n      }\n      if (isArnBucketName(bucket)) {\n        if (endpointParams.ForcePathStyle === true) {\n          throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n        }\n      } else if (\n        !isDnsCompatibleBucketName(bucket) ||\n        (bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\")) ||\n        bucket.toLowerCase() !== bucket ||\n        bucket.length < 3\n      ) {\n        endpointParams.ForcePathStyle = true;\n      }\n      if (endpointParams.DisableMultiRegionAccessPoints) {\n        endpointParams.disableMultiRegionAccessPoints = true;\n        endpointParams.DisableMRAP = true;\n      }\n      return endpointParams;\n    }, \"resolveParamsForS3\");\n    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$/;\n    var IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\n    var DOTS_PATTERN = /\\.\\./;\n    var isDnsCompatibleBucketName = /* @__PURE__ */ __name(\n      (bucketName) =>\n        DOMAIN_PATTERN.test(bucketName) &&\n        !IP_ADDRESS_PATTERN.test(bucketName) &&\n        !DOTS_PATTERN.test(bucketName),\n      \"isDnsCompatibleBucketName\"\n    );\n    var isArnBucketName = /* @__PURE__ */ __name((bucketName) => {\n      const [arn, partition, service, , , bucket] = bucketName.split(\":\");\n      const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n      const isValidArn = Boolean(isArn && partition && service && bucket);\n      if (isArn && !isValidArn) {\n        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n      }\n      return isValidArn;\n    }, \"isArnBucketName\");\n    var createConfigValueProvider = /* @__PURE__ */ __name(\n      (configKey, canonicalEndpointParamKey, config) => {\n        const configProvider = /* @__PURE__ */ __name(async () => {\n          const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n          if (typeof configValue === \"function\") {\n            return configValue();\n          }\n          return configValue;\n        }, \"configProvider\");\n        if (configKey === \"credentialScope\" || canonicalEndpointParamKey === \"CredentialScope\") {\n          return async () => {\n            const credentials =\n              typeof config.credentials === \"function\"\n                ? await config.credentials()\n                : config.credentials;\n            const configValue =\n              (credentials == null ? void 0 : credentials.credentialScope) ??\n              (credentials == null ? void 0 : credentials.CredentialScope);\n            return configValue;\n          };\n        }\n        if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n          return async () => {\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n              if (\"url\" in endpoint) {\n                return endpoint.url.href;\n              }\n              if (\"hostname\" in endpoint) {\n                const { protocol, hostname, port, path } = endpoint;\n                return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n              }\n            }\n            return endpoint;\n          };\n        }\n        return configProvider;\n      },\n      \"createConfigValueProvider\"\n    );\n    var import_getEndpointFromConfig = require_getEndpointFromConfig();\n    var import_url_parser = require_dist_cjs16();\n    var toEndpointV1 = /* @__PURE__ */ __name((endpoint) => {\n      if (typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n          return (0, import_url_parser.parseUrl)(endpoint.url);\n        }\n        return endpoint;\n      }\n      return (0, import_url_parser.parseUrl)(endpoint);\n    }, \"toEndpointV1\");\n    var getEndpointFromInstructions = /* @__PURE__ */ __name(\n      async (commandInput, instructionsSupplier, clientConfig, context) => {\n        if (!clientConfig.endpoint) {\n          const endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(\n            clientConfig.serviceId || \"\"\n          );\n          if (endpointFromConfig) {\n            clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));\n          }\n        }\n        const endpointParams = await resolveParams(\n          commandInput,\n          instructionsSupplier,\n          clientConfig\n        );\n        if (typeof clientConfig.endpointProvider !== \"function\") {\n          throw new Error(\"config.endpointProvider is not set.\");\n        }\n        const endpoint = clientConfig.endpointProvider(endpointParams, context);\n        return endpoint;\n      },\n      \"getEndpointFromInstructions\"\n    );\n    var resolveParams = /* @__PURE__ */ __name(\n      async (commandInput, instructionsSupplier, clientConfig) => {\n        var _a;\n        const endpointParams = {};\n        const instructions =\n          ((_a =\n            instructionsSupplier == null\n              ? void 0\n              : instructionsSupplier.getEndpointParameterInstructions) == null\n            ? void 0\n            : _a.call(instructionsSupplier)) || {};\n        for (const [name, instruction] of Object.entries(instructions)) {\n          switch (instruction.type) {\n            case \"staticContextParams\":\n              endpointParams[name] = instruction.value;\n              break;\n            case \"contextParams\":\n              endpointParams[name] = commandInput[instruction.name];\n              break;\n            case \"clientContextParams\":\n            case \"builtInParams\":\n              endpointParams[name] = await createConfigValueProvider(\n                instruction.name,\n                name,\n                clientConfig\n              )();\n              break;\n            default:\n              throw new Error(\n                \"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction)\n              );\n          }\n        }\n        if (Object.keys(instructions).length === 0) {\n          Object.assign(endpointParams, clientConfig);\n        }\n        if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n          await resolveParamsForS3(endpointParams);\n        }\n        return endpointParams;\n      },\n      \"resolveParams\"\n    );\n    var import_util_middleware = require_dist_cjs10();\n    var endpointMiddleware = /* @__PURE__ */ __name(({ config, instructions }) => {\n      return (next, context) => async (args) => {\n        var _a, _b, _c;\n        const endpoint = await getEndpointFromInstructions(\n          args.input,\n          {\n            getEndpointParameterInstructions() {\n              return instructions;\n            },\n          },\n          { ...config },\n          context\n        );\n        context.endpointV2 = endpoint;\n        context.authSchemes = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes;\n        const authScheme = (_b = context.authSchemes) == null ? void 0 : _b[0];\n        if (authScheme) {\n          context[\"signing_region\"] = authScheme.signingRegion;\n          context[\"signing_service\"] = authScheme.signingName;\n          const smithyContext = (0, import_util_middleware.getSmithyContext)(context);\n          const httpAuthOption =\n            (_c = smithyContext == null ? void 0 : smithyContext.selectedHttpAuthScheme) == null\n              ? void 0\n              : _c.httpAuthOption;\n          if (httpAuthOption) {\n            httpAuthOption.signingProperties = Object.assign(\n              httpAuthOption.signingProperties || {},\n              {\n                signing_region: authScheme.signingRegion,\n                signingRegion: authScheme.signingRegion,\n                signing_service: authScheme.signingName,\n                signingName: authScheme.signingName,\n                signingRegionSet: authScheme.signingRegionSet,\n              },\n              authScheme.properties\n            );\n          }\n        }\n        return next({\n          ...args,\n        });\n      };\n    }, \"endpointMiddleware\");\n    var import_middleware_serde = require_dist_cjs17();\n    var endpointMiddlewareOptions = {\n      step: \"serialize\",\n      tags: [\"ENDPOINT_PARAMETERS\", \"ENDPOINT_V2\", \"ENDPOINT\"],\n      name: \"endpointV2Middleware\",\n      override: true,\n      relation: \"before\",\n      toMiddleware: import_middleware_serde.serializerMiddlewareOption.name,\n    };\n    var getEndpointPlugin = /* @__PURE__ */ __name(\n      (config, instructions) => ({\n        applyToStack: (clientStack) => {\n          clientStack.addRelativeTo(\n            endpointMiddleware({\n              config,\n              instructions,\n            }),\n            endpointMiddlewareOptions\n          );\n        },\n      }),\n      \"getEndpointPlugin\"\n    );\n    var resolveEndpointConfig = /* @__PURE__ */ __name((input) => {\n      const tls = input.tls ?? true;\n      const { endpoint } = input;\n      const customEndpointProvider =\n        endpoint != null\n          ? async () =>\n              toEndpointV1(await (0, import_util_middleware.normalizeProvider)(endpoint)())\n          : void 0;\n      const isCustomEndpoint = !!endpoint;\n      return {\n        ...input,\n        endpoint: customEndpointProvider,\n        tls,\n        isCustomEndpoint,\n        useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(\n          input.useDualstackEndpoint ?? false\n        ),\n        useFipsEndpoint: (0, import_util_middleware.normalizeProvider)(\n          input.useFipsEndpoint ?? false\n        ),\n      };\n    }, \"resolveEndpointConfig\");\n  },\n});\n\n// node_modules/uuid/dist/rng.js\nvar require_rng = __commonJS({\n  \"node_modules/uuid/dist/rng.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = rng;\n    var _crypto = _interopRequireDefault(require(\"crypto\"));\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    var rnds8Pool = new Uint8Array(256);\n    var poolPtr = rnds8Pool.length;\n    function rng() {\n      if (poolPtr > rnds8Pool.length - 16) {\n        _crypto.default.randomFillSync(rnds8Pool);\n        poolPtr = 0;\n      }\n      return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n    }\n  },\n});\n\n// node_modules/uuid/dist/regex.js\nvar require_regex = __commonJS({\n  \"node_modules/uuid/dist/regex.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _default =\n      /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/validate.js\nvar require_validate = __commonJS({\n  \"node_modules/uuid/dist/validate.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _regex = _interopRequireDefault(require_regex());\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    function validate(uuid) {\n      return typeof uuid === \"string\" && _regex.default.test(uuid);\n    }\n    var _default = validate;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/stringify.js\nvar require_stringify = __commonJS({\n  \"node_modules/uuid/dist/stringify.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    exports.unsafeStringify = unsafeStringify;\n    var _validate = _interopRequireDefault(require_validate());\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    var byteToHex = [];\n    for (let i = 0; i < 256; ++i) {\n      byteToHex.push((i + 256).toString(16).slice(1));\n    }\n    function unsafeStringify(arr, offset = 0) {\n      return (\n        byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        \"-\" +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        \"-\" +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        \"-\" +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        \"-\" +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]\n      );\n    }\n    function stringify(arr, offset = 0) {\n      const uuid = unsafeStringify(arr, offset);\n      if (!(0, _validate.default)(uuid)) {\n        throw TypeError(\"Stringified UUID is invalid\");\n      }\n      return uuid;\n    }\n    var _default = stringify;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/v1.js\nvar require_v1 = __commonJS({\n  \"node_modules/uuid/dist/v1.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _rng = _interopRequireDefault(require_rng());\n    var _stringify = require_stringify();\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    var _nodeId;\n    var _clockseq;\n    var _lastMSecs = 0;\n    var _lastNSecs = 0;\n    function v1(options, buf, offset) {\n      let i = (buf && offset) || 0;\n      const b = buf || new Array(16);\n      options = options || {};\n      let node = options.node || _nodeId;\n      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;\n      if (node == null || clockseq == null) {\n        const seedBytes = options.random || (options.rng || _rng.default)();\n        if (node == null) {\n          node = _nodeId = [\n            seedBytes[0] | 1,\n            seedBytes[1],\n            seedBytes[2],\n            seedBytes[3],\n            seedBytes[4],\n            seedBytes[5],\n          ];\n        }\n        if (clockseq == null) {\n          clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 16383;\n        }\n      }\n      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();\n      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;\n      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;\n      if (dt < 0 && options.clockseq === void 0) {\n        clockseq = (clockseq + 1) & 16383;\n      }\n      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {\n        nsecs = 0;\n      }\n      if (nsecs >= 1e4) {\n        throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n      }\n      _lastMSecs = msecs;\n      _lastNSecs = nsecs;\n      _clockseq = clockseq;\n      msecs += 122192928e5;\n      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;\n      b[i++] = (tl >>> 24) & 255;\n      b[i++] = (tl >>> 16) & 255;\n      b[i++] = (tl >>> 8) & 255;\n      b[i++] = tl & 255;\n      const tmh = ((msecs / 4294967296) * 1e4) & 268435455;\n      b[i++] = (tmh >>> 8) & 255;\n      b[i++] = tmh & 255;\n      b[i++] = ((tmh >>> 24) & 15) | 16;\n      b[i++] = (tmh >>> 16) & 255;\n      b[i++] = (clockseq >>> 8) | 128;\n      b[i++] = clockseq & 255;\n      for (let n = 0; n < 6; ++n) {\n        b[i + n] = node[n];\n      }\n      return buf || (0, _stringify.unsafeStringify)(b);\n    }\n    var _default = v1;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/parse.js\nvar require_parse = __commonJS({\n  \"node_modules/uuid/dist/parse.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _validate = _interopRequireDefault(require_validate());\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    function parse(uuid) {\n      if (!(0, _validate.default)(uuid)) {\n        throw TypeError(\"Invalid UUID\");\n      }\n      let v;\n      const arr = new Uint8Array(16);\n      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n      arr[1] = (v >>> 16) & 255;\n      arr[2] = (v >>> 8) & 255;\n      arr[3] = v & 255;\n      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n      arr[5] = v & 255;\n      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n      arr[7] = v & 255;\n      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n      arr[9] = v & 255;\n      arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776) & 255;\n      arr[11] = (v / 4294967296) & 255;\n      arr[12] = (v >>> 24) & 255;\n      arr[13] = (v >>> 16) & 255;\n      arr[14] = (v >>> 8) & 255;\n      arr[15] = v & 255;\n      return arr;\n    }\n    var _default = parse;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/v35.js\nvar require_v35 = __commonJS({\n  \"node_modules/uuid/dist/v35.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.URL = exports.DNS = void 0;\n    exports.default = v35;\n    var _stringify = require_stringify();\n    var _parse = _interopRequireDefault(require_parse());\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    function stringToBytes(str) {\n      str = unescape(encodeURIComponent(str));\n      const bytes = [];\n      for (let i = 0; i < str.length; ++i) {\n        bytes.push(str.charCodeAt(i));\n      }\n      return bytes;\n    }\n    var DNS = \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\";\n    exports.DNS = DNS;\n    var URL2 = \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\";\n    exports.URL = URL2;\n    function v35(name, version, hashfunc) {\n      function generateUUID(value, namespace, buf, offset) {\n        var _namespace;\n        if (typeof value === \"string\") {\n          value = stringToBytes(value);\n        }\n        if (typeof namespace === \"string\") {\n          namespace = (0, _parse.default)(namespace);\n        }\n        if (\n          ((_namespace = namespace) === null || _namespace === void 0\n            ? void 0\n            : _namespace.length) !== 16\n        ) {\n          throw TypeError(\"Namespace must be array-like (16 iterable integer values, 0-255)\");\n        }\n        let bytes = new Uint8Array(16 + value.length);\n        bytes.set(namespace);\n        bytes.set(value, namespace.length);\n        bytes = hashfunc(bytes);\n        bytes[6] = (bytes[6] & 15) | version;\n        bytes[8] = (bytes[8] & 63) | 128;\n        if (buf) {\n          offset = offset || 0;\n          for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = bytes[i];\n          }\n          return buf;\n        }\n        return (0, _stringify.unsafeStringify)(bytes);\n      }\n      try {\n        generateUUID.name = name;\n      } catch (err) {}\n      generateUUID.DNS = DNS;\n      generateUUID.URL = URL2;\n      return generateUUID;\n    }\n  },\n});\n\n// node_modules/uuid/dist/md5.js\nvar require_md5 = __commonJS({\n  \"node_modules/uuid/dist/md5.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _crypto = _interopRequireDefault(require(\"crypto\"));\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    function md5(bytes) {\n      if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n      } else if (typeof bytes === \"string\") {\n        bytes = Buffer.from(bytes, \"utf8\");\n      }\n      return _crypto.default.createHash(\"md5\").update(bytes).digest();\n    }\n    var _default = md5;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/v3.js\nvar require_v3 = __commonJS({\n  \"node_modules/uuid/dist/v3.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _v = _interopRequireDefault(require_v35());\n    var _md = _interopRequireDefault(require_md5());\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    var v3 = (0, _v.default)(\"v3\", 48, _md.default);\n    var _default = v3;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/native.js\nvar require_native = __commonJS({\n  \"node_modules/uuid/dist/native.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _crypto = _interopRequireDefault(require(\"crypto\"));\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    var _default = {\n      randomUUID: _crypto.default.randomUUID,\n    };\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/v4.js\nvar require_v4 = __commonJS({\n  \"node_modules/uuid/dist/v4.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _native = _interopRequireDefault(require_native());\n    var _rng = _interopRequireDefault(require_rng());\n    var _stringify = require_stringify();\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    function v4(options, buf, offset) {\n      if (_native.default.randomUUID && !buf && !options) {\n        return _native.default.randomUUID();\n      }\n      options = options || {};\n      const rnds = options.random || (options.rng || _rng.default)();\n      rnds[6] = (rnds[6] & 15) | 64;\n      rnds[8] = (rnds[8] & 63) | 128;\n      if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n          buf[offset + i] = rnds[i];\n        }\n        return buf;\n      }\n      return (0, _stringify.unsafeStringify)(rnds);\n    }\n    var _default = v4;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/sha1.js\nvar require_sha1 = __commonJS({\n  \"node_modules/uuid/dist/sha1.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _crypto = _interopRequireDefault(require(\"crypto\"));\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    function sha1(bytes) {\n      if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n      } else if (typeof bytes === \"string\") {\n        bytes = Buffer.from(bytes, \"utf8\");\n      }\n      return _crypto.default.createHash(\"sha1\").update(bytes).digest();\n    }\n    var _default = sha1;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/v5.js\nvar require_v5 = __commonJS({\n  \"node_modules/uuid/dist/v5.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _v = _interopRequireDefault(require_v35());\n    var _sha = _interopRequireDefault(require_sha1());\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    var v5 = (0, _v.default)(\"v5\", 80, _sha.default);\n    var _default = v5;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/nil.js\nvar require_nil = __commonJS({\n  \"node_modules/uuid/dist/nil.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _default = \"00000000-0000-0000-0000-000000000000\";\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/version.js\nvar require_version = __commonJS({\n  \"node_modules/uuid/dist/version.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    exports.default = void 0;\n    var _validate = _interopRequireDefault(require_validate());\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n    function version(uuid) {\n      if (!(0, _validate.default)(uuid)) {\n        throw TypeError(\"Invalid UUID\");\n      }\n      return parseInt(uuid.slice(14, 15), 16);\n    }\n    var _default = version;\n    exports.default = _default;\n  },\n});\n\n// node_modules/uuid/dist/index.js\nvar require_dist = __commonJS({\n  \"node_modules/uuid/dist/index.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true,\n    });\n    Object.defineProperty(exports, \"NIL\", {\n      enumerable: true,\n      get: () => _nil.default,\n    });\n    Object.defineProperty(exports, \"parse\", {\n      enumerable: true,\n      get: () => _parse.default,\n    });\n    Object.defineProperty(exports, \"stringify\", {\n      enumerable: true,\n      get: () => _stringify.default,\n    });\n    Object.defineProperty(exports, \"v1\", {\n      enumerable: true,\n      get: () => _v.default,\n    });\n    Object.defineProperty(exports, \"v3\", {\n      enumerable: true,\n      get: () => _v2.default,\n    });\n    Object.defineProperty(exports, \"v4\", {\n      enumerable: true,\n      get: () => _v3.default,\n    });\n    Object.defineProperty(exports, \"v5\", {\n      enumerable: true,\n      get: () => _v4.default,\n    });\n    Object.defineProperty(exports, \"validate\", {\n      enumerable: true,\n      get: () => _validate.default,\n    });\n    Object.defineProperty(exports, \"version\", {\n      enumerable: true,\n      get: () => _version.default,\n    });\n    var _v = _interopRequireDefault(require_v1());\n    var _v2 = _interopRequireDefault(require_v3());\n    var _v3 = _interopRequireDefault(require_v4());\n    var _v4 = _interopRequireDefault(require_v5());\n    var _nil = _interopRequireDefault(require_nil());\n    var _version = _interopRequireDefault(require_version());\n    var _validate = _interopRequireDefault(require_validate());\n    var _stringify = _interopRequireDefault(require_stringify());\n    var _parse = _interopRequireDefault(require_parse());\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n  },\n});\n\n// node_modules/@smithy/service-error-classification/dist-cjs/index.js\nvar require_dist_cjs19 = __commonJS({\n  \"node_modules/@smithy/service-error-classification/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      isClockSkewCorrectedError: () => isClockSkewCorrectedError,\n      isClockSkewError: () => isClockSkewError,\n      isRetryableByTrait: () => isRetryableByTrait,\n      isServerError: () => isServerError,\n      isThrottlingError: () => isThrottlingError,\n      isTransientError: () => isTransientError,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var CLOCK_SKEW_ERROR_CODES = [\n      \"AuthFailure\",\n      \"InvalidSignatureException\",\n      \"RequestExpired\",\n      \"RequestInTheFuture\",\n      \"RequestTimeTooSkewed\",\n      \"SignatureDoesNotMatch\",\n    ];\n    var THROTTLING_ERROR_CODES = [\n      \"BandwidthLimitExceeded\",\n      \"EC2ThrottledException\",\n      \"LimitExceededException\",\n      \"PriorRequestNotComplete\",\n      \"ProvisionedThroughputExceededException\",\n      \"RequestLimitExceeded\",\n      \"RequestThrottled\",\n      \"RequestThrottledException\",\n      \"SlowDown\",\n      \"ThrottledException\",\n      \"Throttling\",\n      \"ThrottlingException\",\n      \"TooManyRequestsException\",\n      \"TransactionInProgressException\",\n    ];\n    var TRANSIENT_ERROR_CODES = [\"TimeoutError\", \"RequestTimeout\", \"RequestTimeoutException\"];\n    var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];\n    var NODEJS_TIMEOUT_ERROR_CODES = [\"ECONNRESET\", \"ECONNREFUSED\", \"EPIPE\", \"ETIMEDOUT\"];\n    var isRetryableByTrait = /* @__PURE__ */ __name(\n      (error) => error.$retryable !== void 0,\n      \"isRetryableByTrait\"\n    );\n    var isClockSkewError = /* @__PURE__ */ __name(\n      (error) => CLOCK_SKEW_ERROR_CODES.includes(error.name),\n      \"isClockSkewError\"\n    );\n    var isClockSkewCorrectedError = /* @__PURE__ */ __name((error) => {\n      var _a;\n      return (_a = error.$metadata) == null ? void 0 : _a.clockSkewCorrected;\n    }, \"isClockSkewCorrectedError\");\n    var isThrottlingError = /* @__PURE__ */ __name((error) => {\n      var _a, _b;\n      return (\n        ((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) === 429 ||\n        THROTTLING_ERROR_CODES.includes(error.name) ||\n        ((_b = error.$retryable) == null ? void 0 : _b.throttling) == true\n      );\n    }, \"isThrottlingError\");\n    var isTransientError = /* @__PURE__ */ __name((error) => {\n      var _a;\n      return (\n        isClockSkewCorrectedError(error) ||\n        TRANSIENT_ERROR_CODES.includes(error.name) ||\n        NODEJS_TIMEOUT_ERROR_CODES.includes((error == null ? void 0 : error.code) || \"\") ||\n        TRANSIENT_ERROR_STATUS_CODES.includes(\n          ((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) || 0\n        )\n      );\n    }, \"isTransientError\");\n    var isServerError = /* @__PURE__ */ __name((error) => {\n      var _a;\n      if (((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) !== void 0) {\n        const statusCode = error.$metadata.httpStatusCode;\n        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    }, \"isServerError\");\n  },\n});\n\n// node_modules/@smithy/util-retry/dist-cjs/index.js\nvar require_dist_cjs20 = __commonJS({\n  \"node_modules/@smithy/util-retry/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,\n      ConfiguredRetryStrategy: () => ConfiguredRetryStrategy,\n      DEFAULT_MAX_ATTEMPTS: () => DEFAULT_MAX_ATTEMPTS,\n      DEFAULT_RETRY_DELAY_BASE: () => DEFAULT_RETRY_DELAY_BASE,\n      DEFAULT_RETRY_MODE: () => DEFAULT_RETRY_MODE,\n      DefaultRateLimiter: () => DefaultRateLimiter,\n      INITIAL_RETRY_TOKENS: () => INITIAL_RETRY_TOKENS,\n      INVOCATION_ID_HEADER: () => INVOCATION_ID_HEADER,\n      MAXIMUM_RETRY_DELAY: () => MAXIMUM_RETRY_DELAY,\n      NO_RETRY_INCREMENT: () => NO_RETRY_INCREMENT,\n      REQUEST_HEADER: () => REQUEST_HEADER,\n      RETRY_COST: () => RETRY_COST,\n      RETRY_MODES: () => RETRY_MODES,\n      StandardRetryStrategy: () => StandardRetryStrategy,\n      THROTTLING_RETRY_DELAY_BASE: () => THROTTLING_RETRY_DELAY_BASE,\n      TIMEOUT_RETRY_COST: () => TIMEOUT_RETRY_COST,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var RETRY_MODES = /* @__PURE__ */ ((RETRY_MODES2) => {\n      RETRY_MODES2[\"STANDARD\"] = \"standard\";\n      RETRY_MODES2[\"ADAPTIVE\"] = \"adaptive\";\n      return RETRY_MODES2;\n    })(RETRY_MODES || {});\n    var DEFAULT_MAX_ATTEMPTS = 3;\n    var DEFAULT_RETRY_MODE = \"standard\";\n    var import_service_error_classification = require_dist_cjs19();\n    var _DefaultRateLimiter = class _DefaultRateLimiter {\n      constructor(options) {\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = (options == null ? void 0 : options.beta) ?? 0.7;\n        this.minCapacity = (options == null ? void 0 : options.minCapacity) ?? 1;\n        this.minFillRate = (options == null ? void 0 : options.minFillRate) ?? 0.5;\n        this.scaleConstant = (options == null ? void 0 : options.scaleConstant) ?? 0.4;\n        this.smooth = (options == null ? void 0 : options.smooth) ?? 0.8;\n        const currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n      }\n      getCurrentTimeInSeconds() {\n        return Date.now() / 1e3;\n      }\n      async getSendToken() {\n        return this.acquireTokenBucket(1);\n      }\n      async acquireTokenBucket(amount) {\n        if (!this.enabled) {\n          return;\n        }\n        this.refillTokenBucket();\n        if (amount > this.currentCapacity) {\n          const delay = ((amount - this.currentCapacity) / this.fillRate) * 1e3;\n          await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n        this.currentCapacity = this.currentCapacity - amount;\n      }\n      refillTokenBucket() {\n        const timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n          this.lastTimestamp = timestamp;\n          return;\n        }\n        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n      }\n      updateClientSendingRate(response) {\n        let calculatedRate;\n        this.updateMeasuredRate();\n        if ((0, import_service_error_classification.isThrottlingError)(response)) {\n          const rateToUse = !this.enabled\n            ? this.measuredTxRate\n            : Math.min(this.measuredTxRate, this.fillRate);\n          this.lastMaxRate = rateToUse;\n          this.calculateTimeWindow();\n          this.lastThrottleTime = this.getCurrentTimeInSeconds();\n          calculatedRate = this.cubicThrottle(rateToUse);\n          this.enableTokenBucket();\n        } else {\n          this.calculateTimeWindow();\n          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n      }\n      calculateTimeWindow() {\n        this.timeWindow = this.getPrecise(\n          ((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant) ** (1 / 3)\n        );\n      }\n      cubicThrottle(rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n      }\n      cubicSuccess(timestamp) {\n        return this.getPrecise(\n          this.scaleConstant * (timestamp - this.lastThrottleTime - this.timeWindow) ** 3 +\n            this.lastMaxRate\n        );\n      }\n      enableTokenBucket() {\n        this.enabled = true;\n      }\n      updateTokenBucketRate(newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n      }\n      updateMeasuredRate() {\n        const t = this.getCurrentTimeInSeconds();\n        const timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n          this.measuredTxRate = this.getPrecise(\n            currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth)\n          );\n          this.requestCount = 0;\n          this.lastTxRateBucket = timeBucket;\n        }\n      }\n      getPrecise(num) {\n        return parseFloat(num.toFixed(8));\n      }\n    };\n    __name(_DefaultRateLimiter, \"DefaultRateLimiter\");\n    var DefaultRateLimiter = _DefaultRateLimiter;\n    var DEFAULT_RETRY_DELAY_BASE = 100;\n    var MAXIMUM_RETRY_DELAY = 20 * 1e3;\n    var THROTTLING_RETRY_DELAY_BASE = 500;\n    var INITIAL_RETRY_TOKENS = 500;\n    var RETRY_COST = 5;\n    var TIMEOUT_RETRY_COST = 10;\n    var NO_RETRY_INCREMENT = 1;\n    var INVOCATION_ID_HEADER = \"amz-sdk-invocation-id\";\n    var REQUEST_HEADER = \"amz-sdk-request\";\n    var getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name(() => {\n      let delayBase = DEFAULT_RETRY_DELAY_BASE;\n      const computeNextBackoffDelay = /* @__PURE__ */ __name((attempts) => {\n        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n      }, \"computeNextBackoffDelay\");\n      const setDelayBase = /* @__PURE__ */ __name((delay) => {\n        delayBase = delay;\n      }, \"setDelayBase\");\n      return {\n        computeNextBackoffDelay,\n        setDelayBase,\n      };\n    }, \"getDefaultRetryBackoffStrategy\");\n    var createDefaultRetryToken = /* @__PURE__ */ __name(\n      ({ retryDelay, retryCount, retryCost }) => {\n        const getRetryCount = /* @__PURE__ */ __name(() => retryCount, \"getRetryCount\");\n        const getRetryDelay = /* @__PURE__ */ __name(\n          () => Math.min(MAXIMUM_RETRY_DELAY, retryDelay),\n          \"getRetryDelay\"\n        );\n        const getRetryCost = /* @__PURE__ */ __name(() => retryCost, \"getRetryCost\");\n        return {\n          getRetryCount,\n          getRetryDelay,\n          getRetryCost,\n        };\n      },\n      \"createDefaultRetryToken\"\n    );\n    var _StandardRetryStrategy = class _StandardRetryStrategy {\n      constructor(maxAttempts) {\n        this.maxAttempts = maxAttempts;\n        this.mode = \"standard\";\n        this.capacity = INITIAL_RETRY_TOKENS;\n        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();\n        this.maxAttemptsProvider =\n          typeof maxAttempts === \"function\" ? maxAttempts : async () => maxAttempts;\n      }\n      async acquireInitialRetryToken(retryTokenScope) {\n        return createDefaultRetryToken({\n          retryDelay: DEFAULT_RETRY_DELAY_BASE,\n          retryCount: 0,\n        });\n      }\n      async refreshRetryTokenForRetry(token, errorInfo) {\n        const maxAttempts = await this.getMaxAttempts();\n        if (this.shouldRetry(token, errorInfo, maxAttempts)) {\n          const errorType = errorInfo.errorType;\n          this.retryBackoffStrategy.setDelayBase(\n            errorType === \"THROTTLING\" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE\n          );\n          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(\n            token.getRetryCount()\n          );\n          const retryDelay = errorInfo.retryAfterHint\n            ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType)\n            : delayFromErrorType;\n          const capacityCost = this.getCapacityCost(errorType);\n          this.capacity -= capacityCost;\n          return createDefaultRetryToken({\n            retryDelay,\n            retryCount: token.getRetryCount() + 1,\n            retryCost: capacityCost,\n          });\n        }\n        throw new Error(\"No retry token available\");\n      }\n      recordSuccess(token) {\n        this.capacity = Math.max(\n          INITIAL_RETRY_TOKENS,\n          this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT)\n        );\n      }\n      getCapacity() {\n        return this.capacity;\n      }\n      async getMaxAttempts() {\n        try {\n          return await this.maxAttemptsProvider();\n        } catch (error) {\n          console.warn(\n            `Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`\n          );\n          return DEFAULT_MAX_ATTEMPTS;\n        }\n      }\n      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\n        const attempts = tokenToRenew.getRetryCount() + 1;\n        return (\n          attempts < maxAttempts &&\n          this.capacity >= this.getCapacityCost(errorInfo.errorType) &&\n          this.isRetryableError(errorInfo.errorType)\n        );\n      }\n      getCapacityCost(errorType) {\n        return errorType === \"TRANSIENT\" ? TIMEOUT_RETRY_COST : RETRY_COST;\n      }\n      isRetryableError(errorType) {\n        return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\n      }\n    };\n    __name(_StandardRetryStrategy, \"StandardRetryStrategy\");\n    var StandardRetryStrategy = _StandardRetryStrategy;\n    var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy {\n      constructor(maxAttemptsProvider, options) {\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = \"adaptive\";\n        const { rateLimiter } = options ?? {};\n        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);\n      }\n      async acquireInitialRetryToken(retryTokenScope) {\n        await this.rateLimiter.getSendToken();\n        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);\n      }\n      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        this.rateLimiter.updateClientSendingRate(errorInfo);\n        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n      }\n      recordSuccess(token) {\n        this.rateLimiter.updateClientSendingRate({});\n        this.standardRetryStrategy.recordSuccess(token);\n      }\n    };\n    __name(_AdaptiveRetryStrategy, \"AdaptiveRetryStrategy\");\n    var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;\n    var _ConfiguredRetryStrategy = class _ConfiguredRetryStrategy extends StandardRetryStrategy {\n      constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {\n        super(typeof maxAttempts === \"function\" ? maxAttempts : async () => maxAttempts);\n        if (typeof computeNextBackoffDelay === \"number\") {\n          this.computeNextBackoffDelay = () => computeNextBackoffDelay;\n        } else {\n          this.computeNextBackoffDelay = computeNextBackoffDelay;\n        }\n      }\n      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());\n        return token;\n      }\n    };\n    __name(_ConfiguredRetryStrategy, \"ConfiguredRetryStrategy\");\n    var ConfiguredRetryStrategy = _ConfiguredRetryStrategy;\n  },\n});\n\n// node_modules/@smithy/middleware-stack/dist-cjs/index.js\nvar require_dist_cjs21 = __commonJS({\n  \"node_modules/@smithy/middleware-stack/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      constructStack: () => constructStack,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var getAllAliases = /* @__PURE__ */ __name((name, aliases) => {\n      const _aliases = [];\n      if (name) {\n        _aliases.push(name);\n      }\n      if (aliases) {\n        for (const alias of aliases) {\n          _aliases.push(alias);\n        }\n      }\n      return _aliases;\n    }, \"getAllAliases\");\n    var getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases) => {\n      return `${name || \"anonymous\"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(\",\")})` : \"\"}`;\n    }, \"getMiddlewareNameWithAliases\");\n    var constructStack = /* @__PURE__ */ __name(() => {\n      let absoluteEntries = [];\n      let relativeEntries = [];\n      let identifyOnResolve = false;\n      const entriesNameSet = /* @__PURE__ */ new Set();\n      const sort = /* @__PURE__ */ __name(\n        (entries) =>\n          entries.sort(\n            (a, b) =>\n              stepWeights[b.step] - stepWeights[a.step] ||\n              priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]\n          ),\n        \"sort\"\n      );\n      const removeByName = /* @__PURE__ */ __name((toRemove) => {\n        let isRemoved = false;\n        const filterCb = /* @__PURE__ */ __name((entry) => {\n          const aliases = getAllAliases(entry.name, entry.aliases);\n          if (aliases.includes(toRemove)) {\n            isRemoved = true;\n            for (const alias of aliases) {\n              entriesNameSet.delete(alias);\n            }\n            return false;\n          }\n          return true;\n        }, \"filterCb\");\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n      }, \"removeByName\");\n      const removeByReference = /* @__PURE__ */ __name((toRemove) => {\n        let isRemoved = false;\n        const filterCb = /* @__PURE__ */ __name((entry) => {\n          if (entry.middleware === toRemove) {\n            isRemoved = true;\n            for (const alias of getAllAliases(entry.name, entry.aliases)) {\n              entriesNameSet.delete(alias);\n            }\n            return false;\n          }\n          return true;\n        }, \"filterCb\");\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n      }, \"removeByReference\");\n      const cloneTo = /* @__PURE__ */ __name((toStack) => {\n        var _a;\n        absoluteEntries.forEach((entry) => {\n          toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n          toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        (_a = toStack.identifyOnResolve) == null\n          ? void 0\n          : _a.call(toStack, stack.identifyOnResolve());\n        return toStack;\n      }, \"cloneTo\");\n      const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n          if (entry.before.length === 0 && entry.after.length === 0) {\n            expandedMiddlewareList.push(entry);\n          } else {\n            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n          }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n          if (entry.before.length === 0 && entry.after.length === 0) {\n            expandedMiddlewareList.push(entry);\n          } else {\n            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n          }\n        });\n        return expandedMiddlewareList;\n      }, \"expandRelativeMiddlewareList\");\n      const getMiddlewareList = /* @__PURE__ */ __name((debug = false) => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n          const normalizedEntry = {\n            ...entry,\n            before: [],\n            after: [],\n          };\n          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {\n            normalizedEntriesNameMap[alias] = normalizedEntry;\n          }\n          normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n          const normalizedEntry = {\n            ...entry,\n            before: [],\n            after: [],\n          };\n          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {\n            normalizedEntriesNameMap[alias] = normalizedEntry;\n          }\n          normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n          if (entry.toMiddleware) {\n            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n            if (toMiddleware === void 0) {\n              if (debug) {\n                return;\n              }\n              throw new Error(\n                `${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`\n              );\n            }\n            if (entry.relation === \"after\") {\n              toMiddleware.after.push(entry);\n            }\n            if (entry.relation === \"before\") {\n              toMiddleware.before.push(entry);\n            }\n          }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n          .map(expandRelativeMiddlewareList)\n          .reduce((wholeList, expandedMiddlewareList) => {\n            wholeList.push(...expandedMiddlewareList);\n            return wholeList;\n          }, []);\n        return mainChain;\n      }, \"getMiddlewareList\");\n      const stack = {\n        add: (middleware, options = {}) => {\n          const { name, override, aliases: _aliases } = options;\n          const entry = {\n            step: \"initialize\",\n            priority: \"normal\",\n            middleware,\n            ...options,\n          };\n          const aliases = getAllAliases(name, _aliases);\n          if (aliases.length > 0) {\n            if (aliases.some((alias) => entriesNameSet.has(alias))) {\n              if (!override)\n                throw new Error(\n                  `Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`\n                );\n              for (const alias of aliases) {\n                const toOverrideIndex = absoluteEntries.findIndex((entry2) => {\n                  var _a;\n                  return (\n                    entry2.name === alias ||\n                    ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias))\n                  );\n                });\n                if (toOverrideIndex === -1) {\n                  continue;\n                }\n                const toOverride = absoluteEntries[toOverrideIndex];\n                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {\n                  throw new Error(\n                    `\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware with ${entry.priority} priority in ${entry.step} step.`\n                  );\n                }\n                absoluteEntries.splice(toOverrideIndex, 1);\n              }\n            }\n            for (const alias of aliases) {\n              entriesNameSet.add(alias);\n            }\n          }\n          absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n          const { name, override, aliases: _aliases } = options;\n          const entry = {\n            middleware,\n            ...options,\n          };\n          const aliases = getAllAliases(name, _aliases);\n          if (aliases.length > 0) {\n            if (aliases.some((alias) => entriesNameSet.has(alias))) {\n              if (!override)\n                throw new Error(\n                  `Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`\n                );\n              for (const alias of aliases) {\n                const toOverrideIndex = relativeEntries.findIndex((entry2) => {\n                  var _a;\n                  return (\n                    entry2.name === alias ||\n                    ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias))\n                  );\n                });\n                if (toOverrideIndex === -1) {\n                  continue;\n                }\n                const toOverride = relativeEntries[toOverrideIndex];\n                if (\n                  toOverride.toMiddleware !== entry.toMiddleware ||\n                  toOverride.relation !== entry.relation\n                ) {\n                  throw new Error(\n                    `\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`\n                  );\n                }\n                relativeEntries.splice(toOverrideIndex, 1);\n              }\n            }\n            for (const alias of aliases) {\n              entriesNameSet.add(alias);\n            }\n          }\n          relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(constructStack()),\n        use: (plugin) => {\n          plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n          if (typeof toRemove === \"string\") return removeByName(toRemove);\n          else return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n          let isRemoved = false;\n          const filterCb = /* @__PURE__ */ __name((entry) => {\n            const { tags, name, aliases: _aliases } = entry;\n            if (tags && tags.includes(toRemove)) {\n              const aliases = getAllAliases(name, _aliases);\n              for (const alias of aliases) {\n                entriesNameSet.delete(alias);\n              }\n              isRemoved = true;\n              return false;\n            }\n            return true;\n          }, \"filterCb\");\n          absoluteEntries = absoluteEntries.filter(filterCb);\n          relativeEntries = relativeEntries.filter(filterCb);\n          return isRemoved;\n        },\n        concat: (from) => {\n          var _a;\n          const cloned = cloneTo(constructStack());\n          cloned.use(from);\n          cloned.identifyOnResolve(\n            identifyOnResolve ||\n              cloned.identifyOnResolve() ||\n              (((_a = from.identifyOnResolve) == null ? void 0 : _a.call(from)) ?? false)\n          );\n          return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: () => {\n          return getMiddlewareList(true).map((mw) => {\n            const step = mw.step ?? mw.relation + \" \" + mw.toMiddleware;\n            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + \" - \" + step;\n          });\n        },\n        identifyOnResolve(toggle) {\n          if (typeof toggle === \"boolean\") identifyOnResolve = toggle;\n          return identifyOnResolve;\n        },\n        resolve: (handler, context) => {\n          for (const middleware of getMiddlewareList()\n            .map((entry) => entry.middleware)\n            .reverse()) {\n            handler = middleware(handler, context);\n          }\n          if (identifyOnResolve) {\n            console.log(stack.identify());\n          }\n          return handler;\n        },\n      };\n      return stack;\n    }, \"constructStack\");\n    var stepWeights = {\n      initialize: 5,\n      serialize: 4,\n      build: 3,\n      finalizeRequest: 2,\n      deserialize: 1,\n    };\n    var priorityWeights = {\n      high: 3,\n      normal: 2,\n      low: 1,\n    };\n  },\n});\n\n// node_modules/@smithy/is-array-buffer/dist-cjs/index.js\nvar require_dist_cjs22 = __commonJS({\n  \"node_modules/@smithy/is-array-buffer/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      isArrayBuffer: () => isArrayBuffer,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var isArrayBuffer = /* @__PURE__ */ __name(\n      (arg) =>\n        (typeof ArrayBuffer === \"function\" && arg instanceof ArrayBuffer) ||\n        Object.prototype.toString.call(arg) === \"[object ArrayBuffer]\",\n      \"isArrayBuffer\"\n    );\n  },\n});\n\n// node_modules/@smithy/util-buffer-from/dist-cjs/index.js\nvar require_dist_cjs23 = __commonJS({\n  \"node_modules/@smithy/util-buffer-from/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      fromArrayBuffer: () => fromArrayBuffer,\n      fromString: () => fromString,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_is_array_buffer = require_dist_cjs22();\n    var import_buffer = require(\"buffer\");\n    var fromArrayBuffer = /* @__PURE__ */ __name(\n      (input, offset = 0, length = input.byteLength - offset) => {\n        if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {\n          throw new TypeError(\n            `The \"input\" argument must be ArrayBuffer. Received type ${typeof input} (${input})`\n          );\n        }\n        return import_buffer.Buffer.from(input, offset, length);\n      },\n      \"fromArrayBuffer\"\n    );\n    var fromString = /* @__PURE__ */ __name((input, encoding) => {\n      if (typeof input !== \"string\") {\n        throw new TypeError(\n          `The \"input\" argument must be of type string. Received type ${typeof input} (${input})`\n        );\n      }\n      return encoding\n        ? import_buffer.Buffer.from(input, encoding)\n        : import_buffer.Buffer.from(input);\n    }, \"fromString\");\n  },\n});\n\n// node_modules/@smithy/util-base64/dist-cjs/fromBase64.js\nvar require_fromBase64 = __commonJS({\n  \"node_modules/@smithy/util-base64/dist-cjs/fromBase64.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.fromBase64 = void 0;\n    var util_buffer_from_1 = require_dist_cjs23();\n    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;\n    var fromBase642 = (input) => {\n      if ((input.length * 3) % 4 !== 0) {\n        throw new TypeError(`Incorrect padding on base64 string.`);\n      }\n      if (!BASE64_REGEX.exec(input)) {\n        throw new TypeError(`Invalid base64 string.`);\n      }\n      const buffer = (0, util_buffer_from_1.fromString)(input, \"base64\");\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    };\n    exports.fromBase64 = fromBase642;\n  },\n});\n\n// node_modules/@smithy/util-utf8/dist-cjs/index.js\nvar require_dist_cjs24 = __commonJS({\n  \"node_modules/@smithy/util-utf8/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      fromUtf8: () => fromUtf8,\n      toUint8Array: () => toUint8Array,\n      toUtf8: () => toUtf8,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_util_buffer_from = require_dist_cjs23();\n    var fromUtf8 = /* @__PURE__ */ __name((input) => {\n      const buf = (0, import_util_buffer_from.fromString)(input, \"utf8\");\n      return new Uint8Array(\n        buf.buffer,\n        buf.byteOffset,\n        buf.byteLength / Uint8Array.BYTES_PER_ELEMENT\n      );\n    }, \"fromUtf8\");\n    var toUint8Array = /* @__PURE__ */ __name((data) => {\n      if (typeof data === \"string\") {\n        return fromUtf8(data);\n      }\n      if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(\n          data.buffer,\n          data.byteOffset,\n          data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n        );\n      }\n      return new Uint8Array(data);\n    }, \"toUint8Array\");\n    var toUtf8 = /* @__PURE__ */ __name((input) => {\n      if (typeof input === \"string\") {\n        return input;\n      }\n      if (\n        typeof input !== \"object\" ||\n        typeof input.byteOffset !== \"number\" ||\n        typeof input.byteLength !== \"number\"\n      ) {\n        throw new Error(\n          \"@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.\"\n        );\n      }\n      return (0, import_util_buffer_from.fromArrayBuffer)(\n        input.buffer,\n        input.byteOffset,\n        input.byteLength\n      ).toString(\"utf8\");\n    }, \"toUtf8\");\n  },\n});\n\n// node_modules/@smithy/util-base64/dist-cjs/toBase64.js\nvar require_toBase64 = __commonJS({\n  \"node_modules/@smithy/util-base64/dist-cjs/toBase64.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.toBase64 = void 0;\n    var util_buffer_from_1 = require_dist_cjs23();\n    var util_utf8_1 = require_dist_cjs24();\n    var toBase642 = (_input) => {\n      let input;\n      if (typeof _input === \"string\") {\n        input = (0, util_utf8_1.fromUtf8)(_input);\n      } else {\n        input = _input;\n      }\n      if (\n        typeof input !== \"object\" ||\n        typeof input.byteOffset !== \"number\" ||\n        typeof input.byteLength !== \"number\"\n      ) {\n        throw new Error(\n          \"@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.\"\n        );\n      }\n      return (0, util_buffer_from_1.fromArrayBuffer)(\n        input.buffer,\n        input.byteOffset,\n        input.byteLength\n      ).toString(\"base64\");\n    };\n    exports.toBase64 = toBase642;\n  },\n});\n\n// node_modules/@smithy/util-base64/dist-cjs/index.js\nvar require_dist_cjs25 = __commonJS({\n  \"node_modules/@smithy/util-base64/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __reExport = (target, mod, secondTarget) => (\n      __copyProps2(target, mod, \"default\"),\n      secondTarget && __copyProps2(secondTarget, mod, \"default\")\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    module2.exports = __toCommonJS2(src_exports);\n    __reExport(src_exports, require_fromBase64(), module2.exports);\n    __reExport(src_exports, require_toBase64(), module2.exports);\n  },\n});\n\n// node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js\nvar require_getAwsChunkedEncodingStream = __commonJS({\n  \"node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getAwsChunkedEncodingStream = void 0;\n    var stream_1 = require(\"stream\");\n    var getAwsChunkedEncodingStream2 = (readableStream, options) => {\n      const {\n        base64Encoder,\n        bodyLengthChecker,\n        checksumAlgorithmFn,\n        checksumLocationName,\n        streamHasher,\n      } = options;\n      const checksumRequired =\n        base64Encoder !== void 0 &&\n        checksumAlgorithmFn !== void 0 &&\n        checksumLocationName !== void 0 &&\n        streamHasher !== void 0;\n      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;\n      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {} });\n      readableStream.on(\"data\", (data) => {\n        const length = bodyLengthChecker(data) || 0;\n        awsChunkedEncodingStream.push(`${length.toString(16)}\\r\n`);\n        awsChunkedEncodingStream.push(data);\n        awsChunkedEncodingStream.push(\"\\r\\n\");\n      });\n      readableStream.on(\"end\", async () => {\n        awsChunkedEncodingStream.push(`0\\r\n`);\n        if (checksumRequired) {\n          const checksum = base64Encoder(await digest);\n          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\\r\n`);\n          awsChunkedEncodingStream.push(`\\r\n`);\n        }\n        awsChunkedEncodingStream.push(null);\n      });\n      return awsChunkedEncodingStream;\n    };\n    exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream2;\n  },\n});\n\n// node_modules/@smithy/util-uri-escape/dist-cjs/index.js\nvar require_dist_cjs26 = __commonJS({\n  \"node_modules/@smithy/util-uri-escape/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      escapeUri: () => escapeUri,\n      escapeUriPath: () => escapeUriPath,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var escapeUri = /* @__PURE__ */ __name(\n      (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode),\n      \"escapeUri\"\n    );\n    var hexEncode = /* @__PURE__ */ __name(\n      (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n      \"hexEncode\"\n    );\n    var escapeUriPath = /* @__PURE__ */ __name(\n      (uri) => uri.split(\"/\").map(escapeUri).join(\"/\"),\n      \"escapeUriPath\"\n    );\n  },\n});\n\n// node_modules/@smithy/querystring-builder/dist-cjs/index.js\nvar require_dist_cjs27 = __commonJS({\n  \"node_modules/@smithy/querystring-builder/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      buildQueryString: () => buildQueryString,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_util_uri_escape = require_dist_cjs26();\n    function buildQueryString(query) {\n      const parts = [];\n      for (let key of Object.keys(query).sort()) {\n        const value = query[key];\n        key = (0, import_util_uri_escape.escapeUri)(key);\n        if (Array.isArray(value)) {\n          for (let i = 0, iLen = value.length; i < iLen; i++) {\n            parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);\n          }\n        } else {\n          let qsEntry = key;\n          if (value || typeof value === \"string\") {\n            qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;\n          }\n          parts.push(qsEntry);\n        }\n      }\n      return parts.join(\"&\");\n    }\n    __name(buildQueryString, \"buildQueryString\");\n  },\n});\n\n// node_modules/@smithy/node-http-handler/dist-cjs/index.js\nvar require_dist_cjs28 = __commonJS({\n  \"node_modules/@smithy/node-http-handler/dist-cjs/index.js\"(exports, module2) {\n    var __create2 = Object.create;\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __getProtoOf2 = Object.getPrototypeOf;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toESM2 = (mod, isNodeMode, target) => (\n      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),\n      __copyProps2(\n        isNodeMode || !mod || !mod.__esModule\n          ? __defProp2(target, \"default\", { value: mod, enumerable: true })\n          : target,\n        mod\n      )\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      DEFAULT_REQUEST_TIMEOUT: () => DEFAULT_REQUEST_TIMEOUT,\n      NodeHttp2Handler: () => NodeHttp2Handler,\n      NodeHttpHandler: () => NodeHttpHandler,\n      streamCollector: () => streamCollector,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_protocol_http = require_dist_cjs2();\n    var import_querystring_builder = require_dist_cjs27();\n    var import_http = require(\"http\");\n    var import_https = require(\"https\");\n    var NODEJS_TIMEOUT_ERROR_CODES = [\"ECONNRESET\", \"EPIPE\", \"ETIMEDOUT\"];\n    var getTransformedHeaders = /* @__PURE__ */ __name((headers) => {\n      const transformedHeaders = {};\n      for (const name of Object.keys(headers)) {\n        const headerValues = headers[name];\n        transformedHeaders[name] = Array.isArray(headerValues)\n          ? headerValues.join(\",\")\n          : headerValues;\n      }\n      return transformedHeaders;\n    }, \"getTransformedHeaders\");\n    var setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {\n      if (!timeoutInMs) {\n        return;\n      }\n      const timeoutId = setTimeout(() => {\n        request.destroy();\n        reject(\n          Object.assign(\n            new Error(\n              `Socket timed out without establishing a connection within ${timeoutInMs} ms`\n            ),\n            {\n              name: \"TimeoutError\",\n            }\n          )\n        );\n      }, timeoutInMs);\n      request.on(\"socket\", (socket) => {\n        if (socket.connecting) {\n          socket.on(\"connect\", () => {\n            clearTimeout(timeoutId);\n          });\n        } else {\n          clearTimeout(timeoutId);\n        }\n      });\n    }, \"setConnectionTimeout\");\n    var setSocketKeepAlive = /* @__PURE__ */ __name((request, { keepAlive, keepAliveMsecs }) => {\n      if (keepAlive !== true) {\n        return;\n      }\n      request.on(\"socket\", (socket) => {\n        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);\n      });\n    }, \"setSocketKeepAlive\");\n    var setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {\n      request.setTimeout(timeoutInMs, () => {\n        request.destroy();\n        reject(\n          Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), {\n            name: \"TimeoutError\",\n          })\n        );\n      });\n    }, \"setSocketTimeout\");\n    var import_stream = require(\"stream\");\n    var MIN_WAIT_TIME = 1e3;\n    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {\n      const headers = request.headers ?? {};\n      const expect = headers[\"Expect\"] || headers[\"expect\"];\n      let timeoutId = -1;\n      let hasError = false;\n      if (expect === \"100-continue\") {\n        await Promise.race([\n          new Promise((resolve) => {\n            timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));\n          }),\n          new Promise((resolve) => {\n            httpRequest.on(\"continue\", () => {\n              clearTimeout(timeoutId);\n              resolve();\n            });\n            httpRequest.on(\"error\", () => {\n              hasError = true;\n              clearTimeout(timeoutId);\n              resolve();\n            });\n          }),\n        ]);\n      }\n      if (!hasError) {\n        writeBody(httpRequest, request.body);\n      }\n    }\n    __name(writeRequestBody, \"writeRequestBody\");\n    function writeBody(httpRequest, body) {\n      if (body instanceof import_stream.Readable) {\n        body.pipe(httpRequest);\n        return;\n      }\n      if (body) {\n        if (Buffer.isBuffer(body) || typeof body === \"string\") {\n          httpRequest.end(body);\n          return;\n        }\n        const uint8 = body;\n        if (\n          typeof uint8 === \"object\" &&\n          uint8.buffer &&\n          typeof uint8.byteOffset === \"number\" &&\n          typeof uint8.byteLength === \"number\"\n        ) {\n          httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));\n          return;\n        }\n        httpRequest.end(Buffer.from(body));\n        return;\n      }\n      httpRequest.end();\n    }\n    __name(writeBody, \"writeBody\");\n    var DEFAULT_REQUEST_TIMEOUT = 0;\n    var _NodeHttpHandler = class _NodeHttpHandler2 {\n      constructor(options) {\n        this.socketWarningTimestamp = 0;\n        this.metadata = { handlerProtocol: \"http/1.1\" };\n        this.configProvider = new Promise((resolve, reject) => {\n          if (typeof options === \"function\") {\n            options()\n              .then((_options) => {\n                resolve(this.resolveDefaultConfig(_options));\n              })\n              .catch(reject);\n          } else {\n            resolve(this.resolveDefaultConfig(options));\n          }\n        });\n      }\n      static create(instanceOrOptions) {\n        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === \"function\") {\n          return instanceOrOptions;\n        }\n        return new _NodeHttpHandler2(instanceOrOptions);\n      }\n      static checkSocketUsage(agent, socketWarningTimestamp, logger = console) {\n        var _a, _b, _c;\n        const { sockets, requests, maxSockets } = agent;\n        if (typeof maxSockets !== \"number\" || maxSockets === Infinity) {\n          return socketWarningTimestamp;\n        }\n        const interval = 15e3;\n        if (Date.now() - interval < socketWarningTimestamp) {\n          return socketWarningTimestamp;\n        }\n        if (sockets && requests) {\n          for (const origin in sockets) {\n            const socketsInUse = ((_a = sockets[origin]) == null ? void 0 : _a.length) ?? 0;\n            const requestsEnqueued = ((_b = requests[origin]) == null ? void 0 : _b.length) ?? 0;\n            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {\n              (_c = logger == null ? void 0 : logger.warn) == null\n                ? void 0\n                : _c.call(\n                    logger,\n                    `@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.\nSee https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html\nor increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`\n                  );\n              return Date.now();\n            }\n          }\n        }\n        return socketWarningTimestamp;\n      }\n      resolveDefaultConfig(options) {\n        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } =\n          options || {};\n        const keepAlive = true;\n        const maxSockets = 50;\n        return {\n          connectionTimeout,\n          requestTimeout: requestTimeout ?? socketTimeout,\n          httpAgent: (() => {\n            if (\n              httpAgent instanceof import_http.Agent ||\n              typeof (httpAgent == null ? void 0 : httpAgent.destroy) === \"function\"\n            ) {\n              return httpAgent;\n            }\n            return new import_http.Agent({ keepAlive, maxSockets, ...httpAgent });\n          })(),\n          httpsAgent: (() => {\n            if (\n              httpsAgent instanceof import_https.Agent ||\n              typeof (httpsAgent == null ? void 0 : httpsAgent.destroy) === \"function\"\n            ) {\n              return httpsAgent;\n            }\n            return new import_https.Agent({ keepAlive, maxSockets, ...httpsAgent });\n          })(),\n          logger: console,\n        };\n      }\n      destroy() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.config) == null ? void 0 : _a.httpAgent) == null ? void 0 : _b.destroy();\n        (_d = (_c = this.config) == null ? void 0 : _c.httpsAgent) == null ? void 0 : _d.destroy();\n      }\n      async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n          this.config = await this.configProvider;\n        }\n        let socketCheckTimeoutId;\n        return new Promise((_resolve, _reject) => {\n          let writeRequestBodyPromise = void 0;\n          const resolve = /* @__PURE__ */ __name(async (arg) => {\n            await writeRequestBodyPromise;\n            clearTimeout(socketCheckTimeoutId);\n            _resolve(arg);\n          }, \"resolve\");\n          const reject = /* @__PURE__ */ __name(async (arg) => {\n            await writeRequestBodyPromise;\n            clearTimeout(socketCheckTimeoutId);\n            _reject(arg);\n          }, \"reject\");\n          if (!this.config) {\n            throw new Error(\"Node HTTP request handler config is not resolved\");\n          }\n          if (abortSignal == null ? void 0 : abortSignal.aborted) {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n            return;\n          }\n          const isSSL = request.protocol === \"https:\";\n          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;\n          socketCheckTimeoutId = setTimeout(\n            () => {\n              this.socketWarningTimestamp = _NodeHttpHandler2.checkSocketUsage(\n                agent,\n                this.socketWarningTimestamp,\n                this.config.logger\n              );\n            },\n            this.config.socketAcquisitionWarningTimeout ??\n              (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)\n          );\n          const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});\n          let auth = void 0;\n          if (request.username != null || request.password != null) {\n            const username = request.username ?? \"\";\n            const password = request.password ?? \"\";\n            auth = `${username}:${password}`;\n          }\n          let path = request.path;\n          if (queryString) {\n            path += `?${queryString}`;\n          }\n          if (request.fragment) {\n            path += `#${request.fragment}`;\n          }\n          const nodeHttpsOptions = {\n            headers: request.headers,\n            host: request.hostname,\n            method: request.method,\n            path,\n            port: request.port,\n            agent,\n            auth,\n          };\n          const requestFunc = isSSL ? import_https.request : import_http.request;\n          const req = requestFunc(nodeHttpsOptions, (res) => {\n            const httpResponse = new import_protocol_http.HttpResponse({\n              statusCode: res.statusCode || -1,\n              reason: res.statusMessage,\n              headers: getTransformedHeaders(res.headers),\n              body: res,\n            });\n            resolve({ response: httpResponse });\n          });\n          req.on(\"error\", (err) => {\n            if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\n              reject(Object.assign(err, { name: \"TimeoutError\" }));\n            } else {\n              reject(err);\n            }\n          });\n          setConnectionTimeout(req, reject, this.config.connectionTimeout);\n          setSocketTimeout(req, reject, this.config.requestTimeout);\n          if (abortSignal) {\n            const onAbort = /* @__PURE__ */ __name(() => {\n              req.destroy();\n              const abortError = new Error(\"Request aborted\");\n              abortError.name = \"AbortError\";\n              reject(abortError);\n            }, \"onAbort\");\n            if (typeof abortSignal.addEventListener === \"function\") {\n              abortSignal.addEventListener(\"abort\", onAbort);\n            } else {\n              abortSignal.onabort = onAbort;\n            }\n          }\n          const httpAgent = nodeHttpsOptions.agent;\n          if (typeof httpAgent === \"object\" && \"keepAlive\" in httpAgent) {\n            setSocketKeepAlive(req, {\n              keepAlive: httpAgent.keepAlive,\n              keepAliveMsecs: httpAgent.keepAliveMsecs,\n            });\n          }\n          writeRequestBodyPromise = writeRequestBody(\n            req,\n            request,\n            this.config.requestTimeout\n          ).catch((e) => {\n            clearTimeout(socketCheckTimeoutId);\n            return _reject(e);\n          });\n        });\n      }\n      updateHttpClientConfig(key, value) {\n        this.config = void 0;\n        this.configProvider = this.configProvider.then((config) => {\n          return {\n            ...config,\n            [key]: value,\n          };\n        });\n      }\n      httpHandlerConfigs() {\n        return this.config ?? {};\n      }\n    };\n    __name(_NodeHttpHandler, \"NodeHttpHandler\");\n    var NodeHttpHandler = _NodeHttpHandler;\n    var import_http22 = require(\"http2\");\n    var import_http2 = __toESM2(require(\"http2\"));\n    var _NodeHttp2ConnectionPool = class _NodeHttp2ConnectionPool {\n      constructor(sessions) {\n        this.sessions = [];\n        this.sessions = sessions ?? [];\n      }\n      poll() {\n        if (this.sessions.length > 0) {\n          return this.sessions.shift();\n        }\n      }\n      offerLast(session) {\n        this.sessions.push(session);\n      }\n      contains(session) {\n        return this.sessions.includes(session);\n      }\n      remove(session) {\n        this.sessions = this.sessions.filter((s) => s !== session);\n      }\n      [Symbol.iterator]() {\n        return this.sessions[Symbol.iterator]();\n      }\n      destroy(connection) {\n        for (const session of this.sessions) {\n          if (session === connection) {\n            if (!session.destroyed) {\n              session.destroy();\n            }\n          }\n        }\n      }\n    };\n    __name(_NodeHttp2ConnectionPool, \"NodeHttp2ConnectionPool\");\n    var NodeHttp2ConnectionPool = _NodeHttp2ConnectionPool;\n    var _NodeHttp2ConnectionManager = class _NodeHttp2ConnectionManager {\n      constructor(config) {\n        this.sessionCache = /* @__PURE__ */ new Map();\n        this.config = config;\n        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {\n          throw new RangeError(\"maxConcurrency must be greater than zero.\");\n        }\n      }\n      lease(requestContext, connectionConfiguration) {\n        const url = this.getUrlString(requestContext);\n        const existingPool = this.sessionCache.get(url);\n        if (existingPool) {\n          const existingSession = existingPool.poll();\n          if (existingSession && !this.config.disableConcurrency) {\n            return existingSession;\n          }\n        }\n        const session = import_http2.default.connect(url);\n        if (this.config.maxConcurrency) {\n          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {\n            if (err) {\n              throw new Error(\n                \"Fail to set maxConcurrentStreams to \" +\n                  this.config.maxConcurrency +\n                  \"when creating new session for \" +\n                  requestContext.destination.toString()\n              );\n            }\n          });\n        }\n        session.unref();\n        const destroySessionCb = /* @__PURE__ */ __name(() => {\n          session.destroy();\n          this.deleteSession(url, session);\n        }, \"destroySessionCb\");\n        session.on(\"goaway\", destroySessionCb);\n        session.on(\"error\", destroySessionCb);\n        session.on(\"frameError\", destroySessionCb);\n        session.on(\"close\", () => this.deleteSession(url, session));\n        if (connectionConfiguration.requestTimeout) {\n          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);\n        }\n        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();\n        connectionPool.offerLast(session);\n        this.sessionCache.set(url, connectionPool);\n        return session;\n      }\n      deleteSession(authority, session) {\n        const existingConnectionPool = this.sessionCache.get(authority);\n        if (!existingConnectionPool) {\n          return;\n        }\n        if (!existingConnectionPool.contains(session)) {\n          return;\n        }\n        existingConnectionPool.remove(session);\n        this.sessionCache.set(authority, existingConnectionPool);\n      }\n      release(requestContext, session) {\n        var _a;\n        const cacheKey = this.getUrlString(requestContext);\n        (_a = this.sessionCache.get(cacheKey)) == null ? void 0 : _a.offerLast(session);\n      }\n      destroy() {\n        for (const [key, connectionPool] of this.sessionCache) {\n          for (const session of connectionPool) {\n            if (!session.destroyed) {\n              session.destroy();\n            }\n            connectionPool.remove(session);\n          }\n          this.sessionCache.delete(key);\n        }\n      }\n      setMaxConcurrentStreams(maxConcurrentStreams) {\n        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {\n          throw new RangeError(\"maxConcurrentStreams must be greater than zero.\");\n        }\n        this.config.maxConcurrency = maxConcurrentStreams;\n      }\n      setDisableConcurrentStreams(disableConcurrentStreams) {\n        this.config.disableConcurrency = disableConcurrentStreams;\n      }\n      getUrlString(request) {\n        return request.destination.toString();\n      }\n    };\n    __name(_NodeHttp2ConnectionManager, \"NodeHttp2ConnectionManager\");\n    var NodeHttp2ConnectionManager = _NodeHttp2ConnectionManager;\n    var _NodeHttp2Handler = class _NodeHttp2Handler2 {\n      constructor(options) {\n        this.metadata = { handlerProtocol: \"h2\" };\n        this.connectionManager = new NodeHttp2ConnectionManager({});\n        this.configProvider = new Promise((resolve, reject) => {\n          if (typeof options === \"function\") {\n            options()\n              .then((opts) => {\n                resolve(opts || {});\n              })\n              .catch(reject);\n          } else {\n            resolve(options || {});\n          }\n        });\n      }\n      static create(instanceOrOptions) {\n        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === \"function\") {\n          return instanceOrOptions;\n        }\n        return new _NodeHttp2Handler2(instanceOrOptions);\n      }\n      destroy() {\n        this.connectionManager.destroy();\n      }\n      async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n          this.config = await this.configProvider;\n          this.connectionManager.setDisableConcurrentStreams(\n            this.config.disableConcurrentStreams || false\n          );\n          if (this.config.maxConcurrentStreams) {\n            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);\n          }\n        }\n        const { requestTimeout, disableConcurrentStreams } = this.config;\n        return new Promise((_resolve, _reject) => {\n          var _a;\n          let fulfilled = false;\n          let writeRequestBodyPromise = void 0;\n          const resolve = /* @__PURE__ */ __name(async (arg) => {\n            await writeRequestBodyPromise;\n            _resolve(arg);\n          }, \"resolve\");\n          const reject = /* @__PURE__ */ __name(async (arg) => {\n            await writeRequestBodyPromise;\n            _reject(arg);\n          }, \"reject\");\n          if (abortSignal == null ? void 0 : abortSignal.aborted) {\n            fulfilled = true;\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n            return;\n          }\n          const { hostname, method, port, protocol, query } = request;\n          let auth = \"\";\n          if (request.username != null || request.password != null) {\n            const username = request.username ?? \"\";\n            const password = request.password ?? \"\";\n            auth = `${username}:${password}@`;\n          }\n          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : \"\"}`;\n          const requestContext = { destination: new URL(authority) };\n          const session = this.connectionManager.lease(requestContext, {\n            requestTimeout: (_a = this.config) == null ? void 0 : _a.sessionTimeout,\n            disableConcurrentStreams: disableConcurrentStreams || false,\n          });\n          const rejectWithDestroy = /* @__PURE__ */ __name((err) => {\n            if (disableConcurrentStreams) {\n              this.destroySession(session);\n            }\n            fulfilled = true;\n            reject(err);\n          }, \"rejectWithDestroy\");\n          const queryString = (0, import_querystring_builder.buildQueryString)(query || {});\n          let path = request.path;\n          if (queryString) {\n            path += `?${queryString}`;\n          }\n          if (request.fragment) {\n            path += `#${request.fragment}`;\n          }\n          const req = session.request({\n            ...request.headers,\n            [import_http22.constants.HTTP2_HEADER_PATH]: path,\n            [import_http22.constants.HTTP2_HEADER_METHOD]: method,\n          });\n          session.ref();\n          req.on(\"response\", (headers) => {\n            const httpResponse = new import_protocol_http.HttpResponse({\n              statusCode: headers[\":status\"] || -1,\n              headers: getTransformedHeaders(headers),\n              body: req,\n            });\n            fulfilled = true;\n            resolve({ response: httpResponse });\n            if (disableConcurrentStreams) {\n              session.close();\n              this.connectionManager.deleteSession(authority, session);\n            }\n          });\n          if (requestTimeout) {\n            req.setTimeout(requestTimeout, () => {\n              req.close();\n              const timeoutError = new Error(\n                `Stream timed out because of no activity for ${requestTimeout} ms`\n              );\n              timeoutError.name = \"TimeoutError\";\n              rejectWithDestroy(timeoutError);\n            });\n          }\n          if (abortSignal) {\n            const onAbort = /* @__PURE__ */ __name(() => {\n              req.close();\n              const abortError = new Error(\"Request aborted\");\n              abortError.name = \"AbortError\";\n              rejectWithDestroy(abortError);\n            }, \"onAbort\");\n            if (typeof abortSignal.addEventListener === \"function\") {\n              abortSignal.addEventListener(\"abort\", onAbort);\n            } else {\n              abortSignal.onabort = onAbort;\n            }\n          }\n          req.on(\"frameError\", (type, code, id) => {\n            rejectWithDestroy(\n              new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`)\n            );\n          });\n          req.on(\"error\", rejectWithDestroy);\n          req.on(\"aborted\", () => {\n            rejectWithDestroy(\n              new Error(\n                `HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`\n              )\n            );\n          });\n          req.on(\"close\", () => {\n            session.unref();\n            if (disableConcurrentStreams) {\n              session.destroy();\n            }\n            if (!fulfilled) {\n              rejectWithDestroy(\n                new Error(\"Unexpected error: http2 request did not get a response\")\n              );\n            }\n          });\n          writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);\n        });\n      }\n      updateHttpClientConfig(key, value) {\n        this.config = void 0;\n        this.configProvider = this.configProvider.then((config) => {\n          return {\n            ...config,\n            [key]: value,\n          };\n        });\n      }\n      httpHandlerConfigs() {\n        return this.config ?? {};\n      }\n      destroySession(session) {\n        if (!session.destroyed) {\n          session.destroy();\n        }\n      }\n    };\n    __name(_NodeHttp2Handler, \"NodeHttp2Handler\");\n    var NodeHttp2Handler = _NodeHttp2Handler;\n    var _Collector = class _Collector extends import_stream.Writable {\n      constructor() {\n        super(...arguments);\n        this.bufferedBytes = [];\n      }\n      _write(chunk, encoding, callback) {\n        this.bufferedBytes.push(chunk);\n        callback();\n      }\n    };\n    __name(_Collector, \"Collector\");\n    var Collector = _Collector;\n    var streamCollector = /* @__PURE__ */ __name((stream) => {\n      if (isReadableStreamInstance(stream)) {\n        return collectReadableStream(stream);\n      }\n      return new Promise((resolve, reject) => {\n        const collector = new Collector();\n        stream.pipe(collector);\n        stream.on(\"error\", (err) => {\n          collector.end();\n          reject(err);\n        });\n        collector.on(\"error\", reject);\n        collector.on(\"finish\", function () {\n          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));\n          resolve(bytes);\n        });\n      });\n    }, \"streamCollector\");\n    var isReadableStreamInstance = /* @__PURE__ */ __name(\n      (stream) => typeof ReadableStream === \"function\" && stream instanceof ReadableStream,\n      \"isReadableStreamInstance\"\n    );\n    async function collectReadableStream(stream) {\n      const chunks = [];\n      const reader = stream.getReader();\n      let isDone = false;\n      let length = 0;\n      while (!isDone) {\n        const { done, value } = await reader.read();\n        if (value) {\n          chunks.push(value);\n          length += value.length;\n        }\n        isDone = done;\n      }\n      const collected = new Uint8Array(length);\n      let offset = 0;\n      for (const chunk of chunks) {\n        collected.set(chunk, offset);\n        offset += chunk.length;\n      }\n      return collected;\n    }\n    __name(collectReadableStream, \"collectReadableStream\");\n  },\n});\n\n// node_modules/@smithy/fetch-http-handler/dist-cjs/index.js\nvar require_dist_cjs29 = __commonJS({\n  \"node_modules/@smithy/fetch-http-handler/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      FetchHttpHandler: () => FetchHttpHandler,\n      keepAliveSupport: () => keepAliveSupport,\n      streamCollector: () => streamCollector,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_protocol_http = require_dist_cjs2();\n    var import_querystring_builder = require_dist_cjs27();\n    function requestTimeout(timeoutInMs = 0) {\n      return new Promise((resolve, reject) => {\n        if (timeoutInMs) {\n          setTimeout(() => {\n            const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);\n            timeoutError.name = \"TimeoutError\";\n            reject(timeoutError);\n          }, timeoutInMs);\n        }\n      });\n    }\n    __name(requestTimeout, \"requestTimeout\");\n    var keepAliveSupport = {\n      supported: void 0,\n    };\n    var _FetchHttpHandler = class _FetchHttpHandler2 {\n      static create(instanceOrOptions) {\n        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === \"function\") {\n          return instanceOrOptions;\n        }\n        return new _FetchHttpHandler2(instanceOrOptions);\n      }\n      constructor(options) {\n        if (typeof options === \"function\") {\n          this.configProvider = options().then((opts) => opts || {});\n        } else {\n          this.config = options ?? {};\n          this.configProvider = Promise.resolve(this.config);\n        }\n        if (keepAliveSupport.supported === void 0) {\n          keepAliveSupport.supported = Boolean(\n            typeof Request !== \"undefined\" && \"keepalive\" in new Request(\"https://[::1]\")\n          );\n        }\n      }\n      destroy() {}\n      async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n          this.config = await this.configProvider;\n        }\n        const requestTimeoutInMs = this.config.requestTimeout;\n        const keepAlive = this.config.keepAlive === true;\n        if (abortSignal == null ? void 0 : abortSignal.aborted) {\n          const abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          return Promise.reject(abortError);\n        }\n        let path = request.path;\n        const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});\n        if (queryString) {\n          path += `?${queryString}`;\n        }\n        if (request.fragment) {\n          path += `#${request.fragment}`;\n        }\n        let auth = \"\";\n        if (request.username != null || request.password != null) {\n          const username = request.username ?? \"\";\n          const password = request.password ?? \"\";\n          auth = `${username}:${password}@`;\n        }\n        const { port, method } = request;\n        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n        const body = method === \"GET\" || method === \"HEAD\" ? void 0 : request.body;\n        const requestOptions = {\n          body,\n          headers: new Headers(request.headers),\n          method,\n        };\n        if (body) {\n          requestOptions.duplex = \"half\";\n        }\n        if (typeof AbortController !== \"undefined\") {\n          requestOptions.signal = abortSignal;\n        }\n        if (keepAliveSupport.supported) {\n          requestOptions.keepalive = keepAlive;\n        }\n        const fetchRequest = new Request(url, requestOptions);\n        const raceOfPromises = [\n          fetch(fetchRequest).then((response) => {\n            const fetchHeaders = response.headers;\n            const transformedHeaders = {};\n            for (const pair of fetchHeaders.entries()) {\n              transformedHeaders[pair[0]] = pair[1];\n            }\n            const hasReadableStream = response.body != void 0;\n            if (!hasReadableStream) {\n              return response.blob().then((body2) => ({\n                response: new import_protocol_http.HttpResponse({\n                  headers: transformedHeaders,\n                  reason: response.statusText,\n                  statusCode: response.status,\n                  body: body2,\n                }),\n              }));\n            }\n            return {\n              response: new import_protocol_http.HttpResponse({\n                headers: transformedHeaders,\n                reason: response.statusText,\n                statusCode: response.status,\n                body: response.body,\n              }),\n            };\n          }),\n          requestTimeout(requestTimeoutInMs),\n        ];\n        if (abortSignal) {\n          raceOfPromises.push(\n            new Promise((resolve, reject) => {\n              const onAbort = /* @__PURE__ */ __name(() => {\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                reject(abortError);\n              }, \"onAbort\");\n              if (typeof abortSignal.addEventListener === \"function\") {\n                abortSignal.addEventListener(\"abort\", onAbort);\n              } else {\n                abortSignal.onabort = onAbort;\n              }\n            })\n          );\n        }\n        return Promise.race(raceOfPromises);\n      }\n      updateHttpClientConfig(key, value) {\n        this.config = void 0;\n        this.configProvider = this.configProvider.then((config) => {\n          config[key] = value;\n          return config;\n        });\n      }\n      httpHandlerConfigs() {\n        return this.config ?? {};\n      }\n    };\n    __name(_FetchHttpHandler, \"FetchHttpHandler\");\n    var FetchHttpHandler = _FetchHttpHandler;\n    var import_util_base64 = require_dist_cjs25();\n    var streamCollector = /* @__PURE__ */ __name((stream) => {\n      if (typeof Blob === \"function\" && stream instanceof Blob) {\n        return collectBlob(stream);\n      }\n      return collectStream(stream);\n    }, \"streamCollector\");\n    async function collectBlob(blob) {\n      const base64 = await readToBase64(blob);\n      const arrayBuffer = (0, import_util_base64.fromBase64)(base64);\n      return new Uint8Array(arrayBuffer);\n    }\n    __name(collectBlob, \"collectBlob\");\n    async function collectStream(stream) {\n      const chunks = [];\n      const reader = stream.getReader();\n      let isDone = false;\n      let length = 0;\n      while (!isDone) {\n        const { done, value } = await reader.read();\n        if (value) {\n          chunks.push(value);\n          length += value.length;\n        }\n        isDone = done;\n      }\n      const collected = new Uint8Array(length);\n      let offset = 0;\n      for (const chunk of chunks) {\n        collected.set(chunk, offset);\n        offset += chunk.length;\n      }\n      return collected;\n    }\n    __name(collectStream, \"collectStream\");\n    function readToBase64(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          if (reader.readyState !== 2) {\n            return reject(new Error(\"Reader aborted too early\"));\n          }\n          const result = reader.result ?? \"\";\n          const commaIndex = result.indexOf(\",\");\n          const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n          resolve(result.substring(dataOffset));\n        };\n        reader.onabort = () => reject(new Error(\"Read aborted\"));\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(blob);\n      });\n    }\n    __name(readToBase64, \"readToBase64\");\n  },\n});\n\n// node_modules/@smithy/util-hex-encoding/dist-cjs/index.js\nvar require_dist_cjs30 = __commonJS({\n  \"node_modules/@smithy/util-hex-encoding/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      fromHex: () => fromHex,\n      toHex: () => toHex,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var SHORT_TO_HEX = {};\n    var HEX_TO_SHORT = {};\n    for (let i = 0; i < 256; i++) {\n      let encodedByte = i.toString(16).toLowerCase();\n      if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n      }\n      SHORT_TO_HEX[i] = encodedByte;\n      HEX_TO_SHORT[encodedByte] = i;\n    }\n    function fromHex(encoded) {\n      if (encoded.length % 2 !== 0) {\n        throw new Error(\"Hex encoded strings must have an even number length\");\n      }\n      const out = new Uint8Array(encoded.length / 2);\n      for (let i = 0; i < encoded.length; i += 2) {\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n          out[i / 2] = HEX_TO_SHORT[encodedByte];\n        } else {\n          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n      }\n      return out;\n    }\n    __name(fromHex, \"fromHex\");\n    function toHex(bytes) {\n      let out = \"\";\n      for (let i = 0; i < bytes.byteLength; i++) {\n        out += SHORT_TO_HEX[bytes[i]];\n      }\n      return out;\n    }\n    __name(toHex, \"toHex\");\n  },\n});\n\n// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js\nvar require_sdk_stream_mixin_browser = __commonJS({\n  \"node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.sdkStreamMixin = void 0;\n    var fetch_http_handler_1 = require_dist_cjs29();\n    var util_base64_1 = require_dist_cjs25();\n    var util_hex_encoding_1 = require_dist_cjs30();\n    var util_utf8_1 = require_dist_cjs24();\n    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\n    var sdkStreamMixin2 = (stream) => {\n      var _a, _b;\n      if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {\n        const name =\n          ((_b =\n            (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null ||\n            _a === void 0\n              ? void 0\n              : _a.constructor) === null || _b === void 0\n            ? void 0\n            : _b.name) || stream;\n        throw new Error(\n          `Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`\n        );\n      }\n      let transformed = false;\n      const transformToByteArray = async () => {\n        if (transformed) {\n          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await (0, fetch_http_handler_1.streamCollector)(stream);\n      };\n      const blobToWebStream = (blob) => {\n        if (typeof blob.stream !== \"function\") {\n          throw new Error(\n            \"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\"\n          );\n        }\n        return blob.stream();\n      };\n      return Object.assign(stream, {\n        transformToByteArray,\n        transformToString: async (encoding) => {\n          const buf = await transformToByteArray();\n          if (encoding === \"base64\") {\n            return (0, util_base64_1.toBase64)(buf);\n          } else if (encoding === \"hex\") {\n            return (0, util_hex_encoding_1.toHex)(buf);\n          } else if (encoding === void 0 || encoding === \"utf8\" || encoding === \"utf-8\") {\n            return (0, util_utf8_1.toUtf8)(buf);\n          } else if (typeof TextDecoder === \"function\") {\n            return new TextDecoder(encoding).decode(buf);\n          } else {\n            throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n          }\n        },\n        transformToWebStream: () => {\n          if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n          }\n          transformed = true;\n          if (isBlobInstance(stream)) {\n            return blobToWebStream(stream);\n          } else if (isReadableStreamInstance(stream)) {\n            return stream;\n          } else {\n            throw new Error(`Cannot transform payload to web stream, got ${stream}`);\n          }\n        },\n      });\n    };\n    exports.sdkStreamMixin = sdkStreamMixin2;\n    var isBlobInstance = (stream) => typeof Blob === \"function\" && stream instanceof Blob;\n    var isReadableStreamInstance = (stream) =>\n      typeof ReadableStream === \"function\" && stream instanceof ReadableStream;\n  },\n});\n\n// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js\nvar require_sdk_stream_mixin = __commonJS({\n  \"node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.sdkStreamMixin = void 0;\n    var node_http_handler_1 = require_dist_cjs28();\n    var util_buffer_from_1 = require_dist_cjs23();\n    var stream_1 = require(\"stream\");\n    var util_1 = require(\"util\");\n    var sdk_stream_mixin_browser_1 = require_sdk_stream_mixin_browser();\n    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\n    var sdkStreamMixin2 = (stream) => {\n      var _a, _b;\n      if (!(stream instanceof stream_1.Readable)) {\n        try {\n          return (0, sdk_stream_mixin_browser_1.sdkStreamMixin)(stream);\n        } catch (e) {\n          const name =\n            ((_b =\n              (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null ||\n              _a === void 0\n                ? void 0\n                : _a.constructor) === null || _b === void 0\n              ? void 0\n              : _b.name) || stream;\n          throw new Error(\n            `Unexpected stream implementation, expect Stream.Readable instance, got ${name}`\n          );\n        }\n      }\n      let transformed = false;\n      const transformToByteArray = async () => {\n        if (transformed) {\n          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await (0, node_http_handler_1.streamCollector)(stream);\n      };\n      return Object.assign(stream, {\n        transformToByteArray,\n        transformToString: async (encoding) => {\n          const buf = await transformToByteArray();\n          if (encoding === void 0 || Buffer.isEncoding(encoding)) {\n            return (0, util_buffer_from_1.fromArrayBuffer)(\n              buf.buffer,\n              buf.byteOffset,\n              buf.byteLength\n            ).toString(encoding);\n          } else {\n            const decoder = new util_1.TextDecoder(encoding);\n            return decoder.decode(buf);\n          }\n        },\n        transformToWebStream: () => {\n          if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n          }\n          if (stream.readableFlowing !== null) {\n            throw new Error(\"The stream has been consumed by other callbacks.\");\n          }\n          if (typeof stream_1.Readable.toWeb !== \"function\") {\n            throw new Error(\n              \"Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.\"\n            );\n          }\n          transformed = true;\n          return stream_1.Readable.toWeb(stream);\n        },\n      });\n    };\n    exports.sdkStreamMixin = sdkStreamMixin2;\n  },\n});\n\n// node_modules/@smithy/util-stream/dist-cjs/index.js\nvar require_dist_cjs31 = __commonJS({\n  \"node_modules/@smithy/util-stream/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __reExport = (target, mod, secondTarget) => (\n      __copyProps2(target, mod, \"default\"),\n      secondTarget && __copyProps2(secondTarget, mod, \"default\")\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      Uint8ArrayBlobAdapter: () => Uint8ArrayBlobAdapter,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_util_base64 = require_dist_cjs25();\n    var import_util_utf8 = require_dist_cjs24();\n    function transformToString(payload, encoding = \"utf-8\") {\n      if (encoding === \"base64\") {\n        return (0, import_util_base64.toBase64)(payload);\n      }\n      return (0, import_util_utf8.toUtf8)(payload);\n    }\n    __name(transformToString, \"transformToString\");\n    function transformFromString(str, encoding) {\n      if (encoding === \"base64\") {\n        return Uint8ArrayBlobAdapter.mutate((0, import_util_base64.fromBase64)(str));\n      }\n      return Uint8ArrayBlobAdapter.mutate((0, import_util_utf8.fromUtf8)(str));\n    }\n    __name(transformFromString, \"transformFromString\");\n    var _Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter2 extends Uint8Array {\n      static fromString(source, encoding = \"utf-8\") {\n        switch (typeof source) {\n          case \"string\":\n            return transformFromString(source, encoding);\n          default:\n            throw new Error(\n              `Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`\n            );\n        }\n      }\n      static mutate(source) {\n        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter2.prototype);\n        return source;\n      }\n      transformToString(encoding = \"utf-8\") {\n        return transformToString(this, encoding);\n      }\n    };\n    __name(_Uint8ArrayBlobAdapter, \"Uint8ArrayBlobAdapter\");\n    var Uint8ArrayBlobAdapter = _Uint8ArrayBlobAdapter;\n    __reExport(src_exports, require_getAwsChunkedEncodingStream(), module2.exports);\n    __reExport(src_exports, require_sdk_stream_mixin(), module2.exports);\n  },\n});\n\n// node_modules/@smithy/smithy-client/dist-cjs/index.js\nvar require_dist_cjs32 = __commonJS({\n  \"node_modules/@smithy/smithy-client/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      Client: () => Client,\n      Command: () => Command,\n      LazyJsonString: () => LazyJsonString,\n      NoOpLogger: () => NoOpLogger,\n      SENSITIVE_STRING: () => SENSITIVE_STRING,\n      ServiceException: () => ServiceException,\n      StringWrapper: () => StringWrapper,\n      _json: () => _json,\n      collectBody: () => collectBody,\n      convertMap: () => convertMap,\n      createAggregatedClient: () => createAggregatedClient,\n      dateToUtcString: () => dateToUtcString,\n      decorateServiceException: () => decorateServiceException,\n      emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,\n      expectBoolean: () => expectBoolean,\n      expectByte: () => expectByte,\n      expectFloat32: () => expectFloat32,\n      expectInt: () => expectInt,\n      expectInt32: () => expectInt32,\n      expectLong: () => expectLong,\n      expectNonNull: () => expectNonNull,\n      expectNumber: () => expectNumber,\n      expectObject: () => expectObject,\n      expectShort: () => expectShort,\n      expectString: () => expectString,\n      expectUnion: () => expectUnion,\n      extendedEncodeURIComponent: () => extendedEncodeURIComponent,\n      getArrayIfSingleItem: () => getArrayIfSingleItem,\n      getDefaultClientConfiguration: () => getDefaultClientConfiguration,\n      getDefaultExtensionConfiguration: () => getDefaultExtensionConfiguration,\n      getValueFromTextNode: () => getValueFromTextNode,\n      handleFloat: () => handleFloat,\n      limitedParseDouble: () => limitedParseDouble,\n      limitedParseFloat: () => limitedParseFloat,\n      limitedParseFloat32: () => limitedParseFloat32,\n      loadConfigsForDefaultMode: () => loadConfigsForDefaultMode,\n      logger: () => logger,\n      map: () => map,\n      parseBoolean: () => parseBoolean,\n      parseEpochTimestamp: () => parseEpochTimestamp,\n      parseRfc3339DateTime: () => parseRfc3339DateTime,\n      parseRfc3339DateTimeWithOffset: () => parseRfc3339DateTimeWithOffset,\n      parseRfc7231DateTime: () => parseRfc7231DateTime,\n      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,\n      resolvedPath: () => resolvedPath,\n      serializeDateTime: () => serializeDateTime,\n      serializeFloat: () => serializeFloat,\n      splitEvery: () => splitEvery,\n      strictParseByte: () => strictParseByte,\n      strictParseDouble: () => strictParseDouble,\n      strictParseFloat: () => strictParseFloat,\n      strictParseFloat32: () => strictParseFloat32,\n      strictParseInt: () => strictParseInt,\n      strictParseInt32: () => strictParseInt32,\n      strictParseLong: () => strictParseLong,\n      strictParseShort: () => strictParseShort,\n      take: () => take,\n      throwDefaultError: () => throwDefaultError,\n      withBaseException: () => withBaseException,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var _NoOpLogger = class _NoOpLogger {\n      trace() {}\n      debug() {}\n      info() {}\n      warn() {}\n      error() {}\n    };\n    __name(_NoOpLogger, \"NoOpLogger\");\n    var NoOpLogger = _NoOpLogger;\n    var import_middleware_stack = require_dist_cjs21();\n    var _Client = class _Client {\n      constructor(config) {\n        this.middlewareStack = (0, import_middleware_stack.constructStack)();\n        this.config = config;\n      }\n      send(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : void 0;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n          handler(command)\n            .then(\n              (result) => callback(null, result.output),\n              (err) => callback(err)\n            )\n            .catch(() => {});\n        } else {\n          return handler(command).then((result) => result.output);\n        }\n      }\n      destroy() {\n        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();\n      }\n    };\n    __name(_Client, \"Client\");\n    var Client = _Client;\n    var import_util_stream = require_dist_cjs31();\n    var collectBody = /* @__PURE__ */ __name(async (streamBody = new Uint8Array(), context) => {\n      if (streamBody instanceof Uint8Array) {\n        return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);\n      }\n      if (!streamBody) {\n        return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array());\n      }\n      const fromContext = context.streamCollector(streamBody);\n      return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);\n    }, \"collectBody\");\n    var import_types = require_dist_cjs();\n    var _Command = class _Command {\n      constructor() {\n        this.middlewareStack = (0, import_middleware_stack.constructStack)();\n      }\n      static classBuilder() {\n        return new ClassBuilder();\n      }\n      resolveMiddlewareWithContext(\n        clientStack,\n        configuration,\n        options,\n        {\n          middlewareFn,\n          clientName,\n          commandName,\n          inputFilterSensitiveLog,\n          outputFilterSensitiveLog,\n          smithyContext,\n          additionalContext,\n          CommandCtor,\n        }\n      ) {\n        for (const mw of middlewareFn.bind(this)(\n          CommandCtor,\n          clientStack,\n          configuration,\n          options\n        )) {\n          this.middlewareStack.use(mw);\n        }\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger: logger2 } = configuration;\n        const handlerExecutionContext = {\n          logger: logger2,\n          clientName,\n          commandName,\n          inputFilterSensitiveLog,\n          outputFilterSensitiveLog,\n          [import_types.SMITHY_CONTEXT_KEY]: {\n            ...smithyContext,\n          },\n          ...additionalContext,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve(\n          (request) => requestHandler.handle(request.request, options || {}),\n          handlerExecutionContext\n        );\n      }\n    };\n    __name(_Command, \"Command\");\n    var Command = _Command;\n    var _ClassBuilder = class _ClassBuilder {\n      constructor() {\n        this._init = () => {};\n        this._ep = {};\n        this._middlewareFn = () => [];\n        this._commandName = \"\";\n        this._clientName = \"\";\n        this._additionalContext = {};\n        this._smithyContext = {};\n        this._inputFilterSensitiveLog = (_) => _;\n        this._outputFilterSensitiveLog = (_) => _;\n        this._serializer = null;\n        this._deserializer = null;\n      }\n      init(cb) {\n        this._init = cb;\n      }\n      ep(endpointParameterInstructions) {\n        this._ep = endpointParameterInstructions;\n        return this;\n      }\n      m(middlewareSupplier) {\n        this._middlewareFn = middlewareSupplier;\n        return this;\n      }\n      s(service, operation, smithyContext = {}) {\n        this._smithyContext = {\n          service,\n          operation,\n          ...smithyContext,\n        };\n        return this;\n      }\n      c(additionalContext = {}) {\n        this._additionalContext = additionalContext;\n        return this;\n      }\n      n(clientName, commandName) {\n        this._clientName = clientName;\n        this._commandName = commandName;\n        return this;\n      }\n      f(inputFilter = (_) => _, outputFilter = (_) => _) {\n        this._inputFilterSensitiveLog = inputFilter;\n        this._outputFilterSensitiveLog = outputFilter;\n        return this;\n      }\n      ser(serializer) {\n        this._serializer = serializer;\n        return this;\n      }\n      de(deserializer) {\n        this._deserializer = deserializer;\n        return this;\n      }\n      build() {\n        var _a;\n        const closure = this;\n        let CommandRef;\n        return (CommandRef =\n          ((_a = class extends Command {\n            constructor(...[input]) {\n              super();\n              this.serialize = closure._serializer;\n              this.deserialize = closure._deserializer;\n              this.input = input ?? {};\n              closure._init(this);\n            }\n            static getEndpointParameterInstructions() {\n              return closure._ep;\n            }\n            resolveMiddleware(stack, configuration, options) {\n              return this.resolveMiddlewareWithContext(stack, configuration, options, {\n                CommandCtor: CommandRef,\n                middlewareFn: closure._middlewareFn,\n                clientName: closure._clientName,\n                commandName: closure._commandName,\n                inputFilterSensitiveLog: closure._inputFilterSensitiveLog,\n                outputFilterSensitiveLog: closure._outputFilterSensitiveLog,\n                smithyContext: closure._smithyContext,\n                additionalContext: closure._additionalContext,\n              });\n            }\n          }),\n          __name(_a, \"CommandRef\"),\n          _a));\n      }\n    };\n    __name(_ClassBuilder, \"ClassBuilder\");\n    var ClassBuilder = _ClassBuilder;\n    var SENSITIVE_STRING = \"***SensitiveInformation***\";\n    var createAggregatedClient = /* @__PURE__ */ __name((commands, Client2) => {\n      for (const command of Object.keys(commands)) {\n        const CommandCtor = commands[command];\n        const methodImpl = /* @__PURE__ */ __name(async function (args, optionsOrCb, cb) {\n          const command2 = new CommandCtor(args);\n          if (typeof optionsOrCb === \"function\") {\n            this.send(command2, optionsOrCb);\n          } else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);\n            this.send(command2, optionsOrCb || {}, cb);\n          } else {\n            return this.send(command2, optionsOrCb);\n          }\n        }, \"methodImpl\");\n        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, \"\");\n        Client2.prototype[methodName] = methodImpl;\n      }\n    }, \"createAggregatedClient\");\n    var parseBoolean = /* @__PURE__ */ __name((value) => {\n      switch (value) {\n        case \"true\":\n          return true;\n        case \"false\":\n          return false;\n        default:\n          throw new Error(`Unable to parse boolean value \"${value}\"`);\n      }\n    }, \"parseBoolean\");\n    var expectBoolean = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      if (typeof value === \"number\") {\n        if (value === 0 || value === 1) {\n          logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (value === 0) {\n          return false;\n        }\n        if (value === 1) {\n          return true;\n        }\n      }\n      if (typeof value === \"string\") {\n        const lower = value.toLowerCase();\n        if (lower === \"false\" || lower === \"true\") {\n          logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (lower === \"false\") {\n          return false;\n        }\n        if (lower === \"true\") {\n          return true;\n        }\n      }\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);\n    }, \"expectBoolean\");\n    var expectNumber = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      if (typeof value === \"string\") {\n        const parsed = parseFloat(value);\n        if (!Number.isNaN(parsed)) {\n          if (String(parsed) !== String(value)) {\n            logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));\n          }\n          return parsed;\n        }\n      }\n      if (typeof value === \"number\") {\n        return value;\n      }\n      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);\n    }, \"expectNumber\");\n    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\n    var expectFloat32 = /* @__PURE__ */ __name((value) => {\n      const expected = expectNumber(value);\n      if (\n        expected !== void 0 &&\n        !Number.isNaN(expected) &&\n        expected !== Infinity &&\n        expected !== -Infinity\n      ) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n          throw new TypeError(`Expected 32-bit float, got ${value}`);\n        }\n      }\n      return expected;\n    }, \"expectFloat32\");\n    var expectLong = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n      }\n      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);\n    }, \"expectLong\");\n    var expectInt = expectLong;\n    var expectInt32 = /* @__PURE__ */ __name((value) => expectSizedInt(value, 32), \"expectInt32\");\n    var expectShort = /* @__PURE__ */ __name((value) => expectSizedInt(value, 16), \"expectShort\");\n    var expectByte = /* @__PURE__ */ __name((value) => expectSizedInt(value, 8), \"expectByte\");\n    var expectSizedInt = /* @__PURE__ */ __name((value, size) => {\n      const expected = expectLong(value);\n      if (expected !== void 0 && castInt(expected, size) !== expected) {\n        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n      }\n      return expected;\n    }, \"expectSizedInt\");\n    var castInt = /* @__PURE__ */ __name((value, size) => {\n      switch (size) {\n        case 32:\n          return Int32Array.of(value)[0];\n        case 16:\n          return Int16Array.of(value)[0];\n        case 8:\n          return Int8Array.of(value)[0];\n      }\n    }, \"castInt\");\n    var expectNonNull = /* @__PURE__ */ __name((value, location) => {\n      if (value === null || value === void 0) {\n        if (location) {\n          throw new TypeError(`Expected a non-null value for ${location}`);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n      }\n      return value;\n    }, \"expectNonNull\");\n    var expectObject = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n      }\n      const receivedType = Array.isArray(value) ? \"array\" : typeof value;\n      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);\n    }, \"expectObject\");\n    var expectString = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      if (typeof value === \"string\") {\n        return value;\n      }\n      if ([\"boolean\", \"number\", \"bigint\"].includes(typeof value)) {\n        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));\n        return String(value);\n      }\n      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);\n    }, \"expectString\");\n    var expectUnion = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      const asObject = expectObject(value);\n      const setKeys = Object.entries(asObject)\n        .filter(([, v]) => v != null)\n        .map(([k]) => k);\n      if (setKeys.length === 0) {\n        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);\n      }\n      if (setKeys.length > 1) {\n        throw new TypeError(\n          `Unions must have exactly one non-null member. Keys ${setKeys} were not null.`\n        );\n      }\n      return asObject;\n    }, \"expectUnion\");\n    var strictParseDouble = /* @__PURE__ */ __name((value) => {\n      if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n      }\n      return expectNumber(value);\n    }, \"strictParseDouble\");\n    var strictParseFloat = strictParseDouble;\n    var strictParseFloat32 = /* @__PURE__ */ __name((value) => {\n      if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n      }\n      return expectFloat32(value);\n    }, \"strictParseFloat32\");\n    var NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\n    var parseNumber = /* @__PURE__ */ __name((value) => {\n      const matches = value.match(NUMBER_REGEX);\n      if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(`Expected real number, got implicit NaN`);\n      }\n      return parseFloat(value);\n    }, \"parseNumber\");\n    var limitedParseDouble = /* @__PURE__ */ __name((value) => {\n      if (typeof value == \"string\") {\n        return parseFloatString(value);\n      }\n      return expectNumber(value);\n    }, \"limitedParseDouble\");\n    var handleFloat = limitedParseDouble;\n    var limitedParseFloat = limitedParseDouble;\n    var limitedParseFloat32 = /* @__PURE__ */ __name((value) => {\n      if (typeof value == \"string\") {\n        return parseFloatString(value);\n      }\n      return expectFloat32(value);\n    }, \"limitedParseFloat32\");\n    var parseFloatString = /* @__PURE__ */ __name((value) => {\n      switch (value) {\n        case \"NaN\":\n          return NaN;\n        case \"Infinity\":\n          return Infinity;\n        case \"-Infinity\":\n          return -Infinity;\n        default:\n          throw new Error(`Unable to parse float value: ${value}`);\n      }\n    }, \"parseFloatString\");\n    var strictParseLong = /* @__PURE__ */ __name((value) => {\n      if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n      }\n      return expectLong(value);\n    }, \"strictParseLong\");\n    var strictParseInt = strictParseLong;\n    var strictParseInt32 = /* @__PURE__ */ __name((value) => {\n      if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n      }\n      return expectInt32(value);\n    }, \"strictParseInt32\");\n    var strictParseShort = /* @__PURE__ */ __name((value) => {\n      if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n      }\n      return expectShort(value);\n    }, \"strictParseShort\");\n    var strictParseByte = /* @__PURE__ */ __name((value) => {\n      if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n      }\n      return expectByte(value);\n    }, \"strictParseByte\");\n    var stackTraceWarning = /* @__PURE__ */ __name((message) => {\n      return String(new TypeError(message).stack || message)\n        .split(\"\\n\")\n        .slice(0, 5)\n        .filter((s) => !s.includes(\"stackTraceWarning\"))\n        .join(\"\\n\");\n    }, \"stackTraceWarning\");\n    var logger = {\n      warn: console.warn,\n    };\n    var DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    var MONTHS = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    function dateToUtcString(date) {\n      const year = date.getUTCFullYear();\n      const month = date.getUTCMonth();\n      const dayOfWeek = date.getUTCDay();\n      const dayOfMonthInt = date.getUTCDate();\n      const hoursInt = date.getUTCHours();\n      const minutesInt = date.getUTCMinutes();\n      const secondsInt = date.getUTCSeconds();\n      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n    }\n    __name(dateToUtcString, \"dateToUtcString\");\n    var RFC3339 = new RegExp(\n      /^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/\n    );\n    var parseRfc3339DateTime = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n      }\n      const match = RFC3339.exec(value);\n      if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n      }\n      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n      const year = strictParseShort(stripLeadingZeroes(yearStr));\n      const month = parseDateValue(monthStr, \"month\", 1, 12);\n      const day = parseDateValue(dayStr, \"day\", 1, 31);\n      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n    }, \"parseRfc3339DateTime\");\n    var RFC3339_WITH_OFFSET = new RegExp(\n      /^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?(([-+]\\d{2}:\\d{2})|[zZ])$/\n    );\n    var parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n      }\n      const match = RFC3339_WITH_OFFSET.exec(value);\n      if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n      }\n      const [\n        _,\n        yearStr,\n        monthStr,\n        dayStr,\n        hours,\n        minutes,\n        seconds,\n        fractionalMilliseconds,\n        offsetStr,\n      ] = match;\n      const year = strictParseShort(stripLeadingZeroes(yearStr));\n      const month = parseDateValue(monthStr, \"month\", 1, 12);\n      const day = parseDateValue(dayStr, \"day\", 1, 31);\n      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n      if (offsetStr.toUpperCase() != \"Z\") {\n        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));\n      }\n      return date;\n    }, \"parseRfc3339DateTimeWithOffset\");\n    var IMF_FIXDATE = new RegExp(\n      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/\n    );\n    var RFC_850_DATE = new RegExp(\n      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/\n    );\n    var ASC_TIME = new RegExp(\n      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/\n    );\n    var parseRfc7231DateTime = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n      }\n      let match = IMF_FIXDATE.exec(value);\n      if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] =\n          match;\n        return buildDate(\n          strictParseShort(stripLeadingZeroes(yearStr)),\n          parseMonthByShortName(monthStr),\n          parseDateValue(dayStr, \"day\", 1, 31),\n          { hours, minutes, seconds, fractionalMilliseconds }\n        );\n      }\n      match = RFC_850_DATE.exec(value);\n      if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] =\n          match;\n        return adjustRfc850Year(\n          buildDate(\n            parseTwoDigitYear(yearStr),\n            parseMonthByShortName(monthStr),\n            parseDateValue(dayStr, \"day\", 1, 31),\n            {\n              hours,\n              minutes,\n              seconds,\n              fractionalMilliseconds,\n            }\n          )\n        );\n      }\n      match = ASC_TIME.exec(value);\n      if (match) {\n        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] =\n          match;\n        return buildDate(\n          strictParseShort(stripLeadingZeroes(yearStr)),\n          parseMonthByShortName(monthStr),\n          parseDateValue(dayStr.trimLeft(), \"day\", 1, 31),\n          { hours, minutes, seconds, fractionalMilliseconds }\n        );\n      }\n      throw new TypeError(\"Invalid RFC-7231 date-time value\");\n    }, \"parseRfc7231DateTime\");\n    var parseEpochTimestamp = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return void 0;\n      }\n      let valueAsDouble;\n      if (typeof value === \"number\") {\n        valueAsDouble = value;\n      } else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n      } else {\n        throw new TypeError(\n          \"Epoch timestamps must be expressed as floating point numbers or their string representation\"\n        );\n      }\n      if (\n        Number.isNaN(valueAsDouble) ||\n        valueAsDouble === Infinity ||\n        valueAsDouble === -Infinity\n      ) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n      }\n      return new Date(Math.round(valueAsDouble * 1e3));\n    }, \"parseEpochTimestamp\");\n    var buildDate = /* @__PURE__ */ __name((year, month, day, time) => {\n      const adjustedMonth = month - 1;\n      validateDayOfMonth(year, adjustedMonth, day);\n      return new Date(\n        Date.UTC(\n          year,\n          adjustedMonth,\n          day,\n          parseDateValue(time.hours, \"hour\", 0, 23),\n          parseDateValue(time.minutes, \"minute\", 0, 59),\n          parseDateValue(time.seconds, \"seconds\", 0, 60),\n          parseMilliseconds(time.fractionalMilliseconds)\n        )\n      );\n    }, \"buildDate\");\n    var parseTwoDigitYear = /* @__PURE__ */ __name((value) => {\n      const thisYear = /* @__PURE__ */ new Date().getUTCFullYear();\n      const valueInThisCentury =\n        Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n      if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n      }\n      return valueInThisCentury;\n    }, \"parseTwoDigitYear\");\n    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;\n    var adjustRfc850Year = /* @__PURE__ */ __name((input) => {\n      if (input.getTime() - /* @__PURE__ */ new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(\n          Date.UTC(\n            input.getUTCFullYear() - 100,\n            input.getUTCMonth(),\n            input.getUTCDate(),\n            input.getUTCHours(),\n            input.getUTCMinutes(),\n            input.getUTCSeconds(),\n            input.getUTCMilliseconds()\n          )\n        );\n      }\n      return input;\n    }, \"adjustRfc850Year\");\n    var parseMonthByShortName = /* @__PURE__ */ __name((value) => {\n      const monthIdx = MONTHS.indexOf(value);\n      if (monthIdx < 0) {\n        throw new TypeError(`Invalid month: ${value}`);\n      }\n      return monthIdx + 1;\n    }, \"parseMonthByShortName\");\n    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    var validateDayOfMonth = /* @__PURE__ */ __name((year, month, day) => {\n      let maxDays = DAYS_IN_MONTH[month];\n      if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n      }\n      if (day > maxDays) {\n        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n      }\n    }, \"validateDayOfMonth\");\n    var isLeapYear = /* @__PURE__ */ __name((year) => {\n      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    }, \"isLeapYear\");\n    var parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper) => {\n      const dateVal = strictParseByte(stripLeadingZeroes(value));\n      if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n      }\n      return dateVal;\n    }, \"parseDateValue\");\n    var parseMilliseconds = /* @__PURE__ */ __name((value) => {\n      if (value === null || value === void 0) {\n        return 0;\n      }\n      return strictParseFloat32(\"0.\" + value) * 1e3;\n    }, \"parseMilliseconds\");\n    var parseOffsetToMilliseconds = /* @__PURE__ */ __name((value) => {\n      const directionStr = value[0];\n      let direction = 1;\n      if (directionStr == \"+\") {\n        direction = 1;\n      } else if (directionStr == \"-\") {\n        direction = -1;\n      } else {\n        throw new TypeError(`Offset direction, ${directionStr}, must be \"+\" or \"-\"`);\n      }\n      const hour = Number(value.substring(1, 3));\n      const minute = Number(value.substring(4, 6));\n      return direction * (hour * 60 + minute) * 60 * 1e3;\n    }, \"parseOffsetToMilliseconds\");\n    var stripLeadingZeroes = /* @__PURE__ */ __name((value) => {\n      let idx = 0;\n      while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n      }\n      if (idx === 0) {\n        return value;\n      }\n      return value.slice(idx);\n    }, \"stripLeadingZeroes\");\n    var _ServiceException = class _ServiceException2 extends Error {\n      constructor(options) {\n        super(options.message);\n        Object.setPrototypeOf(this, _ServiceException2.prototype);\n        this.name = options.name;\n        this.$fault = options.$fault;\n        this.$metadata = options.$metadata;\n      }\n    };\n    __name(_ServiceException, \"ServiceException\");\n    var ServiceException = _ServiceException;\n    var decorateServiceException = /* @__PURE__ */ __name((exception, additions = {}) => {\n      Object.entries(additions)\n        .filter(([, v]) => v !== void 0)\n        .forEach(([k, v]) => {\n          if (exception[k] == void 0 || exception[k] === \"\") {\n            exception[k] = v;\n          }\n        });\n      const message = exception.message || exception.Message || \"UnknownError\";\n      exception.message = message;\n      delete exception.Message;\n      return exception;\n    }, \"decorateServiceException\");\n    var throwDefaultError = /* @__PURE__ */ __name(\n      ({ output, parsedBody, exceptionCtor, errorCode }) => {\n        const $metadata = deserializeMetadata(output);\n        const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + \"\" : void 0;\n        const response = new exceptionCtor({\n          name:\n            (parsedBody == null ? void 0 : parsedBody.code) ||\n            (parsedBody == null ? void 0 : parsedBody.Code) ||\n            errorCode ||\n            statusCode ||\n            \"UnknownError\",\n          $fault: \"client\",\n          $metadata,\n        });\n        throw decorateServiceException(response, parsedBody);\n      },\n      \"throwDefaultError\"\n    );\n    var withBaseException = /* @__PURE__ */ __name((ExceptionCtor) => {\n      return ({ output, parsedBody, errorCode }) => {\n        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });\n      };\n    }, \"withBaseException\");\n    var deserializeMetadata = /* @__PURE__ */ __name(\n      (output) => ({\n        httpStatusCode: output.statusCode,\n        requestId:\n          output.headers[\"x-amzn-requestid\"] ??\n          output.headers[\"x-amzn-request-id\"] ??\n          output.headers[\"x-amz-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n      }),\n      \"deserializeMetadata\"\n    );\n    var loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode) => {\n      switch (mode) {\n        case \"standard\":\n          return {\n            retryMode: \"standard\",\n            connectionTimeout: 3100,\n          };\n        case \"in-region\":\n          return {\n            retryMode: \"standard\",\n            connectionTimeout: 1100,\n          };\n        case \"cross-region\":\n          return {\n            retryMode: \"standard\",\n            connectionTimeout: 3100,\n          };\n        case \"mobile\":\n          return {\n            retryMode: \"standard\",\n            connectionTimeout: 3e4,\n          };\n        default:\n          return {};\n      }\n    }, \"loadConfigsForDefaultMode\");\n    var warningEmitted = false;\n    var emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version) => {\n      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\".\"))) < 16) {\n        warningEmitted = true;\n      }\n    }, \"emitWarningIfUnsupportedVersion\");\n    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      const checksumAlgorithms = [];\n      for (const id in import_types.AlgorithmId) {\n        const algorithmId = import_types.AlgorithmId[id];\n        if (runtimeConfig[algorithmId] === void 0) {\n          continue;\n        }\n        checksumAlgorithms.push({\n          algorithmId: () => algorithmId,\n          checksumConstructor: () => runtimeConfig[algorithmId],\n        });\n      }\n      return {\n        _checksumAlgorithms: checksumAlgorithms,\n        addChecksumAlgorithm(algo) {\n          this._checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms() {\n          return this._checksumAlgorithms;\n        },\n      };\n    }, \"getChecksumConfiguration\");\n    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {\n      const runtimeConfig = {};\n      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n      });\n      return runtimeConfig;\n    }, \"resolveChecksumRuntimeConfig\");\n    var getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      let _retryStrategy = runtimeConfig.retryStrategy;\n      return {\n        setRetryStrategy(retryStrategy) {\n          _retryStrategy = retryStrategy;\n        },\n        retryStrategy() {\n          return _retryStrategy;\n        },\n      };\n    }, \"getRetryConfiguration\");\n    var resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration) => {\n      const runtimeConfig = {};\n      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();\n      return runtimeConfig;\n    }, \"resolveRetryRuntimeConfig\");\n    var getDefaultExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      return {\n        ...getChecksumConfiguration(runtimeConfig),\n        ...getRetryConfiguration(runtimeConfig),\n      };\n    }, \"getDefaultExtensionConfiguration\");\n    var getDefaultClientConfiguration = getDefaultExtensionConfiguration;\n    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {\n      return {\n        ...resolveChecksumRuntimeConfig(config),\n        ...resolveRetryRuntimeConfig(config),\n      };\n    }, \"resolveDefaultRuntimeConfig\");\n    function extendedEncodeURIComponent(str) {\n      return encodeURIComponent(str).replace(/[!'()*]/g, (c) => \"%\" + c.charCodeAt(0).toString(16).toUpperCase());\n    }\n    __name(extendedEncodeURIComponent, \"extendedEncodeURIComponent\");\n    var getArrayIfSingleItem = /* @__PURE__ */ __name(\n      (mayBeArray) => (Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray]),\n      \"getArrayIfSingleItem\"\n    );\n    var getValueFromTextNode = /* @__PURE__ */ __name((obj) => {\n      const textNodeName = \"#text\";\n      for (const key in obj) {\n        if (Object.hasOwn(obj, key) && obj[key][textNodeName] !== void 0) {\n          obj[key] = obj[key][textNodeName];\n        } else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n          obj[key] = getValueFromTextNode(obj[key]);\n        }\n      }\n      return obj;\n    }, \"getValueFromTextNode\");\n    var StringWrapper = /* @__PURE__ */ __name(function () {\n      const Class = Object.getPrototypeOf(this).constructor;\n      const Constructor = Function.bind.apply(String, [null, ...arguments]);\n      const instance = new Constructor();\n      Object.setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, \"StringWrapper\");\n    StringWrapper.prototype = Object.create(String.prototype, {\n      constructor: {\n        value: StringWrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n    });\n    Object.setPrototypeOf(StringWrapper, String);\n    var _LazyJsonString = class _LazyJsonString2 extends StringWrapper {\n      deserializeJSON() {\n        return JSON.parse(super.toString());\n      }\n      toJSON() {\n        return super.toString();\n      }\n      static fromObject(object) {\n        if (object instanceof _LazyJsonString2) {\n          return object;\n        } else if (object instanceof String || typeof object === \"string\") {\n          return new _LazyJsonString2(object);\n        }\n        return new _LazyJsonString2(JSON.stringify(object));\n      }\n    };\n    __name(_LazyJsonString, \"LazyJsonString\");\n    var LazyJsonString = _LazyJsonString;\n    function map(arg0, arg1, arg2) {\n      let target;\n      let filter;\n      let instructions;\n      if (typeof arg1 === \"undefined\" && typeof arg2 === \"undefined\") {\n        target = {};\n        instructions = arg0;\n      } else {\n        target = arg0;\n        if (typeof arg1 === \"function\") {\n          filter = arg1;\n          instructions = arg2;\n          return mapWithFilter(target, filter, instructions);\n        } else {\n          instructions = arg1;\n        }\n      }\n      for (const key of Object.keys(instructions)) {\n        if (!Array.isArray(instructions[key])) {\n          target[key] = instructions[key];\n          continue;\n        }\n        applyInstruction(target, null, instructions, key);\n      }\n      return target;\n    }\n    __name(map, \"map\");\n    var convertMap = /* @__PURE__ */ __name((target) => {\n      const output = {};\n      for (const [k, v] of Object.entries(target || {})) {\n        output[k] = [, v];\n      }\n      return output;\n    }, \"convertMap\");\n    var take = /* @__PURE__ */ __name((source, instructions) => {\n      const out = {};\n      for (const key in instructions) {\n        applyInstruction(out, source, instructions, key);\n      }\n      return out;\n    }, \"take\");\n    var mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions) => {\n      return map(\n        target,\n        Object.entries(instructions).reduce((_instructions, [key, value]) => {\n          if (Array.isArray(value)) {\n            _instructions[key] = value;\n          } else {\n            if (typeof value === \"function\") {\n              _instructions[key] = [filter, value()];\n            } else {\n              _instructions[key] = [filter, value];\n            }\n          }\n          return _instructions;\n        }, {})\n      );\n    }, \"mapWithFilter\");\n    var applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey) => {\n      if (source !== null) {\n        let instruction = instructions[targetKey];\n        if (typeof instruction === \"function\") {\n          instruction = [, instruction];\n        }\n        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;\n        if (\n          (typeof filter2 === \"function\" && filter2(source[sourceKey])) ||\n          (typeof filter2 !== \"function\" && !!filter2)\n        ) {\n          target[targetKey] = valueFn(source[sourceKey]);\n        }\n        return;\n      }\n      const [filter, value] = instructions[targetKey];\n      if (typeof value === \"function\") {\n        let _value;\n        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;\n        const customFilterPassed =\n          (typeof filter === \"function\" && !!filter(void 0)) ||\n          (typeof filter !== \"function\" && !!filter);\n        if (defaultFilterPassed) {\n          target[targetKey] = _value;\n        } else if (customFilterPassed) {\n          target[targetKey] = value();\n        }\n      } else {\n        const defaultFilterPassed = filter === void 0 && value != null;\n        const customFilterPassed =\n          (typeof filter === \"function\" && !!filter(value)) ||\n          (typeof filter !== \"function\" && !!filter);\n        if (defaultFilterPassed || customFilterPassed) {\n          target[targetKey] = value;\n        }\n      }\n    }, \"applyInstruction\");\n    var nonNullish = /* @__PURE__ */ __name((_) => _ != null, \"nonNullish\");\n    var pass = /* @__PURE__ */ __name((_) => _, \"pass\");\n    var resolvedPath = /* @__PURE__ */ __name(\n      (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {\n        if (input != null && input[memberName] !== void 0) {\n          const labelValue = labelValueProvider();\n          if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: \" + memberName + \".\");\n          }\n          resolvedPath2 = resolvedPath2.replace(\n            uriLabel,\n            isGreedyLabel\n              ? labelValue\n                  .split(\"/\")\n                  .map((segment) => extendedEncodeURIComponent(segment))\n                  .join(\"/\")\n              : extendedEncodeURIComponent(labelValue)\n          );\n        } else {\n          throw new Error(\"No value provided for input HTTP label: \" + memberName + \".\");\n        }\n        return resolvedPath2;\n      },\n      \"resolvedPath\"\n    );\n    var serializeFloat = /* @__PURE__ */ __name((value) => {\n      if (value !== value) {\n        return \"NaN\";\n      }\n      switch (value) {\n        case Infinity:\n          return \"Infinity\";\n        case -Infinity:\n          return \"-Infinity\";\n        default:\n          return value;\n      }\n    }, \"serializeFloat\");\n    var serializeDateTime = /* @__PURE__ */ __name(\n      (date) => date.toISOString().replace(\".000Z\", \"Z\"),\n      \"serializeDateTime\"\n    );\n    var _json = /* @__PURE__ */ __name((obj) => {\n      if (obj == null) {\n        return {};\n      }\n      if (Array.isArray(obj)) {\n        return obj.filter((_) => _ != null).map(_json);\n      }\n      if (typeof obj === \"object\") {\n        const target = {};\n        for (const key of Object.keys(obj)) {\n          if (obj[key] == null) {\n            continue;\n          }\n          target[key] = _json(obj[key]);\n        }\n        return target;\n      }\n      return obj;\n    }, \"_json\");\n    function splitEvery(value, delimiter, numDelimiters) {\n      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n        throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n      }\n      const segments = value.split(delimiter);\n      if (numDelimiters === 1) {\n        return segments;\n      }\n      const compoundSegments = [];\n      let currentSegment = \"\";\n      for (let i = 0; i < segments.length; i++) {\n        if (currentSegment === \"\") {\n          currentSegment = segments[i];\n        } else {\n          currentSegment += delimiter + segments[i];\n        }\n        if ((i + 1) % numDelimiters === 0) {\n          compoundSegments.push(currentSegment);\n          currentSegment = \"\";\n        }\n      }\n      if (currentSegment !== \"\") {\n        compoundSegments.push(currentSegment);\n      }\n      return compoundSegments;\n    }\n    __name(splitEvery, \"splitEvery\");\n  },\n});\n\n// node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js\nvar require_isStreamingPayload = __commonJS({\n  \"node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js\"(\n    exports\n  ) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.isStreamingPayload = void 0;\n    var stream_1 = require(\"stream\");\n    var isStreamingPayload = (request) =>\n      (request === null || request === void 0 ? void 0 : request.body) instanceof\n        stream_1.Readable ||\n      (typeof ReadableStream !== \"undefined\" &&\n        (request === null || request === void 0 ? void 0 : request.body) instanceof ReadableStream);\n    exports.isStreamingPayload = isStreamingPayload;\n  },\n});\n\n// node_modules/@smithy/middleware-retry/dist-cjs/index.js\nvar require_dist_cjs33 = __commonJS({\n  \"node_modules/@smithy/middleware-retry/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,\n      CONFIG_MAX_ATTEMPTS: () => CONFIG_MAX_ATTEMPTS,\n      CONFIG_RETRY_MODE: () => CONFIG_RETRY_MODE,\n      ENV_MAX_ATTEMPTS: () => ENV_MAX_ATTEMPTS,\n      ENV_RETRY_MODE: () => ENV_RETRY_MODE,\n      NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => NODE_MAX_ATTEMPT_CONFIG_OPTIONS,\n      NODE_RETRY_MODE_CONFIG_OPTIONS: () => NODE_RETRY_MODE_CONFIG_OPTIONS,\n      StandardRetryStrategy: () => StandardRetryStrategy,\n      defaultDelayDecider: () => defaultDelayDecider,\n      defaultRetryDecider: () => defaultRetryDecider,\n      getOmitRetryHeadersPlugin: () => getOmitRetryHeadersPlugin,\n      getRetryAfterHint: () => getRetryAfterHint,\n      getRetryPlugin: () => getRetryPlugin,\n      omitRetryHeadersMiddleware: () => omitRetryHeadersMiddleware,\n      omitRetryHeadersMiddlewareOptions: () => omitRetryHeadersMiddlewareOptions,\n      resolveRetryConfig: () => resolveRetryConfig,\n      retryMiddleware: () => retryMiddleware,\n      retryMiddlewareOptions: () => retryMiddlewareOptions,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_protocol_http = require_dist_cjs2();\n    var import_uuid = require_dist();\n    var import_util_retry = require_dist_cjs20();\n    var getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options) => {\n      const MAX_CAPACITY = initialRetryTokens;\n      const noRetryIncrement =\n        (options == null ? void 0 : options.noRetryIncrement) ??\n        import_util_retry.NO_RETRY_INCREMENT;\n      const retryCost =\n        (options == null ? void 0 : options.retryCost) ?? import_util_retry.RETRY_COST;\n      const timeoutRetryCost =\n        (options == null ? void 0 : options.timeoutRetryCost) ??\n        import_util_retry.TIMEOUT_RETRY_COST;\n      let availableCapacity = initialRetryTokens;\n      const getCapacityAmount = /* @__PURE__ */ __name(\n        (error) => (error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost),\n        \"getCapacityAmount\"\n      );\n      const hasRetryTokens = /* @__PURE__ */ __name(\n        (error) => getCapacityAmount(error) <= availableCapacity,\n        \"hasRetryTokens\"\n      );\n      const retrieveRetryTokens = /* @__PURE__ */ __name((error) => {\n        if (!hasRetryTokens(error)) {\n          throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(error);\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n      }, \"retrieveRetryTokens\");\n      const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount) => {\n        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n      }, \"releaseRetryTokens\");\n      return Object.freeze({\n        hasRetryTokens,\n        retrieveRetryTokens,\n        releaseRetryTokens,\n      });\n    }, \"getDefaultRetryQuota\");\n    var defaultDelayDecider = /* @__PURE__ */ __name(\n      (delayBase, attempts) =>\n        Math.floor(\n          Math.min(import_util_retry.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)\n        ),\n      \"defaultDelayDecider\"\n    );\n    var import_service_error_classification = require_dist_cjs19();\n    var defaultRetryDecider = /* @__PURE__ */ __name((error) => {\n      if (!error) {\n        return false;\n      }\n      return (\n        (0, import_service_error_classification.isRetryableByTrait)(error) ||\n        (0, import_service_error_classification.isClockSkewError)(error) ||\n        (0, import_service_error_classification.isThrottlingError)(error) ||\n        (0, import_service_error_classification.isTransientError)(error)\n      );\n    }, \"defaultRetryDecider\");\n    var asSdkError = /* @__PURE__ */ __name((error) => {\n      if (error instanceof Error) return error;\n      if (error instanceof Object) return Object.assign(new Error(), error);\n      if (typeof error === \"string\") return new Error(error);\n      return new Error(`AWS SDK error wrapper for ${error}`);\n    }, \"asSdkError\");\n    var _StandardRetryStrategy = class _StandardRetryStrategy {\n      constructor(maxAttemptsProvider, options) {\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = import_util_retry.RETRY_MODES.STANDARD;\n        this.retryDecider =\n          (options == null ? void 0 : options.retryDecider) ?? defaultRetryDecider;\n        this.delayDecider =\n          (options == null ? void 0 : options.delayDecider) ?? defaultDelayDecider;\n        this.retryQuota =\n          (options == null ? void 0 : options.retryQuota) ??\n          getDefaultRetryQuota(import_util_retry.INITIAL_RETRY_TOKENS);\n      }\n      shouldRetry(error, attempts, maxAttempts) {\n        return (\n          attempts < maxAttempts &&\n          this.retryDecider(error) &&\n          this.retryQuota.hasRetryTokens(error)\n        );\n      }\n      async getMaxAttempts() {\n        let maxAttempts;\n        try {\n          maxAttempts = await this.maxAttemptsProvider();\n        } catch (error) {\n          maxAttempts = import_util_retry.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n      }\n      async retry(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (import_protocol_http.HttpRequest.isInstance(request)) {\n          request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();\n        }\n        while (true) {\n          try {\n            if (import_protocol_http.HttpRequest.isInstance(request)) {\n              request.headers[import_util_retry.REQUEST_HEADER] =\n                `attempt=${attempts + 1}; max=${maxAttempts}`;\n            }\n            if (options == null ? void 0 : options.beforeRequest) {\n              await options.beforeRequest();\n            }\n            const { response, output } = await next(args);\n            if (options == null ? void 0 : options.afterRequest) {\n              options.afterRequest(response);\n            }\n            this.retryQuota.releaseRetryTokens(retryTokenAmount);\n            output.$metadata.attempts = attempts + 1;\n            output.$metadata.totalRetryDelay = totalDelay;\n            return { response, output };\n          } catch (e) {\n            const err = asSdkError(e);\n            attempts++;\n            if (this.shouldRetry(err, attempts, maxAttempts)) {\n              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n              const delayFromDecider = this.delayDecider(\n                (0, import_service_error_classification.isThrottlingError)(err)\n                  ? import_util_retry.THROTTLING_RETRY_DELAY_BASE\n                  : import_util_retry.DEFAULT_RETRY_DELAY_BASE,\n                attempts\n              );\n              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n              const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n              totalDelay += delay;\n              await new Promise((resolve) => setTimeout(resolve, delay));\n              continue;\n            }\n            if (!err.$metadata) {\n              err.$metadata = {};\n            }\n            err.$metadata.attempts = attempts;\n            err.$metadata.totalRetryDelay = totalDelay;\n            throw err;\n          }\n        }\n      }\n    };\n    __name(_StandardRetryStrategy, \"StandardRetryStrategy\");\n    var StandardRetryStrategy = _StandardRetryStrategy;\n    var getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response) => {\n      if (!import_protocol_http.HttpResponse.isInstance(response)) return;\n      const retryAfterHeaderName = Object.keys(response.headers).find(\n        (key) => key.toLowerCase() === \"retry-after\"\n      );\n      if (!retryAfterHeaderName) return;\n      const retryAfter = response.headers[retryAfterHeaderName];\n      const retryAfterSeconds = Number(retryAfter);\n      if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1e3;\n      const retryAfterDate = new Date(retryAfter);\n      return retryAfterDate.getTime() - Date.now();\n    }, \"getDelayFromRetryAfterHeader\");\n    var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy extends StandardRetryStrategy {\n      constructor(maxAttemptsProvider, options) {\n        const { rateLimiter, ...superOptions } = options ?? {};\n        super(maxAttemptsProvider, superOptions);\n        this.rateLimiter = rateLimiter ?? new import_util_retry.DefaultRateLimiter();\n        this.mode = import_util_retry.RETRY_MODES.ADAPTIVE;\n      }\n      async retry(next, args) {\n        return super.retry(next, args, {\n          beforeRequest: async () => {\n            return this.rateLimiter.getSendToken();\n          },\n          afterRequest: (response) => {\n            this.rateLimiter.updateClientSendingRate(response);\n          },\n        });\n      }\n    };\n    __name(_AdaptiveRetryStrategy, \"AdaptiveRetryStrategy\");\n    var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;\n    var import_util_middleware = require_dist_cjs10();\n    var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\n    var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\n    var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) => {\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value) return void 0;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n          throw new Error(\n            `Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`\n          );\n        }\n        return maxAttempt;\n      },\n      configFileSelector: (profile) => {\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value) return void 0;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n          throw new Error(\n            `Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`\n          );\n        }\n        return maxAttempt;\n      },\n      default: import_util_retry.DEFAULT_MAX_ATTEMPTS,\n    };\n    var resolveRetryConfig = /* @__PURE__ */ __name((input) => {\n      const { retryStrategy } = input;\n      const maxAttempts = (0, import_util_middleware.normalizeProvider)(\n        input.maxAttempts ?? import_util_retry.DEFAULT_MAX_ATTEMPTS\n      );\n      return {\n        ...input,\n        maxAttempts,\n        retryStrategy: async () => {\n          if (retryStrategy) {\n            return retryStrategy;\n          }\n          const retryMode = await (0, import_util_middleware.normalizeProvider)(input.retryMode)();\n          if (retryMode === import_util_retry.RETRY_MODES.ADAPTIVE) {\n            return new import_util_retry.AdaptiveRetryStrategy(maxAttempts);\n          }\n          return new import_util_retry.StandardRetryStrategy(maxAttempts);\n        },\n      };\n    }, \"resolveRetryConfig\");\n    var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\n    var CONFIG_RETRY_MODE = \"retry_mode\";\n    var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n      default: import_util_retry.DEFAULT_RETRY_MODE,\n    };\n    var omitRetryHeadersMiddleware = /* @__PURE__ */ __name(\n      () => (next) => async (args) => {\n        const { request } = args;\n        if (import_protocol_http.HttpRequest.isInstance(request)) {\n          delete request.headers[import_util_retry.INVOCATION_ID_HEADER];\n          delete request.headers[import_util_retry.REQUEST_HEADER];\n        }\n        return next(args);\n      },\n      \"omitRetryHeadersMiddleware\"\n    );\n    var omitRetryHeadersMiddlewareOptions = {\n      name: \"omitRetryHeadersMiddleware\",\n      tags: [\"RETRY\", \"HEADERS\", \"OMIT_RETRY_HEADERS\"],\n      relation: \"before\",\n      toMiddleware: \"awsAuthMiddleware\",\n      override: true,\n    };\n    var getOmitRetryHeadersPlugin = /* @__PURE__ */ __name(\n      (options) => ({\n        applyToStack: (clientStack) => {\n          clientStack.addRelativeTo(\n            omitRetryHeadersMiddleware(),\n            omitRetryHeadersMiddlewareOptions\n          );\n        },\n      }),\n      \"getOmitRetryHeadersPlugin\"\n    );\n    var import_smithy_client = require_dist_cjs32();\n    var import_isStreamingPayload = require_isStreamingPayload();\n    var retryMiddleware = /* @__PURE__ */ __name(\n      (options) => (next, context) => async (args) => {\n        var _a;\n        let retryStrategy = await options.retryStrategy();\n        const maxAttempts = await options.maxAttempts();\n        if (isRetryStrategyV2(retryStrategy)) {\n          retryStrategy = retryStrategy;\n          let retryToken = await retryStrategy.acquireInitialRetryToken(context[\"partition_id\"]);\n          let lastError = new Error();\n          let attempts = 0;\n          let totalRetryDelay = 0;\n          const { request } = args;\n          const isRequest = import_protocol_http.HttpRequest.isInstance(request);\n          if (isRequest) {\n            request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();\n          }\n          while (true) {\n            try {\n              if (isRequest) {\n                request.headers[import_util_retry.REQUEST_HEADER] =\n                  `attempt=${attempts + 1}; max=${maxAttempts}`;\n              }\n              const { response, output } = await next(args);\n              retryStrategy.recordSuccess(retryToken);\n              output.$metadata.attempts = attempts + 1;\n              output.$metadata.totalRetryDelay = totalRetryDelay;\n              return { response, output };\n            } catch (e) {\n              const retryErrorInfo = getRetryErrorInfo(e);\n              lastError = asSdkError(e);\n              if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {\n                (_a =\n                  context.logger instanceof import_smithy_client.NoOpLogger\n                    ? console\n                    : context.logger) == null\n                  ? void 0\n                  : _a.warn(\"An error was encountered in a non-retryable streaming request.\");\n                throw lastError;\n              }\n              try {\n                retryToken = await retryStrategy.refreshRetryTokenForRetry(\n                  retryToken,\n                  retryErrorInfo\n                );\n              } catch (refreshError) {\n                if (!lastError.$metadata) {\n                  lastError.$metadata = {};\n                }\n                lastError.$metadata.attempts = attempts + 1;\n                lastError.$metadata.totalRetryDelay = totalRetryDelay;\n                throw lastError;\n              }\n              attempts = retryToken.getRetryCount();\n              const delay = retryToken.getRetryDelay();\n              totalRetryDelay += delay;\n              await new Promise((resolve) => setTimeout(resolve, delay));\n            }\n          }\n        } else {\n          retryStrategy = retryStrategy;\n          if (retryStrategy == null ? void 0 : retryStrategy.mode)\n            context.userAgent = [\n              ...(context.userAgent || []),\n              [\"cfg/retry-mode\", retryStrategy.mode],\n            ];\n          return retryStrategy.retry(next, args);\n        }\n      },\n      \"retryMiddleware\"\n    );\n    var isRetryStrategyV2 = /* @__PURE__ */ __name(\n      (retryStrategy) =>\n        typeof retryStrategy.acquireInitialRetryToken !== \"undefined\" &&\n        typeof retryStrategy.refreshRetryTokenForRetry !== \"undefined\" &&\n        typeof retryStrategy.recordSuccess !== \"undefined\",\n      \"isRetryStrategyV2\"\n    );\n    var getRetryErrorInfo = /* @__PURE__ */ __name((error) => {\n      const errorInfo = {\n        error,\n        errorType: getRetryErrorType(error),\n      };\n      const retryAfterHint = getRetryAfterHint(error.$response);\n      if (retryAfterHint) {\n        errorInfo.retryAfterHint = retryAfterHint;\n      }\n      return errorInfo;\n    }, \"getRetryErrorInfo\");\n    var getRetryErrorType = /* @__PURE__ */ __name((error) => {\n      if ((0, import_service_error_classification.isThrottlingError)(error)) return \"THROTTLING\";\n      if ((0, import_service_error_classification.isTransientError)(error)) return \"TRANSIENT\";\n      if ((0, import_service_error_classification.isServerError)(error)) return \"SERVER_ERROR\";\n      return \"CLIENT_ERROR\";\n    }, \"getRetryErrorType\");\n    var retryMiddlewareOptions = {\n      name: \"retryMiddleware\",\n      tags: [\"RETRY\"],\n      step: \"finalizeRequest\",\n      priority: \"high\",\n      override: true,\n    };\n    var getRetryPlugin = /* @__PURE__ */ __name(\n      (options) => ({\n        applyToStack: (clientStack) => {\n          clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n        },\n      }),\n      \"getRetryPlugin\"\n    );\n    var getRetryAfterHint = /* @__PURE__ */ __name((response) => {\n      if (!import_protocol_http.HttpResponse.isInstance(response)) return;\n      const retryAfterHeaderName = Object.keys(response.headers).find(\n        (key) => key.toLowerCase() === \"retry-after\"\n      );\n      if (!retryAfterHeaderName) return;\n      const retryAfter = response.headers[retryAfterHeaderName];\n      const retryAfterSeconds = Number(retryAfter);\n      if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1e3);\n      const retryAfterDate = new Date(retryAfter);\n      return retryAfterDate;\n    }, \"getRetryAfterHint\");\n  },\n});\n\n// node_modules/@smithy/core/dist-cjs/index.js\nvar require_dist_cjs34 = __commonJS({\n  \"node_modules/@smithy/core/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      DefaultIdentityProviderConfig: () => DefaultIdentityProviderConfig,\n      EXPIRATION_MS: () => EXPIRATION_MS,\n      HttpApiKeyAuthSigner: () => HttpApiKeyAuthSigner,\n      HttpBearerAuthSigner: () => HttpBearerAuthSigner,\n      NoAuthSigner: () => NoAuthSigner,\n      RequestBuilder: () => RequestBuilder,\n      createIsIdentityExpiredFunction: () => createIsIdentityExpiredFunction,\n      createPaginator: () => createPaginator,\n      doesIdentityRequireRefresh: () => doesIdentityRequireRefresh,\n      getHttpAuthSchemeEndpointRuleSetPlugin: () => getHttpAuthSchemeEndpointRuleSetPlugin,\n      getHttpAuthSchemePlugin: () => getHttpAuthSchemePlugin,\n      getHttpSigningPlugin: () => getHttpSigningPlugin,\n      getSmithyContext: () => getSmithyContext3,\n      httpAuthSchemeEndpointRuleSetMiddlewareOptions: () =>\n        httpAuthSchemeEndpointRuleSetMiddlewareOptions,\n      httpAuthSchemeMiddleware: () => httpAuthSchemeMiddleware,\n      httpAuthSchemeMiddlewareOptions: () => httpAuthSchemeMiddlewareOptions,\n      httpSigningMiddleware: () => httpSigningMiddleware,\n      httpSigningMiddlewareOptions: () => httpSigningMiddlewareOptions,\n      isIdentityExpired: () => isIdentityExpired,\n      memoizeIdentityProvider: () => memoizeIdentityProvider,\n      normalizeProvider: () => normalizeProvider,\n      requestBuilder: () => requestBuilder,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_util_middleware = require_dist_cjs10();\n    function convertHttpAuthSchemesToMap(httpAuthSchemes) {\n      const map = /* @__PURE__ */ new Map();\n      for (const scheme of httpAuthSchemes) {\n        map.set(scheme.schemeId, scheme);\n      }\n      return map;\n    }\n    __name(convertHttpAuthSchemesToMap, \"convertHttpAuthSchemesToMap\");\n    var httpAuthSchemeMiddleware = /* @__PURE__ */ __name(\n      (config, mwOptions) => (next, context) => async (args) => {\n        var _a;\n        const options = config.httpAuthSchemeProvider(\n          await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input)\n        );\n        const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);\n        const smithyContext = (0, import_util_middleware.getSmithyContext)(context);\n        const failureReasons = [];\n        for (const option of options) {\n          const scheme = authSchemes.get(option.schemeId);\n          if (!scheme) {\n            failureReasons.push(\n              `HttpAuthScheme \\`${option.schemeId}\\` was not enabled for this service.`\n            );\n            continue;\n          }\n          const identityProvider = scheme.identityProvider(\n            await mwOptions.identityProviderConfigProvider(config)\n          );\n          if (!identityProvider) {\n            failureReasons.push(\n              `HttpAuthScheme \\`${option.schemeId}\\` did not have an IdentityProvider configured.`\n            );\n            continue;\n          }\n          const { identityProperties = {}, signingProperties = {} } =\n            ((_a = option.propertiesExtractor) == null\n              ? void 0\n              : _a.call(option, config, context)) || {};\n          option.identityProperties = Object.assign(\n            option.identityProperties || {},\n            identityProperties\n          );\n          option.signingProperties = Object.assign(\n            option.signingProperties || {},\n            signingProperties\n          );\n          smithyContext.selectedHttpAuthScheme = {\n            httpAuthOption: option,\n            identity: await identityProvider(option.identityProperties),\n            signer: scheme.signer,\n          };\n          break;\n        }\n        if (!smithyContext.selectedHttpAuthScheme) {\n          throw new Error(failureReasons.join(\"\\n\"));\n        }\n        return next(args);\n      },\n      \"httpAuthSchemeMiddleware\"\n    );\n    var import_middleware_endpoint = require_dist_cjs18();\n    var httpAuthSchemeEndpointRuleSetMiddlewareOptions = {\n      step: \"serialize\",\n      tags: [\"HTTP_AUTH_SCHEME\"],\n      name: \"httpAuthSchemeMiddleware\",\n      override: true,\n      relation: \"before\",\n      toMiddleware: import_middleware_endpoint.endpointMiddlewareOptions.name,\n    };\n    var getHttpAuthSchemeEndpointRuleSetPlugin = /* @__PURE__ */ __name(\n      (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({\n        applyToStack: (clientStack) => {\n          clientStack.addRelativeTo(\n            httpAuthSchemeMiddleware(config, {\n              httpAuthSchemeParametersProvider,\n              identityProviderConfigProvider,\n            }),\n            httpAuthSchemeEndpointRuleSetMiddlewareOptions\n          );\n        },\n      }),\n      \"getHttpAuthSchemeEndpointRuleSetPlugin\"\n    );\n    var import_middleware_serde = require_dist_cjs17();\n    var httpAuthSchemeMiddlewareOptions = {\n      step: \"serialize\",\n      tags: [\"HTTP_AUTH_SCHEME\"],\n      name: \"httpAuthSchemeMiddleware\",\n      override: true,\n      relation: \"before\",\n      toMiddleware: import_middleware_serde.serializerMiddlewareOption.name,\n    };\n    var getHttpAuthSchemePlugin = /* @__PURE__ */ __name(\n      (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({\n        applyToStack: (clientStack) => {\n          clientStack.addRelativeTo(\n            httpAuthSchemeMiddleware(config, {\n              httpAuthSchemeParametersProvider,\n              identityProviderConfigProvider,\n            }),\n            httpAuthSchemeMiddlewareOptions\n          );\n        },\n      }),\n      \"getHttpAuthSchemePlugin\"\n    );\n    var import_protocol_http = require_dist_cjs2();\n    var defaultErrorHandler = /* @__PURE__ */ __name(\n      (signingProperties) => (error) => {\n        throw error;\n      },\n      \"defaultErrorHandler\"\n    );\n    var defaultSuccessHandler = /* @__PURE__ */ __name(\n      (httpResponse, signingProperties) => {},\n      \"defaultSuccessHandler\"\n    );\n    var httpSigningMiddleware = /* @__PURE__ */ __name(\n      (config) => (next, context) => async (args) => {\n        if (!import_protocol_http.HttpRequest.isInstance(args.request)) {\n          return next(args);\n        }\n        const smithyContext = (0, import_util_middleware.getSmithyContext)(context);\n        const scheme = smithyContext.selectedHttpAuthScheme;\n        if (!scheme) {\n          throw new Error(`No HttpAuthScheme was selected: unable to sign request`);\n        }\n        const {\n          httpAuthOption: { signingProperties = {} },\n          identity,\n          signer,\n        } = scheme;\n        const output = await next({\n          ...args,\n          request: await signer.sign(args.request, identity, signingProperties),\n        }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));\n        (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);\n        return output;\n      },\n      \"httpSigningMiddleware\"\n    );\n    var import_middleware_retry = require_dist_cjs33();\n    var httpSigningMiddlewareOptions = {\n      step: \"finalizeRequest\",\n      tags: [\"HTTP_SIGNING\"],\n      name: \"httpSigningMiddleware\",\n      aliases: [\"apiKeyMiddleware\", \"tokenMiddleware\", \"awsAuthMiddleware\"],\n      override: true,\n      relation: \"after\",\n      toMiddleware: import_middleware_retry.retryMiddlewareOptions.name,\n    };\n    var getHttpSigningPlugin = /* @__PURE__ */ __name(\n      (config) => ({\n        applyToStack: (clientStack) => {\n          clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);\n        },\n      }),\n      \"getHttpSigningPlugin\"\n    );\n    var _DefaultIdentityProviderConfig = class _DefaultIdentityProviderConfig {\n      constructor(config) {\n        this.authSchemes = /* @__PURE__ */ new Map();\n        for (const [key, value] of Object.entries(config)) {\n          if (value !== void 0) {\n            this.authSchemes.set(key, value);\n          }\n        }\n      }\n      getIdentityProvider(schemeId) {\n        return this.authSchemes.get(schemeId);\n      }\n    };\n    __name(_DefaultIdentityProviderConfig, \"DefaultIdentityProviderConfig\");\n    var DefaultIdentityProviderConfig = _DefaultIdentityProviderConfig;\n    var import_types = require_dist_cjs();\n    var _HttpApiKeyAuthSigner = class _HttpApiKeyAuthSigner {\n      async sign(httpRequest, identity, signingProperties) {\n        if (!signingProperties) {\n          throw new Error(\n            \"request could not be signed with `apiKey` since the `name` and `in` signer properties are missing\"\n          );\n        }\n        if (!signingProperties.name) {\n          throw new Error(\n            \"request could not be signed with `apiKey` since the `name` signer property is missing\"\n          );\n        }\n        if (!signingProperties.in) {\n          throw new Error(\n            \"request could not be signed with `apiKey` since the `in` signer property is missing\"\n          );\n        }\n        if (!identity.apiKey) {\n          throw new Error(\n            \"request could not be signed with `apiKey` since the `apiKey` is not defined\"\n          );\n        }\n        const clonedRequest = httpRequest.clone();\n        if (signingProperties.in === import_types.HttpApiKeyAuthLocation.QUERY) {\n          clonedRequest.query[signingProperties.name] = identity.apiKey;\n        } else if (signingProperties.in === import_types.HttpApiKeyAuthLocation.HEADER) {\n          clonedRequest.headers[signingProperties.name] = signingProperties.scheme\n            ? `${signingProperties.scheme} ${identity.apiKey}`\n            : identity.apiKey;\n        } else {\n          throw new Error(\n            \"request can only be signed with `apiKey` locations `query` or `header`, but found: `\" +\n              signingProperties.in +\n              \"`\"\n          );\n        }\n        return clonedRequest;\n      }\n    };\n    __name(_HttpApiKeyAuthSigner, \"HttpApiKeyAuthSigner\");\n    var HttpApiKeyAuthSigner = _HttpApiKeyAuthSigner;\n    var _HttpBearerAuthSigner = class _HttpBearerAuthSigner {\n      async sign(httpRequest, identity, signingProperties) {\n        const clonedRequest = httpRequest.clone();\n        if (!identity.token) {\n          throw new Error(\n            \"request could not be signed with `token` since the `token` is not defined\"\n          );\n        }\n        clonedRequest.headers[\"Authorization\"] = `Bearer ${identity.token}`;\n        return clonedRequest;\n      }\n    };\n    __name(_HttpBearerAuthSigner, \"HttpBearerAuthSigner\");\n    var HttpBearerAuthSigner = _HttpBearerAuthSigner;\n    var _NoAuthSigner = class _NoAuthSigner {\n      async sign(httpRequest, identity, signingProperties) {\n        return httpRequest;\n      }\n    };\n    __name(_NoAuthSigner, \"NoAuthSigner\");\n    var NoAuthSigner = _NoAuthSigner;\n    var createIsIdentityExpiredFunction = /* @__PURE__ */ __name(\n      (expirationMs) => (identity) =>\n        doesIdentityRequireRefresh(identity) &&\n        identity.expiration.getTime() - Date.now() < expirationMs,\n      \"createIsIdentityExpiredFunction\"\n    );\n    var EXPIRATION_MS = 3e5;\n    var isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);\n    var doesIdentityRequireRefresh = /* @__PURE__ */ __name(\n      (identity) => identity.expiration !== void 0,\n      \"doesIdentityRequireRefresh\"\n    );\n    var memoizeIdentityProvider = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {\n      if (provider === void 0) {\n        return void 0;\n      }\n      const normalizedProvider =\n        typeof provider !== \"function\" ? async () => Promise.resolve(provider) : provider;\n      let resolved;\n      let pending;\n      let hasResult;\n      let isConstant = false;\n      const coalesceProvider = /* @__PURE__ */ __name(async (options) => {\n        if (!pending) {\n          pending = normalizedProvider(options);\n        }\n        try {\n          resolved = await pending;\n          hasResult = true;\n          isConstant = false;\n        } finally {\n          pending = void 0;\n        }\n        return resolved;\n      }, \"coalesceProvider\");\n      if (isExpired === void 0) {\n        return async (options) => {\n          if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {\n            resolved = await coalesceProvider(options);\n          }\n          return resolved;\n        };\n      }\n      return async (options) => {\n        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {\n          resolved = await coalesceProvider(options);\n        }\n        if (isConstant) {\n          return resolved;\n        }\n        if (!requiresRefresh(resolved)) {\n          isConstant = true;\n          return resolved;\n        }\n        if (isExpired(resolved)) {\n          await coalesceProvider(options);\n          return resolved;\n        }\n        return resolved;\n      };\n    }, \"memoizeIdentityProvider\");\n    var getSmithyContext3 = /* @__PURE__ */ __name(\n      (context) =>\n        context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}),\n      \"getSmithyContext\"\n    );\n    var normalizeProvider = /* @__PURE__ */ __name((input) => {\n      if (typeof input === \"function\") return input;\n      const promisified = Promise.resolve(input);\n      return () => promisified;\n    }, \"normalizeProvider\");\n    var import_smithy_client = require_dist_cjs32();\n    function requestBuilder(input, context) {\n      return new RequestBuilder(input, context);\n    }\n    __name(requestBuilder, \"requestBuilder\");\n    var _RequestBuilder = class _RequestBuilder {\n      constructor(input, context) {\n        this.input = input;\n        this.context = context;\n        this.query = {};\n        this.method = \"\";\n        this.headers = {};\n        this.path = \"\";\n        this.body = null;\n        this.hostname = \"\";\n        this.resolvePathStack = [];\n      }\n      async build() {\n        const {\n          hostname,\n          protocol = \"https\",\n          port,\n          path: basePath,\n        } = await this.context.endpoint();\n        this.path = basePath;\n        for (const resolvePath of this.resolvePathStack) {\n          resolvePath(this.path);\n        }\n        return new import_protocol_http.HttpRequest({\n          protocol,\n          hostname: this.hostname || hostname,\n          port,\n          method: this.method,\n          path: this.path,\n          query: this.query,\n          body: this.body,\n          headers: this.headers,\n        });\n      }\n      hn(hostname) {\n        this.hostname = hostname;\n        return this;\n      }\n      bp(uriLabel) {\n        this.resolvePathStack.push((basePath) => {\n          this.path =\n            `${(basePath == null ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n            uriLabel;\n        });\n        return this;\n      }\n      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {\n        this.resolvePathStack.push((path) => {\n          this.path = (0, import_smithy_client.resolvedPath)(\n            path,\n            this.input,\n            memberName,\n            labelValueProvider,\n            uriLabel,\n            isGreedyLabel\n          );\n        });\n        return this;\n      }\n      h(headers) {\n        this.headers = headers;\n        return this;\n      }\n      q(query) {\n        this.query = query;\n        return this;\n      }\n      b(body) {\n        this.body = body;\n        return this;\n      }\n      m(method) {\n        this.method = method;\n        return this;\n      }\n    };\n    __name(_RequestBuilder, \"RequestBuilder\");\n    var RequestBuilder = _RequestBuilder;\n    var makePagedClientRequest = /* @__PURE__ */ __name(\n      async (CommandCtor, client, input, ...args) => {\n        return await client.send(new CommandCtor(input), ...args);\n      },\n      \"makePagedClientRequest\"\n    );\n    function createPaginator(\n      ClientCtor,\n      CommandCtor,\n      inputTokenName,\n      outputTokenName,\n      pageSizeTokenName\n    ) {\n      return /* @__PURE__ */ __name(async function* paginateOperation(\n        config,\n        input,\n        ...additionalArguments\n      ) {\n        let token = config.startingToken || void 0;\n        let hasNext = true;\n        let page;\n        while (hasNext) {\n          input[inputTokenName] = token;\n          if (pageSizeTokenName) {\n            input[pageSizeTokenName] = input[pageSizeTokenName] ?? config.pageSize;\n          }\n          if (config.client instanceof ClientCtor) {\n            page = await makePagedClientRequest(\n              CommandCtor,\n              config.client,\n              input,\n              ...additionalArguments\n            );\n          } else {\n            throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);\n          }\n          yield page;\n          const prevToken = token;\n          token = get(page, outputTokenName);\n          hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n        }\n        return void 0;\n      }, \"paginateOperation\");\n    }\n    __name(createPaginator, \"createPaginator\");\n    var get = /* @__PURE__ */ __name((fromObject, path) => {\n      let cursor = fromObject;\n      const pathComponents = path.split(\".\");\n      for (const step of pathComponents) {\n        if (!cursor || typeof cursor !== \"object\") {\n          return void 0;\n        }\n        cursor = cursor[step];\n      }\n      return cursor;\n    }, \"get\");\n  },\n});\n\n// node_modules/@smithy/middleware-content-length/dist-cjs/index.js\nvar require_dist_cjs35 = __commonJS({\n  \"node_modules/@smithy/middleware-content-length/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      contentLengthMiddleware: () => contentLengthMiddleware,\n      contentLengthMiddlewareOptions: () => contentLengthMiddlewareOptions,\n      getContentLengthPlugin: () => getContentLengthPlugin,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_protocol_http = require_dist_cjs2();\n    var CONTENT_LENGTH_HEADER = \"content-length\";\n    function contentLengthMiddleware(bodyLengthChecker) {\n      return (next) => async (args) => {\n        const request = args.request;\n        if (import_protocol_http.HttpRequest.isInstance(request)) {\n          const { body, headers } = request;\n          if (\n            body &&\n            Object.keys(headers)\n              .map((str) => str.toLowerCase())\n              .indexOf(CONTENT_LENGTH_HEADER) === -1\n          ) {\n            try {\n              const length = bodyLengthChecker(body);\n              request.headers = {\n                ...request.headers,\n                [CONTENT_LENGTH_HEADER]: String(length),\n              };\n            } catch (error) {}\n          }\n        }\n        return next({\n          ...args,\n          request,\n        });\n      };\n    }\n    __name(contentLengthMiddleware, \"contentLengthMiddleware\");\n    var contentLengthMiddlewareOptions = {\n      step: \"build\",\n      tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n      name: \"contentLengthMiddleware\",\n      override: true,\n    };\n    var getContentLengthPlugin = /* @__PURE__ */ __name(\n      (options) => ({\n        applyToStack: (clientStack) => {\n          clientStack.add(\n            contentLengthMiddleware(options.bodyLengthChecker),\n            contentLengthMiddlewareOptions\n          );\n        },\n      }),\n      \"getContentLengthPlugin\"\n    );\n  },\n});\n\n// node_modules/tslib/tslib.js\nvar require_tslib = __commonJS({\n  \"node_modules/tslib/tslib.js\"(exports, module2) {\n    var __extends;\n    var __assign;\n    var __rest;\n    var __decorate;\n    var __param;\n    var __esDecorate;\n    var __runInitializers;\n    var __propKey;\n    var __setFunctionName;\n    var __metadata;\n    var __awaiter;\n    var __generator;\n    var __exportStar;\n    var __values;\n    var __read;\n    var __spread;\n    var __spreadArrays;\n    var __spreadArray;\n    var __await;\n    var __asyncGenerator;\n    var __asyncDelegator;\n    var __asyncValues;\n    var __makeTemplateObject;\n    var __importStar;\n    var __importDefault;\n    var __classPrivateFieldGet;\n    var __classPrivateFieldSet;\n    var __classPrivateFieldIn;\n    var __createBinding;\n    var __addDisposableResource;\n    var __disposeResources;\n    (function (factory) {\n      var root =\n        typeof global === \"object\"\n          ? global\n          : typeof self === \"object\"\n            ? self\n            : typeof this === \"object\"\n              ? this\n              : {};\n      if (typeof define === \"function\" && define.amd) {\n        define(\"tslib\", [\"exports\"], (exports2) => {\n          factory(createExporter(root, createExporter(exports2)));\n        });\n      } else if (typeof module2 === \"object\" && typeof module2.exports === \"object\") {\n        factory(createExporter(root, createExporter(module2.exports)));\n      } else {\n        factory(createExporter(root));\n      }\n      function createExporter(exports2, previous) {\n        if (exports2 !== root) {\n          if (typeof Object.create === \"function\") {\n            Object.defineProperty(exports2, \"__esModule\", { value: true });\n          } else {\n            exports2.__esModule = true;\n          }\n        }\n        return (id, v) => (exports2[id] = previous ? previous(id, v) : v);\n      }\n    })((exporter) => {\n      var extendStatics =\n        Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array &&\n          ((d, b) => {\n            d.__proto__ = b;\n          })) ||\n        ((d, b) => {\n          for (var p in b) if (Object.hasOwn(b, p)) d[p] = b[p];\n        });\n      __extends = (d, b) => {\n        if (typeof b !== \"function\" && b !== null)\n          throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n          this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());\n      };\n      __assign =\n        Object.assign ||\n        ((t) => {\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.hasOwn(s, p)) t[p] = s[p];\n          }\n          return t;\n        });\n      __rest = (s, e) => {\n        var t = {};\n        for (var p in s)\n          if (Object.hasOwn(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n          }\n        return t;\n      };\n      __decorate = (decorators, target, key, desc) => {\n        var c = arguments.length,\n          r =\n            c < 3\n              ? target\n              : desc === null\n                ? (desc = Object.getOwnPropertyDescriptor(target, key))\n                : desc,\n          d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n          r = Reflect.decorate(decorators, target, key, desc);\n        else\n          for (var i = decorators.length - 1; i >= 0; i--)\n            if ((d = decorators[i]))\n              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n      };\n      __param = (paramIndex, decorator) => (target, key) => {\n          decorator(target, key, paramIndex);\n        };\n      __esDecorate = (\n        ctor,\n        descriptorIn,\n        decorators,\n        contextIn,\n        initializers,\n        extraInitializers\n      ) => {\n        function accept(f) {\n          if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n          return f;\n        }\n        var kind = contextIn.kind,\n          key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n        var target = !descriptorIn && ctor ? (contextIn[\"static\"] ? ctor : ctor.prototype) : null;\n        var descriptor =\n          descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n        var _,\n          done = false;\n        for (var i = decorators.length - 1; i >= 0; i--) {\n          var context = {};\n          for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n          for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n          context.addInitializer = (f) => {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n          };\n          var result = (0, decorators[i])(\n            kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key],\n            context\n          );\n          if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\")\n              throw new TypeError(\"Object expected\");\n            if ((_ = accept(result.get))) descriptor.get = _;\n            if ((_ = accept(result.set))) descriptor.set = _;\n            if ((_ = accept(result.init))) initializers.unshift(_);\n          } else if ((_ = accept(result))) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n          }\n        }\n        if (target) Object.defineProperty(target, contextIn.name, descriptor);\n        done = true;\n      };\n      __runInitializers = (thisArg, initializers, value) => {\n        var useValue = arguments.length > 2;\n        for (var i = 0; i < initializers.length; i++) {\n          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n        }\n        return useValue ? value : void 0;\n      };\n      __propKey = (x) => typeof x === \"symbol\" ? x : \"\".concat(x);\n      __setFunctionName = (f, name, prefix) => {\n        if (typeof name === \"symbol\")\n          name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n        return Object.defineProperty(f, \"name\", {\n          configurable: true,\n          value: prefix ? \"\".concat(prefix, \" \", name) : name,\n        });\n      };\n      __metadata = (metadataKey, metadataValue) => {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n          return Reflect.metadata(metadataKey, metadataValue);\n      };\n      __awaiter = (thisArg, _arguments, P, generator) => {\n        function adopt(value) {\n          return value instanceof P\n            ? value\n            : new P((resolve) => {\n                resolve(value);\n              });\n        }\n        return new (P || (P = Promise))((resolve, reject) => {\n          function fulfilled(value) {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function rejected(value) {\n            try {\n              step(generator[\"throw\"](value));\n            } catch (e) {\n              reject(e);\n            }\n          }\n          function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n          }\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n      };\n      __generator = (thisArg, body) => {\n        var _ = {\n            label: 0,\n            sent: () => {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: [],\n          },\n          f,\n          y,\n          t,\n          g;\n        return (\n          (g = { next: verb(0), throw: verb(1), return: verb(2) }),\n          typeof Symbol === \"function\" &&\n            (g[Symbol.iterator] = function () {\n              return this;\n            }),\n          g\n        );\n        function verb(n) {\n          return (v) => step([n, v]);\n        }\n        function step(op) {\n          if (f) throw new TypeError(\"Generator is already executing.\");\n          while ((g && ((g = 0), op[0] && (_ = 0)), _))\n            try {\n              if (\n                ((f = 1),\n                y &&\n                  (t =\n                    op[0] & 2\n                      ? y[\"return\"]\n                      : op[0]\n                        ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0)\n                        : y.next) &&\n                  !(t = t.call(y, op[1])).done)\n              )\n                return t;\n              if (((y = 0), t)) op = [op[0] & 2, t.value];\n              switch (op[0]) {\n                case 0:\n                case 1:\n                  t = op;\n                  break;\n                case 4:\n                  _.label++;\n                  return { value: op[1], done: false };\n                case 5:\n                  _.label++;\n                  y = op[1];\n                  op = [0];\n                  continue;\n                case 7:\n                  op = _.ops.pop();\n                  _.trys.pop();\n                  continue;\n                default:\n                  if (\n                    !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&\n                    (op[0] === 6 || op[0] === 2)\n                  ) {\n                    _ = 0;\n                    continue;\n                  }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                    _.label = op[1];\n                    break;\n                  }\n                  if (op[0] === 6 && _.label < t[1]) {\n                    _.label = t[1];\n                    t = op;\n                    break;\n                  }\n                  if (t && _.label < t[2]) {\n                    _.label = t[2];\n                    _.ops.push(op);\n                    break;\n                  }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop();\n                  continue;\n              }\n              op = body.call(thisArg, _);\n            } catch (e) {\n              op = [6, e];\n              y = 0;\n            } finally {\n              f = t = 0;\n            }\n          if (op[0] & 5) throw op[1];\n          return { value: op[0] ? op[1] : void 0, done: true };\n        }\n      };\n      __exportStar = (m, o) => {\n        for (var p in m)\n          if (p !== \"default\" && !Object.hasOwn(o, p))\n            __createBinding(o, m, p);\n      };\n      __createBinding = Object.create\n        ? ((o, m, k, k2) => {\n            if (k2 === void 0) k2 = k;\n            var desc = Object.getOwnPropertyDescriptor(m, k);\n            if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n              desc = {\n                enumerable: true,\n                get: () => m[k],\n              };\n            }\n            Object.defineProperty(o, k2, desc);\n          })\n        : ((o, m, k, k2) => {\n            if (k2 === void 0) k2 = k;\n            o[k2] = m[k];\n          });\n      __values = (o) => {\n        var s = typeof Symbol === \"function\" && Symbol.iterator,\n          m = s && o[s],\n          i = 0;\n        if (m) return m.call(o);\n        if (o && typeof o.length === \"number\")\n          return {\n            next: () => {\n              if (o && i >= o.length) o = void 0;\n              return { value: o && o[i++], done: !o };\n            },\n          };\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n      };\n      __read = (o, n) => {\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n        if (!m) return o;\n        var i = m.call(o),\n          r,\n          ar = [],\n          e;\n        try {\n          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n        } catch (error) {\n          e = { error };\n        } finally {\n          try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n          } finally {\n            if (e) throw e.error;\n          }\n        }\n        return ar;\n      };\n      __spread = () => {\n        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n        return ar;\n      };\n      __spreadArrays = () => {\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\n          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n        return r;\n      };\n      __spreadArray = (to, from, pack) => {\n        if (pack || arguments.length === 2)\n          for (var i = 0, l = from.length, ar; i < l; i++) {\n            if (ar || !(i in from)) {\n              if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n              ar[i] = from[i];\n            }\n          }\n        return to.concat(ar || Array.prototype.slice.call(from));\n      };\n      __await = function (v) {\n        return this instanceof __await ? ((this.v = v), this) : new __await(v);\n      };\n      __asyncGenerator = (thisArg, _arguments, generator) => {\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n        var g = generator.apply(thisArg, _arguments || []),\n          i,\n          q = [];\n        return (\n          (i = {}),\n          verb(\"next\"),\n          verb(\"throw\"),\n          verb(\"return\", awaitReturn),\n          (i[Symbol.asyncIterator] = function () {\n            return this;\n          }),\n          i\n        );\n        function awaitReturn(f) {\n          return (v) => Promise.resolve(v).then(f, reject);\n        }\n        function verb(n, f) {\n          if (g[n]) {\n            i[n] = (v) => new Promise((a, b) => {\n                q.push([n, v, a, b]) > 1 || resume(n, v);\n              });\n            if (f) i[n] = f(i[n]);\n          }\n        }\n        function resume(n, v) {\n          try {\n            step(g[n](v));\n          } catch (e) {\n            settle(q[0][3], e);\n          }\n        }\n        function step(r) {\n          r.value instanceof __await\n            ? Promise.resolve(r.value.v).then(fulfill, reject)\n            : settle(q[0][2], r);\n        }\n        function fulfill(value) {\n          resume(\"next\", value);\n        }\n        function reject(value) {\n          resume(\"throw\", value);\n        }\n        function settle(f, v) {\n          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);\n        }\n      };\n      __asyncDelegator = (o) => {\n        var i, p;\n        return (\n          (i = {}),\n          verb(\"next\"),\n          verb(\"throw\", (e) => {\n            throw e;\n          }),\n          verb(\"return\"),\n          (i[Symbol.iterator] = function () {\n            return this;\n          }),\n          i\n        );\n        function verb(n, f) {\n          i[n] = o[n]\n            ? ((v) => (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v)\n            : f;\n        }\n      };\n      __asyncValues = (o) => {\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n        var m = o[Symbol.asyncIterator],\n          i;\n        return m\n          ? m.call(o)\n          : ((o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]()),\n            (i = {}),\n            verb(\"next\"),\n            verb(\"throw\"),\n            verb(\"return\"),\n            (i[Symbol.asyncIterator] = function () {\n              return this;\n            }),\n            i);\n        function verb(n) {\n          i[n] =\n            o[n] &&\n            ((v) => new Promise((resolve, reject) => {\n                (v = o[n](v)), settle(resolve, reject, v.done, v.value);\n              }));\n        }\n        function settle(resolve, reject, d, v) {\n          Promise.resolve(v).then((v2) => {\n            resolve({ value: v2, done: d });\n          }, reject);\n        }\n      };\n      __makeTemplateObject = (cooked, raw) => {\n        if (Object.defineProperty) {\n          Object.defineProperty(cooked, \"raw\", { value: raw });\n        } else {\n          cooked.raw = raw;\n        }\n        return cooked;\n      };\n      var __setModuleDefault = Object.create\n        ? ((o, v) => {\n            Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n          })\n        : ((o, v) => {\n            o[\"default\"] = v;\n          });\n      __importStar = (mod) => {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) {\n          for (var k in mod)\n            if (k !== \"default\" && Object.hasOwn(mod, k))\n              __createBinding(result, mod, k);\n        }\n        __setModuleDefault(result, mod);\n        return result;\n      };\n      __importDefault = (mod) => mod && mod.__esModule ? mod : { default: mod };\n      __classPrivateFieldGet = (receiver, state, kind, f) => {\n        if (kind === \"a\" && !f)\n          throw new TypeError(\"Private accessor was defined without a getter\");\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver))\n          throw new TypeError(\n            \"Cannot read private member from an object whose class did not declare it\"\n          );\n        return kind === \"m\"\n          ? f\n          : kind === \"a\"\n            ? f.call(receiver)\n            : f\n              ? f.value\n              : state.get(receiver);\n      };\n      __classPrivateFieldSet = (receiver, state, value, kind, f) => {\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n        if (kind === \"a\" && !f)\n          throw new TypeError(\"Private accessor was defined without a setter\");\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver))\n          throw new TypeError(\n            \"Cannot write private member to an object whose class did not declare it\"\n          );\n        return (\n          kind === \"a\"\n            ? f.call(receiver, value)\n            : f\n              ? (f.value = value)\n              : state.set(receiver, value),\n          value\n        );\n      };\n      __classPrivateFieldIn = (state, receiver) => {\n        if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\"))\n          throw new TypeError(\"Cannot use 'in' operator on non-object\");\n        return typeof state === \"function\" ? receiver === state : state.has(receiver);\n      };\n      __addDisposableResource = (env, value, async) => {\n        if (value !== null && value !== void 0) {\n          if (typeof value !== \"object\" && typeof value !== \"function\")\n            throw new TypeError(\"Object expected.\");\n          var dispose, inner;\n          if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n          }\n          if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n            if (async) inner = dispose;\n          }\n          if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n          if (inner)\n            dispose = function () {\n              try {\n                inner.call(this);\n              } catch (e) {\n                return Promise.reject(e);\n              }\n            };\n          env.stack.push({ value, dispose, async });\n        } else if (async) {\n          env.stack.push({ async: true });\n        }\n        return value;\n      };\n      var _SuppressedError =\n        typeof SuppressedError === \"function\"\n          ? SuppressedError\n          : ((error, suppressed, message) => {\n              var e = new Error(message);\n              return (\n                (e.name = \"SuppressedError\"), (e.error = error), (e.suppressed = suppressed), e\n              );\n            });\n      __disposeResources = (env) => {\n        function fail(e) {\n          env.error = env.hasError\n            ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\")\n            : e;\n          env.hasError = true;\n        }\n        function next() {\n          while (env.stack.length) {\n            var rec = env.stack.pop();\n            try {\n              var result = rec.dispose && rec.dispose.call(rec.value);\n              if (rec.async)\n                return Promise.resolve(result).then(next, (e) => {\n                  fail(e);\n                  return next();\n                });\n            } catch (e) {\n              fail(e);\n            }\n          }\n          if (env.hasError) throw env.error;\n        }\n        return next();\n      };\n      exporter(\"__extends\", __extends);\n      exporter(\"__assign\", __assign);\n      exporter(\"__rest\", __rest);\n      exporter(\"__decorate\", __decorate);\n      exporter(\"__param\", __param);\n      exporter(\"__esDecorate\", __esDecorate);\n      exporter(\"__runInitializers\", __runInitializers);\n      exporter(\"__propKey\", __propKey);\n      exporter(\"__setFunctionName\", __setFunctionName);\n      exporter(\"__metadata\", __metadata);\n      exporter(\"__awaiter\", __awaiter);\n      exporter(\"__generator\", __generator);\n      exporter(\"__exportStar\", __exportStar);\n      exporter(\"__createBinding\", __createBinding);\n      exporter(\"__values\", __values);\n      exporter(\"__read\", __read);\n      exporter(\"__spread\", __spread);\n      exporter(\"__spreadArrays\", __spreadArrays);\n      exporter(\"__spreadArray\", __spreadArray);\n      exporter(\"__await\", __await);\n      exporter(\"__asyncGenerator\", __asyncGenerator);\n      exporter(\"__asyncDelegator\", __asyncDelegator);\n      exporter(\"__asyncValues\", __asyncValues);\n      exporter(\"__makeTemplateObject\", __makeTemplateObject);\n      exporter(\"__importStar\", __importStar);\n      exporter(\"__importDefault\", __importDefault);\n      exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\n      exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\n      exporter(\"__classPrivateFieldIn\", __classPrivateFieldIn);\n      exporter(\"__addDisposableResource\", __addDisposableResource);\n      exporter(\"__disposeResources\", __disposeResources);\n    });\n  },\n});\n\n// node_modules/@aws-sdk/core/dist-cjs/submodules/client/index.js\nvar require_client = __commonJS({\n  \"node_modules/@aws-sdk/core/dist-cjs/submodules/client/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var client_exports = {};\n    __export2(client_exports, {\n      emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,\n    });\n    module2.exports = __toCommonJS2(client_exports);\n    var warningEmitted = false;\n    var emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version) => {\n      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\".\"))) < 16) {\n        warningEmitted = true;\n      }\n    }, \"emitWarningIfUnsupportedVersion\");\n  },\n});\n\n// node_modules/@smithy/signature-v4/dist-cjs/index.js\nvar require_dist_cjs36 = __commonJS({\n  \"node_modules/@smithy/signature-v4/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      SignatureV4: () => SignatureV4,\n      clearCredentialCache: () => clearCredentialCache,\n      createScope: () => createScope,\n      getCanonicalHeaders: () => getCanonicalHeaders,\n      getCanonicalQuery: () => getCanonicalQuery,\n      getPayloadHash: () => getPayloadHash,\n      getSigningKey: () => getSigningKey,\n      moveHeadersToQuery: () => moveHeadersToQuery,\n      prepareRequest: () => prepareRequest,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_util_middleware = require_dist_cjs10();\n    var import_util_utf84 = require_dist_cjs24();\n    var ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\n    var CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\n    var AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\n    var SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\n    var EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\n    var SIGNATURE_QUERY_PARAM = \"X-Amz-Signature\";\n    var TOKEN_QUERY_PARAM = \"X-Amz-Security-Token\";\n    var AUTH_HEADER = \"authorization\";\n    var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();\n    var DATE_HEADER = \"date\";\n    var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];\n    var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();\n    var SHA256_HEADER = \"x-amz-content-sha256\";\n    var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();\n    var ALWAYS_UNSIGNABLE_HEADERS = {\n      authorization: true,\n      \"cache-control\": true,\n      connection: true,\n      expect: true,\n      from: true,\n      \"keep-alive\": true,\n      \"max-forwards\": true,\n      pragma: true,\n      referer: true,\n      te: true,\n      trailer: true,\n      \"transfer-encoding\": true,\n      upgrade: true,\n      \"user-agent\": true,\n      \"x-amzn-trace-id\": true,\n    };\n    var PROXY_HEADER_PATTERN = /^proxy-/;\n    var SEC_HEADER_PATTERN = /^sec-/;\n    var ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\n    var EVENT_ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256-PAYLOAD\";\n    var UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\n    var MAX_CACHE_SIZE = 50;\n    var KEY_TYPE_IDENTIFIER = \"aws4_request\";\n    var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;\n    var import_util_hex_encoding = require_dist_cjs30();\n    var import_util_utf8 = require_dist_cjs24();\n    var signingKeyCache = {};\n    var cacheQueue = [];\n    var createScope = /* @__PURE__ */ __name(\n      (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`,\n      \"createScope\"\n    );\n    var getSigningKey = /* @__PURE__ */ __name(\n      async (sha256Constructor, credentials, shortDate, region, service) => {\n        const credsHash = await hmac(\n          sha256Constructor,\n          credentials.secretAccessKey,\n          credentials.accessKeyId\n        );\n        const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;\n        if (cacheKey in signingKeyCache) {\n          return signingKeyCache[cacheKey];\n        }\n        cacheQueue.push(cacheKey);\n        while (cacheQueue.length > MAX_CACHE_SIZE) {\n          delete signingKeyCache[cacheQueue.shift()];\n        }\n        let key = `AWS4${credentials.secretAccessKey}`;\n        for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n          key = await hmac(sha256Constructor, key, signable);\n        }\n        return (signingKeyCache[cacheKey] = key);\n      },\n      \"getSigningKey\"\n    );\n    var clearCredentialCache = /* @__PURE__ */ __name(() => {\n      cacheQueue.length = 0;\n      Object.keys(signingKeyCache).forEach((cacheKey) => {\n        delete signingKeyCache[cacheKey];\n      });\n    }, \"clearCredentialCache\");\n    var hmac = /* @__PURE__ */ __name((ctor, secret, data) => {\n      const hash = new ctor(secret);\n      hash.update((0, import_util_utf8.toUint8Array)(data));\n      return hash.digest();\n    }, \"hmac\");\n    var getCanonicalHeaders = /* @__PURE__ */ __name(\n      ({ headers }, unsignableHeaders, signableHeaders) => {\n        const canonical = {};\n        for (const headerName of Object.keys(headers).sort()) {\n          if (headers[headerName] == void 0) {\n            continue;\n          }\n          const canonicalHeaderName = headerName.toLowerCase();\n          if (\n            canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||\n            (unsignableHeaders == null ? void 0 : unsignableHeaders.has(canonicalHeaderName)) ||\n            PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n            SEC_HEADER_PATTERN.test(canonicalHeaderName)\n          ) {\n            if (\n              !signableHeaders ||\n              (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n            ) {\n              continue;\n            }\n          }\n          canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n        }\n        return canonical;\n      },\n      \"getCanonicalHeaders\"\n    );\n    var import_util_uri_escape = require_dist_cjs26();\n    var getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} }) => {\n      const keys = [];\n      const serialized = {};\n      for (const key of Object.keys(query).sort()) {\n        if (key.toLowerCase() === SIGNATURE_HEADER) {\n          continue;\n        }\n        keys.push(key);\n        const value = query[key];\n        if (typeof value === \"string\") {\n          serialized[key] =\n            `${(0, import_util_uri_escape.escapeUri)(key)}=${(0, import_util_uri_escape.escapeUri)(value)}`;\n        } else if (Array.isArray(value)) {\n          serialized[key] = value\n            .slice(0)\n            .reduce(\n              (encoded, value2) =>\n                encoded.concat([\n                  `${(0, import_util_uri_escape.escapeUri)(key)}=${(0, import_util_uri_escape.escapeUri)(value2)}`,\n                ]),\n              []\n            )\n            .sort()\n            .join(\"&\");\n        }\n      }\n      return keys\n        .map((key) => serialized[key])\n        .filter((serialized2) => serialized2)\n        .join(\"&\");\n    }, \"getCanonicalQuery\");\n    var import_is_array_buffer = require_dist_cjs22();\n    var import_util_utf82 = require_dist_cjs24();\n    var getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor) => {\n      for (const headerName of Object.keys(headers)) {\n        if (headerName.toLowerCase() === SHA256_HEADER) {\n          return headers[headerName];\n        }\n      }\n      if (body == void 0) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n      } else if (\n        typeof body === \"string\" ||\n        ArrayBuffer.isView(body) ||\n        (0, import_is_array_buffer.isArrayBuffer)(body)\n      ) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update((0, import_util_utf82.toUint8Array)(body));\n        return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());\n      }\n      return UNSIGNED_PAYLOAD;\n    }, \"getPayloadHash\");\n    var import_util_utf83 = require_dist_cjs24();\n    var _HeaderFormatter = class _HeaderFormatter {\n      format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)) {\n          const bytes = (0, import_util_utf83.fromUtf8)(headerName);\n          chunks.push(\n            Uint8Array.from([bytes.byteLength]),\n            bytes,\n            this.formatHeaderValue(headers[headerName])\n          );\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks) {\n          out.set(chunk, position);\n          position += chunk.byteLength;\n        }\n        return out;\n      }\n      formatHeaderValue(header) {\n        switch (header.type) {\n          case \"boolean\":\n            return Uint8Array.from([header.value ? 0 : 1]);\n          case \"byte\":\n            return Uint8Array.from([2, header.value]);\n          case \"short\": {\n            const shortView = new DataView(new ArrayBuffer(3));\n            shortView.setUint8(0, 3);\n            shortView.setInt16(1, header.value, false);\n            return new Uint8Array(shortView.buffer);\n          }\n          case \"integer\": {\n            const intView = new DataView(new ArrayBuffer(5));\n            intView.setUint8(0, 4);\n            intView.setInt32(1, header.value, false);\n            return new Uint8Array(intView.buffer);\n          }\n          case \"long\": {\n            const longBytes = new Uint8Array(9);\n            longBytes[0] = 5;\n            longBytes.set(header.value.bytes, 1);\n            return longBytes;\n          }\n          case \"binary\": {\n            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n            binView.setUint8(0, 6);\n            binView.setUint16(1, header.value.byteLength, false);\n            const binBytes = new Uint8Array(binView.buffer);\n            binBytes.set(header.value, 3);\n            return binBytes;\n          }\n          case \"string\": {\n            const utf8Bytes = (0, import_util_utf83.fromUtf8)(header.value);\n            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n            strView.setUint8(0, 7);\n            strView.setUint16(1, utf8Bytes.byteLength, false);\n            const strBytes = new Uint8Array(strView.buffer);\n            strBytes.set(utf8Bytes, 3);\n            return strBytes;\n          }\n          case \"timestamp\": {\n            const tsBytes = new Uint8Array(9);\n            tsBytes[0] = 8;\n            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n            return tsBytes;\n          }\n          case \"uuid\": {\n            if (!UUID_PATTERN.test(header.value)) {\n              throw new Error(`Invalid UUID received: ${header.value}`);\n            }\n            const uuidBytes = new Uint8Array(17);\n            uuidBytes[0] = 9;\n            uuidBytes.set(\n              (0, import_util_hex_encoding.fromHex)(header.value.replace(/-/g, \"\")),\n              1\n            );\n            return uuidBytes;\n          }\n        }\n      }\n    };\n    __name(_HeaderFormatter, \"HeaderFormatter\");\n    var HeaderFormatter = _HeaderFormatter;\n    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n    var _Int64 = class _Int642 {\n      constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n          throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n      }\n      static fromNumber(number) {\n        if (number > 9223372036854776e3 || number < -9223372036854776e3) {\n          throw new Error(\n            `${number} is too large (or, if negative, too small) to represent as an Int64`\n          );\n        }\n        const bytes = new Uint8Array(8);\n        for (\n          let i = 7, remaining = Math.abs(Math.round(number));\n          i > -1 && remaining > 0;\n          i--, remaining /= 256\n        ) {\n          bytes[i] = remaining;\n        }\n        if (number < 0) {\n          negate(bytes);\n        }\n        return new _Int642(bytes);\n      }\n      valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 128;\n        if (negative) {\n          negate(bytes);\n        }\n        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);\n      }\n      toString() {\n        return String(this.valueOf());\n      }\n    };\n    __name(_Int64, \"Int64\");\n    var Int64 = _Int64;\n    function negate(bytes) {\n      for (let i = 0; i < 8; i++) {\n        bytes[i] ^= 255;\n      }\n      for (let i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0) break;\n      }\n    }\n    __name(negate, \"negate\");\n    var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {\n      soughtHeader = soughtHeader.toLowerCase();\n      for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n          return true;\n        }\n      }\n      return false;\n    }, \"hasHeader\");\n    var cloneRequest = /* @__PURE__ */ __name(\n      ({ headers, query, ...rest }) => ({\n        ...rest,\n        headers: { ...headers },\n        query: query ? cloneQuery(query) : void 0,\n      }),\n      \"cloneRequest\"\n    );\n    var cloneQuery = /* @__PURE__ */ __name(\n      (query) =>\n        Object.keys(query).reduce((carry, paramName) => {\n          const param = query[paramName];\n          return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [...param] : param,\n          };\n        }, {}),\n      \"cloneQuery\"\n    );\n    var moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {}) => {\n      var _a;\n      const { headers, query = {} } =\n        typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n      for (const name of Object.keys(headers)) {\n        const lname = name.toLowerCase();\n        if (\n          lname.slice(0, 6) === \"x-amz-\" &&\n          !((_a = options.unhoistableHeaders) == null ? void 0 : _a.has(lname))\n        ) {\n          query[name] = headers[name];\n          delete headers[name];\n        }\n      }\n      return {\n        ...request,\n        headers,\n        query,\n      };\n    }, \"moveHeadersToQuery\");\n    var prepareRequest = /* @__PURE__ */ __name((request) => {\n      request = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n      for (const headerName of Object.keys(request.headers)) {\n        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n          delete request.headers[headerName];\n        }\n      }\n      return request;\n    }, \"prepareRequest\");\n    var iso8601 = /* @__PURE__ */ __name(\n      (time) =>\n        toDate(time)\n          .toISOString()\n          .replace(/\\.\\d{3}Z$/, \"Z\"),\n      \"iso8601\"\n    );\n    var toDate = /* @__PURE__ */ __name((time) => {\n      if (typeof time === \"number\") {\n        return new Date(time * 1e3);\n      }\n      if (typeof time === \"string\") {\n        if (Number(time)) {\n          return new Date(Number(time) * 1e3);\n        }\n        return new Date(time);\n      }\n      return time;\n    }, \"toDate\");\n    var _SignatureV4 = class _SignatureV4 {\n      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {\n        this.headerFormatter = new HeaderFormatter();\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = (0, import_util_middleware.normalizeProvider)(region);\n        this.credentialProvider = (0, import_util_middleware.normalizeProvider)(credentials);\n      }\n      async presign(originalRequest, options = {}) {\n        const {\n          signingDate = /* @__PURE__ */ new Date(),\n          expiresIn = 3600,\n          unsignableHeaders,\n          unhoistableHeaders,\n          signableHeaders,\n          signingRegion,\n          signingService,\n        } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n          return Promise.reject(\n            \"Signature version 4 presigned URLs must have an expiration date less than one week in the future\"\n          );\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });\n        if (credentials.sessionToken) {\n          request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(\n          longDate,\n          scope,\n          this.getSigningKey(credentials, region, shortDate, signingService),\n          this.createCanonicalRequest(\n            request,\n            canonicalHeaders,\n            await getPayloadHash(originalRequest, this.sha256)\n          )\n        );\n        return request;\n      }\n      async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n          return this.signString(toSign, options);\n        } else if (toSign.headers && toSign.payload) {\n          return this.signEvent(toSign, options);\n        } else if (toSign.message) {\n          return this.signMessage(toSign, options);\n        } else {\n          return this.signRequest(toSign, options);\n        }\n      }\n      async signEvent(\n        { headers, payload },\n        { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }\n      ) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());\n        const stringToSign = [\n          EVENT_ALGORITHM_IDENTIFIER,\n          longDate,\n          scope,\n          priorSignature,\n          hashedHeaders,\n          hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, {\n          signingDate,\n          signingRegion: region,\n          signingService,\n        });\n      }\n      async signMessage(\n        signableMessage,\n        { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }\n      ) {\n        const promise = this.signEvent(\n          {\n            headers: this.headerFormatter.format(signableMessage.message.headers),\n            payload: signableMessage.message.body,\n          },\n          {\n            signingDate,\n            signingRegion,\n            signingService,\n            priorSignature: signableMessage.priorSignature,\n          }\n        );\n        return promise.then((signature) => {\n          return { message: signableMessage.message, signature };\n        });\n      }\n      async signString(\n        stringToSign,\n        { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}\n      ) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(\n          await this.getSigningKey(credentials, region, shortDate, signingService)\n        );\n        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));\n        return (0, import_util_hex_encoding.toHex)(await hash.digest());\n      }\n      async signRequest(\n        requestToSign,\n        {\n          signingDate = /* @__PURE__ */ new Date(),\n          signableHeaders,\n          unsignableHeaders,\n          signingRegion,\n          signingService,\n        } = {}\n      ) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n          request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n          request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(\n          longDate,\n          scope,\n          this.getSigningKey(credentials, region, shortDate, signingService),\n          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        );\n        request.headers[AUTH_HEADER] =\n          `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;\n        return request;\n      }\n      createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n      }\n      async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));\n        const hashedRequest = await hash.digest();\n        return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;\n      }\n      getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n          const normalizedPathSegments = [];\n          for (const pathSegment of path.split(\"/\")) {\n            if ((pathSegment == null ? void 0 : pathSegment.length) === 0) continue;\n            if (pathSegment === \".\") continue;\n            if (pathSegment === \"..\") {\n              normalizedPathSegments.pop();\n            } else {\n              normalizedPathSegments.push(pathSegment);\n            }\n          }\n          const normalizedPath = `${(path == null ? void 0 : path.startsWith(\"/\")) ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && (path == null ? void 0 : path.endsWith(\"/\")) ? \"/\" : \"\"}`;\n          const doubleEncoded = (0, import_util_uri_escape.escapeUri)(normalizedPath);\n          return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n      }\n      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(\n          longDate,\n          credentialScope,\n          canonicalRequest\n        );\n        const hash = new this.sha256(await keyPromise);\n        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));\n        return (0, import_util_hex_encoding.toHex)(await hash.digest());\n      }\n      getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n      }\n      validateResolvedCredentials(credentials) {\n        if (\n          typeof credentials !== \"object\" ||\n          typeof credentials.accessKeyId !== \"string\" ||\n          typeof credentials.secretAccessKey !== \"string\"\n        ) {\n          throw new Error(\"Resolved credential object is not valid\");\n        }\n      }\n    };\n    __name(_SignatureV4, \"SignatureV4\");\n    var SignatureV4 = _SignatureV4;\n    var formatDate = /* @__PURE__ */ __name((now) => {\n      const longDate = iso8601(now).replace(/[-:]/g, \"\");\n      return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n      };\n    }, \"formatDate\");\n    var getCanonicalHeaderList = /* @__PURE__ */ __name(\n      (headers) => Object.keys(headers).sort().join(\";\"),\n      \"getCanonicalHeaderList\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/core/dist-cjs/submodules/httpAuthSchemes/index.js\nvar require_httpAuthSchemes = __commonJS({\n  \"node_modules/@aws-sdk/core/dist-cjs/submodules/httpAuthSchemes/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var httpAuthSchemes_exports = {};\n    __export2(httpAuthSchemes_exports, {\n      AWSSDKSigV4Signer: () => AWSSDKSigV4Signer,\n      AwsSdkSigV4Signer: () => AwsSdkSigV4Signer,\n      resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config,\n      resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config,\n    });\n    module2.exports = __toCommonJS2(httpAuthSchemes_exports);\n    var import_protocol_http2 = require_dist_cjs2();\n    var import_protocol_http = require_dist_cjs2();\n    var getDateHeader = /* @__PURE__ */ __name((response) => {\n      var _a, _b;\n      return import_protocol_http.HttpResponse.isInstance(response)\n        ? (((_a = response.headers) == null ? void 0 : _a.date) ??\n            ((_b = response.headers) == null ? void 0 : _b.Date))\n        : void 0;\n    }, \"getDateHeader\");\n    var getSkewCorrectedDate = /* @__PURE__ */ __name(\n      (systemClockOffset) => new Date(Date.now() + systemClockOffset),\n      \"getSkewCorrectedDate\"\n    );\n    var isClockSkewed = /* @__PURE__ */ __name(\n      (clockTime, systemClockOffset) =>\n        Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5,\n      \"isClockSkewed\"\n    );\n    var getUpdatedSystemClockOffset = /* @__PURE__ */ __name(\n      (clockTime, currentSystemClockOffset) => {\n        const clockTimeInMs = Date.parse(clockTime);\n        if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {\n          return clockTimeInMs - Date.now();\n        }\n        return currentSystemClockOffset;\n      },\n      \"getUpdatedSystemClockOffset\"\n    );\n    var throwSigningPropertyError = /* @__PURE__ */ __name((name, property) => {\n      if (!property) {\n        throw new Error(`Property \\`${name}\\` is not resolved for AWS SDK SigV4Auth`);\n      }\n      return property;\n    }, \"throwSigningPropertyError\");\n    var validateSigningProperties = /* @__PURE__ */ __name(async (signingProperties) => {\n      var _a, _b, _c;\n      const context = throwSigningPropertyError(\"context\", signingProperties.context);\n      const config = throwSigningPropertyError(\"config\", signingProperties.config);\n      const authScheme =\n        (_c =\n          (_b = (_a = context.endpointV2) == null ? void 0 : _a.properties) == null\n            ? void 0\n            : _b.authSchemes) == null\n          ? void 0\n          : _c[0];\n      const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n      const signer = await signerFunction(authScheme);\n      const signingRegion = signingProperties == null ? void 0 : signingProperties.signingRegion;\n      const signingName = signingProperties == null ? void 0 : signingProperties.signingName;\n      return {\n        config,\n        signer,\n        signingRegion,\n        signingName,\n      };\n    }, \"validateSigningProperties\");\n    var _AwsSdkSigV4Signer = class _AwsSdkSigV4Signer {\n      async sign(httpRequest, identity, signingProperties) {\n        if (!import_protocol_http2.HttpRequest.isInstance(httpRequest)) {\n          throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n        }\n        const { config, signer, signingRegion, signingName } =\n          await validateSigningProperties(signingProperties);\n        const signedRequest = await signer.sign(httpRequest, {\n          signingDate: getSkewCorrectedDate(config.systemClockOffset),\n          signingRegion,\n          signingService: signingName,\n        });\n        return signedRequest;\n      }\n      errorHandler(signingProperties) {\n        return (error) => {\n          const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n          if (serverTime) {\n            const config = throwSigningPropertyError(\"config\", signingProperties.config);\n            const initialSystemClockOffset = config.systemClockOffset;\n            config.systemClockOffset = getUpdatedSystemClockOffset(\n              serverTime,\n              config.systemClockOffset\n            );\n            const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n            if (clockSkewCorrected && error.$metadata) {\n              error.$metadata.clockSkewCorrected = true;\n            }\n          }\n          throw error;\n        };\n      }\n      successHandler(httpResponse, signingProperties) {\n        const dateHeader = getDateHeader(httpResponse);\n        if (dateHeader) {\n          const config = throwSigningPropertyError(\"config\", signingProperties.config);\n          config.systemClockOffset = getUpdatedSystemClockOffset(\n            dateHeader,\n            config.systemClockOffset\n          );\n        }\n      }\n    };\n    __name(_AwsSdkSigV4Signer, \"AwsSdkSigV4Signer\");\n    var AwsSdkSigV4Signer = _AwsSdkSigV4Signer;\n    var AWSSDKSigV4Signer = AwsSdkSigV4Signer;\n    var import_core = require_dist_cjs34();\n    var import_signature_v4 = require_dist_cjs36();\n    var resolveAwsSdkSigV4Config = /* @__PURE__ */ __name((config) => {\n      let normalizedCreds;\n      if (config.credentials) {\n        normalizedCreds = (0, import_core.memoizeIdentityProvider)(\n          config.credentials,\n          import_core.isIdentityExpired,\n          import_core.doesIdentityRequireRefresh\n        );\n      }\n      if (!normalizedCreds) {\n        if (config.credentialDefaultProvider) {\n          normalizedCreds = (0, import_core.normalizeProvider)(\n            config.credentialDefaultProvider(\n              Object.assign({}, config, {\n                parentClientConfig: config,\n              })\n            )\n          );\n        } else {\n          normalizedCreds = /* @__PURE__ */ __name(async () => {\n            throw new Error(\"`credentials` is missing\");\n          }, \"normalizedCreds\");\n        }\n      }\n      const {\n        signingEscapePath = true,\n        systemClockOffset = config.systemClockOffset || 0,\n        sha256,\n      } = config;\n      let signer;\n      if (config.signer) {\n        signer = (0, import_core.normalizeProvider)(config.signer);\n      } else if (config.regionInfoProvider) {\n        signer = /* @__PURE__ */ __name(\n          () =>\n            (0, import_core.normalizeProvider)(config.region)()\n              .then(async (region) => [\n                (await config.regionInfoProvider(region, {\n                  useFipsEndpoint: await config.useFipsEndpoint(),\n                  useDualstackEndpoint: await config.useDualstackEndpoint(),\n                })) || {},\n                region,\n              ])\n              .then(([regionInfo, region]) => {\n                const { signingRegion, signingService } = regionInfo;\n                config.signingRegion = config.signingRegion || signingRegion || region;\n                config.signingName = config.signingName || signingService || config.serviceId;\n                const params = {\n                  ...config,\n                  credentials: normalizedCreds,\n                  region: config.signingRegion,\n                  service: config.signingName,\n                  sha256,\n                  uriEscapePath: signingEscapePath,\n                };\n                const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;\n                return new SignerCtor(params);\n              }),\n          \"signer\"\n        );\n      } else {\n        signer = /* @__PURE__ */ __name(async (authScheme) => {\n          authScheme = Object.assign(\n            {},\n            {\n              name: \"sigv4\",\n              signingName: config.signingName || config.defaultSigningName,\n              signingRegion: await (0, import_core.normalizeProvider)(config.region)(),\n              properties: {},\n            },\n            authScheme\n          );\n          const signingRegion = authScheme.signingRegion;\n          const signingService = authScheme.signingName;\n          config.signingRegion = config.signingRegion || signingRegion;\n          config.signingName = config.signingName || signingService || config.serviceId;\n          const params = {\n            ...config,\n            credentials: normalizedCreds,\n            region: config.signingRegion,\n            service: config.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n          };\n          const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;\n          return new SignerCtor(params);\n        }, \"signer\");\n      }\n      return {\n        ...config,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n      };\n    }, \"resolveAwsSdkSigV4Config\");\n    var resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;\n  },\n});\n\n// node_modules/fast-xml-parser/src/util.js\nvar require_util = __commonJS({\n  \"node_modules/fast-xml-parser/src/util.js\"(exports) {\n    var nameStartChar =\n      \":A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n    var nameChar = nameStartChar + \"\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n    var nameRegexp = \"[\" + nameStartChar + \"][\" + nameChar + \"]*\";\n    var regexName = new RegExp(\"^\" + nameRegexp + \"$\");\n    var getAllMatches = (string, regex) => {\n      const matches = [];\n      let match = regex.exec(string);\n      while (match) {\n        const allmatches = [];\n        allmatches.startIndex = regex.lastIndex - match[0].length;\n        const len = match.length;\n        for (let index = 0; index < len; index++) {\n          allmatches.push(match[index]);\n        }\n        matches.push(allmatches);\n        match = regex.exec(string);\n      }\n      return matches;\n    };\n    var isName = (string) => {\n      const match = regexName.exec(string);\n      return !(match === null || typeof match === \"undefined\");\n    };\n    exports.isExist = (v) => typeof v !== \"undefined\";\n    exports.isEmptyObject = (obj) => Object.keys(obj).length === 0;\n    exports.merge = (target, a, arrayMode) => {\n      if (a) {\n        const keys = Object.keys(a);\n        const len = keys.length;\n        for (let i = 0; i < len; i++) {\n          if (arrayMode === \"strict\") {\n            target[keys[i]] = [a[keys[i]]];\n          } else {\n            target[keys[i]] = a[keys[i]];\n          }\n        }\n      }\n    };\n    exports.getValue = (v) => {\n      if (exports.isExist(v)) {\n        return v;\n      } else {\n        return \"\";\n      }\n    };\n    exports.isName = isName;\n    exports.getAllMatches = getAllMatches;\n    exports.nameRegexp = nameRegexp;\n  },\n});\n\n// node_modules/fast-xml-parser/src/validator.js\nvar require_validator = __commonJS({\n  \"node_modules/fast-xml-parser/src/validator.js\"(exports) {\n    var util = require_util();\n    var defaultOptions = {\n      allowBooleanAttributes: false,\n      unpairedTags: [],\n    };\n    exports.validate = (xmlData, options) => {\n      options = Object.assign({}, defaultOptions, options);\n      const tags = [];\n      let tagFound = false;\n      let reachedRoot = false;\n      if (xmlData[0] === \"\\uFEFF\") {\n        xmlData = xmlData.substr(1);\n      }\n      for (let i = 0; i < xmlData.length; i++) {\n        if (xmlData[i] === \"<\" && xmlData[i + 1] === \"?\") {\n          i += 2;\n          i = readPI(xmlData, i);\n          if (i.err) return i;\n        } else if (xmlData[i] === \"<\") {\n          const tagStartPos = i;\n          i++;\n          if (xmlData[i] === \"!\") {\n            i = readCommentAndCDATA(xmlData, i);\n          } else {\n            let closingTag = false;\n            if (xmlData[i] === \"/\") {\n              closingTag = true;\n              i++;\n            }\n            let tagName = \"\";\n            for (\n              ;\n              i < xmlData.length &&\n              xmlData[i] !== \">\" &&\n              xmlData[i] !== \" \" &&\n              xmlData[i] !== \"\t\" &&\n              xmlData[i] !== \"\\n\" &&\n              xmlData[i] !== \"\\r\";\n              i++\n            ) {\n              tagName += xmlData[i];\n            }\n            tagName = tagName.trim();\n            if (tagName[tagName.length - 1] === \"/\") {\n              tagName = tagName.substring(0, tagName.length - 1);\n              i--;\n            }\n            if (!validateTagName(tagName)) {\n              let msg;\n              if (tagName.trim().length === 0) {\n                msg = \"Invalid space after '<'.\";\n              } else {\n                msg = \"Tag '\" + tagName + \"' is an invalid name.\";\n              }\n              return getErrorObject(\"InvalidTag\", msg, getLineNumberForPosition(xmlData, i));\n            }\n            const result = readAttributeStr(xmlData, i);\n            if (result === false) {\n              return getErrorObject(\n                \"InvalidAttr\",\n                \"Attributes for '\" + tagName + \"' have open quote.\",\n                getLineNumberForPosition(xmlData, i)\n              );\n            }\n            let attrStr = result.value;\n            i = result.index;\n            if (attrStr[attrStr.length - 1] === \"/\") {\n              const attrStrStart = i - attrStr.length;\n              attrStr = attrStr.substring(0, attrStr.length - 1);\n              const isValid = validateAttributeString(attrStr, options);\n              if (isValid === true) {\n                tagFound = true;\n              } else {\n                return getErrorObject(\n                  isValid.err.code,\n                  isValid.err.msg,\n                  getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line)\n                );\n              }\n            } else if (closingTag) {\n              if (!result.tagClosed) {\n                return getErrorObject(\n                  \"InvalidTag\",\n                  \"Closing tag '\" + tagName + \"' doesn't have proper closing.\",\n                  getLineNumberForPosition(xmlData, i)\n                );\n              } else if (attrStr.trim().length > 0) {\n                return getErrorObject(\n                  \"InvalidTag\",\n                  \"Closing tag '\" + tagName + \"' can't have attributes or invalid starting.\",\n                  getLineNumberForPosition(xmlData, tagStartPos)\n                );\n              } else {\n                const otg = tags.pop();\n                if (tagName !== otg.tagName) {\n                  const openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n                  return getErrorObject(\n                    \"InvalidTag\",\n                    \"Expected closing tag '\" +\n                      otg.tagName +\n                      \"' (opened in line \" +\n                      openPos.line +\n                      \", col \" +\n                      openPos.col +\n                      \") instead of closing tag '\" +\n                      tagName +\n                      \"'.\",\n                    getLineNumberForPosition(xmlData, tagStartPos)\n                  );\n                }\n                if (tags.length == 0) {\n                  reachedRoot = true;\n                }\n              }\n            } else {\n              const isValid = validateAttributeString(attrStr, options);\n              if (isValid !== true) {\n                return getErrorObject(\n                  isValid.err.code,\n                  isValid.err.msg,\n                  getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line)\n                );\n              }\n              if (reachedRoot === true) {\n                return getErrorObject(\n                  \"InvalidXml\",\n                  \"Multiple possible root nodes found.\",\n                  getLineNumberForPosition(xmlData, i)\n                );\n              } else if (options.unpairedTags.indexOf(tagName) !== -1) {\n              } else {\n                tags.push({ tagName, tagStartPos });\n              }\n              tagFound = true;\n            }\n            for (i++; i < xmlData.length; i++) {\n              if (xmlData[i] === \"<\") {\n                if (xmlData[i + 1] === \"!\") {\n                  i++;\n                  i = readCommentAndCDATA(xmlData, i);\n                } else if (xmlData[i + 1] === \"?\") {\n                  i = readPI(xmlData, ++i);\n                  if (i.err) return i;\n                } else {\n                  break;\n                }\n              } else if (xmlData[i] === \"&\") {\n                const afterAmp = validateAmpersand(xmlData, i);\n                if (afterAmp == -1)\n                  return getErrorObject(\n                    \"InvalidChar\",\n                    \"char '&' is not expected.\",\n                    getLineNumberForPosition(xmlData, i)\n                  );\n                i = afterAmp;\n              } else {\n                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n                  return getErrorObject(\n                    \"InvalidXml\",\n                    \"Extra text at the end\",\n                    getLineNumberForPosition(xmlData, i)\n                  );\n                }\n              }\n            }\n            if (xmlData[i] === \"<\") {\n              i--;\n            }\n          }\n        } else {\n          if (isWhiteSpace(xmlData[i])) {\n            continue;\n          }\n          return getErrorObject(\n            \"InvalidChar\",\n            \"char '\" + xmlData[i] + \"' is not expected.\",\n            getLineNumberForPosition(xmlData, i)\n          );\n        }\n      }\n      if (!tagFound) {\n        return getErrorObject(\"InvalidXml\", \"Start tag expected.\", 1);\n      } else if (tags.length == 1) {\n        return getErrorObject(\n          \"InvalidTag\",\n          \"Unclosed tag '\" + tags[0].tagName + \"'.\",\n          getLineNumberForPosition(xmlData, tags[0].tagStartPos)\n        );\n      } else if (tags.length > 0) {\n        return getErrorObject(\n          \"InvalidXml\",\n          \"Invalid '\" +\n            JSON.stringify(\n              tags.map((t) => t.tagName),\n              null,\n              4\n            ).replace(/\\r?\\n/g, \"\") +\n            \"' found.\",\n          { line: 1, col: 1 }\n        );\n      }\n      return true;\n    };\n    function isWhiteSpace(char) {\n      return char === \" \" || char === \"\t\" || char === \"\\n\" || char === \"\\r\";\n    }\n    function readPI(xmlData, i) {\n      const start = i;\n      for (; i < xmlData.length; i++) {\n        if (xmlData[i] == \"?\" || xmlData[i] == \" \") {\n          const tagname = xmlData.substr(start, i - start);\n          if (i > 5 && tagname === \"xml\") {\n            return getErrorObject(\n              \"InvalidXml\",\n              \"XML declaration allowed only at the start of the document.\",\n              getLineNumberForPosition(xmlData, i)\n            );\n          } else if (xmlData[i] == \"?\" && xmlData[i + 1] == \">\") {\n            i++;\n            break;\n          } else {\n          }\n        }\n      }\n      return i;\n    }\n    function readCommentAndCDATA(xmlData, i) {\n      if (xmlData.length > i + 5 && xmlData[i + 1] === \"-\" && xmlData[i + 2] === \"-\") {\n        for (i += 3; i < xmlData.length; i++) {\n          if (xmlData[i] === \"-\" && xmlData[i + 1] === \"-\" && xmlData[i + 2] === \">\") {\n            i += 2;\n            break;\n          }\n        }\n      } else if (\n        xmlData.length > i + 8 &&\n        xmlData[i + 1] === \"D\" &&\n        xmlData[i + 2] === \"O\" &&\n        xmlData[i + 3] === \"C\" &&\n        xmlData[i + 4] === \"T\" &&\n        xmlData[i + 5] === \"Y\" &&\n        xmlData[i + 6] === \"P\" &&\n        xmlData[i + 7] === \"E\"\n      ) {\n        let angleBracketsCount = 1;\n        for (i += 8; i < xmlData.length; i++) {\n          if (xmlData[i] === \"<\") {\n            angleBracketsCount++;\n          } else if (xmlData[i] === \">\") {\n            angleBracketsCount--;\n            if (angleBracketsCount === 0) {\n              break;\n            }\n          }\n        }\n      } else if (\n        xmlData.length > i + 9 &&\n        xmlData[i + 1] === \"[\" &&\n        xmlData[i + 2] === \"C\" &&\n        xmlData[i + 3] === \"D\" &&\n        xmlData[i + 4] === \"A\" &&\n        xmlData[i + 5] === \"T\" &&\n        xmlData[i + 6] === \"A\" &&\n        xmlData[i + 7] === \"[\"\n      ) {\n        for (i += 8; i < xmlData.length; i++) {\n          if (xmlData[i] === \"]\" && xmlData[i + 1] === \"]\" && xmlData[i + 2] === \">\") {\n            i += 2;\n            break;\n          }\n        }\n      }\n      return i;\n    }\n    var doubleQuote = '\"';\n    var singleQuote = \"'\";\n    function readAttributeStr(xmlData, i) {\n      let attrStr = \"\";\n      let startChar = \"\";\n      let tagClosed = false;\n      for (; i < xmlData.length; i++) {\n        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n          if (startChar === \"\") {\n            startChar = xmlData[i];\n          } else if (startChar !== xmlData[i]) {\n          } else {\n            startChar = \"\";\n          }\n        } else if (xmlData[i] === \">\") {\n          if (startChar === \"\") {\n            tagClosed = true;\n            break;\n          }\n        }\n        attrStr += xmlData[i];\n      }\n      if (startChar !== \"\") {\n        return false;\n      }\n      return {\n        value: attrStr,\n        index: i,\n        tagClosed,\n      };\n    }\n    var validAttrStrRegxp = /(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?/g;\n    function validateAttributeString(attrStr, options) {\n      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n      const attrNames = {};\n      for (let i = 0; i < matches.length; i++) {\n        if (matches[i][1].length === 0) {\n          return getErrorObject(\n            \"InvalidAttr\",\n            \"Attribute '\" + matches[i][2] + \"' has no space in starting.\",\n            getPositionFromMatch(matches[i])\n          );\n        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {\n          return getErrorObject(\n            \"InvalidAttr\",\n            \"Attribute '\" + matches[i][2] + \"' is without value.\",\n            getPositionFromMatch(matches[i])\n          );\n        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {\n          return getErrorObject(\n            \"InvalidAttr\",\n            \"boolean attribute '\" + matches[i][2] + \"' is not allowed.\",\n            getPositionFromMatch(matches[i])\n          );\n        }\n        const attrName = matches[i][2];\n        if (!validateAttrName(attrName)) {\n          return getErrorObject(\n            \"InvalidAttr\",\n            \"Attribute '\" + attrName + \"' is an invalid name.\",\n            getPositionFromMatch(matches[i])\n          );\n        }\n        if (!Object.hasOwn(attrNames, attrName)) {\n          attrNames[attrName] = 1;\n        } else {\n          return getErrorObject(\n            \"InvalidAttr\",\n            \"Attribute '\" + attrName + \"' is repeated.\",\n            getPositionFromMatch(matches[i])\n          );\n        }\n      }\n      return true;\n    }\n    function validateNumberAmpersand(xmlData, i) {\n      let re = /\\d/;\n      if (xmlData[i] === \"x\") {\n        i++;\n        re = /[\\da-fA-F]/;\n      }\n      for (; i < xmlData.length; i++) {\n        if (xmlData[i] === \";\") return i;\n        if (!xmlData[i].match(re)) break;\n      }\n      return -1;\n    }\n    function validateAmpersand(xmlData, i) {\n      i++;\n      if (xmlData[i] === \";\") return -1;\n      if (xmlData[i] === \"#\") {\n        i++;\n        return validateNumberAmpersand(xmlData, i);\n      }\n      let count = 0;\n      for (; i < xmlData.length; i++, count++) {\n        if (xmlData[i].match(/\\w/) && count < 20) continue;\n        if (xmlData[i] === \";\") break;\n        return -1;\n      }\n      return i;\n    }\n    function getErrorObject(code, message, lineNumber) {\n      return {\n        err: {\n          code,\n          msg: message,\n          line: lineNumber.line || lineNumber,\n          col: lineNumber.col,\n        },\n      };\n    }\n    function validateAttrName(attrName) {\n      return util.isName(attrName);\n    }\n    function validateTagName(tagname) {\n      return util.isName(tagname);\n    }\n    function getLineNumberForPosition(xmlData, index) {\n      const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n      return {\n        line: lines.length,\n        col: lines[lines.length - 1].length + 1,\n      };\n    }\n    function getPositionFromMatch(match) {\n      return match.startIndex + match[1].length;\n    }\n  },\n});\n\n// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\nvar require_OptionsBuilder = __commonJS({\n  \"node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\"(exports) {\n    var defaultOptions = {\n      preserveOrder: false,\n      attributeNamePrefix: \"@_\",\n      attributesGroupName: false,\n      textNodeName: \"#text\",\n      ignoreAttributes: true,\n      removeNSPrefix: false,\n      allowBooleanAttributes: false,\n      parseTagValue: true,\n      parseAttributeValue: false,\n      trimValues: true,\n      cdataPropName: false,\n      numberParseOptions: {\n        hex: true,\n        leadingZeros: true,\n        eNotation: true,\n      },\n      tagValueProcessor: (tagName, val2) => val2,\n      attributeValueProcessor: (attrName, val2) => val2,\n      stopNodes: [],\n      alwaysCreateTextNode: false,\n      isArray: () => false,\n      commentPropName: false,\n      unpairedTags: [],\n      processEntities: true,\n      htmlEntities: false,\n      ignoreDeclaration: false,\n      ignorePiTags: false,\n      transformTagName: false,\n      transformAttributeName: false,\n      updateTag: (tagName, jPath, attrs) => tagName,\n    };\n    var buildOptions = (options) => Object.assign({}, defaultOptions, options);\n    exports.buildOptions = buildOptions;\n    exports.defaultOptions = defaultOptions;\n  },\n});\n\n// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\nvar require_xmlNode = __commonJS({\n  \"node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\"(exports, module2) {\n    var XmlNode = class {\n      constructor(tagname) {\n        this.tagname = tagname;\n        this.child = [];\n        this[\":@\"] = {};\n      }\n      add(key, val2) {\n        if (key === \"__proto__\") key = \"#__proto__\";\n        this.child.push({ [key]: val2 });\n      }\n      addChild(node) {\n        if (node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n        if (node[\":@\"] && Object.keys(node[\":@\"]).length > 0) {\n          this.child.push({ [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n        } else {\n          this.child.push({ [node.tagname]: node.child });\n        }\n      }\n    };\n    module2.exports = XmlNode;\n  },\n});\n\n// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\nvar require_DocTypeReader = __commonJS({\n  \"node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\"(exports, module2) {\n    var util = require_util();\n    function readDocType(xmlData, i) {\n      const entities = {};\n      if (\n        xmlData[i + 3] === \"O\" &&\n        xmlData[i + 4] === \"C\" &&\n        xmlData[i + 5] === \"T\" &&\n        xmlData[i + 6] === \"Y\" &&\n        xmlData[i + 7] === \"P\" &&\n        xmlData[i + 8] === \"E\"\n      ) {\n        i = i + 9;\n        let angleBracketsCount = 1;\n        let hasBody = false,\n          comment = false;\n        let exp = \"\";\n        for (; i < xmlData.length; i++) {\n          if (xmlData[i] === \"<\" && !comment) {\n            if (hasBody && isEntity(xmlData, i)) {\n              i += 7;\n              [entityName, val, i] = readEntityExp(xmlData, i + 1);\n              if (val.indexOf(\"&\") === -1)\n                entities[validateEntityName(entityName)] = {\n                  regx: RegExp(`&${entityName};`, \"g\"),\n                  val,\n                };\n            } else if (hasBody && isElement(xmlData, i)) i += 8;\n            else if (hasBody && isAttlist(xmlData, i)) i += 8;\n            else if (hasBody && isNotation(xmlData, i)) i += 9;\n            else if (isComment) comment = true;\n            else throw new Error(\"Invalid DOCTYPE\");\n            angleBracketsCount++;\n            exp = \"\";\n          } else if (xmlData[i] === \">\") {\n            if (comment) {\n              if (xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\") {\n                comment = false;\n                angleBracketsCount--;\n              }\n            } else {\n              angleBracketsCount--;\n            }\n            if (angleBracketsCount === 0) {\n              break;\n            }\n          } else if (xmlData[i] === \"[\") {\n            hasBody = true;\n          } else {\n            exp += xmlData[i];\n          }\n        }\n        if (angleBracketsCount !== 0) {\n          throw new Error(`Unclosed DOCTYPE`);\n        }\n      } else {\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n      }\n      return { entities, i };\n    }\n    function readEntityExp(xmlData, i) {\n      let entityName2 = \"\";\n      for (; i < xmlData.length && xmlData[i] !== \"'\" && xmlData[i] !== '\"'; i++) {\n        entityName2 += xmlData[i];\n      }\n      entityName2 = entityName2.trim();\n      if (entityName2.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n      const startChar = xmlData[i++];\n      let val2 = \"\";\n      for (; i < xmlData.length && xmlData[i] !== startChar; i++) {\n        val2 += xmlData[i];\n      }\n      return [entityName2, val2, i];\n    }\n    function isComment(xmlData, i) {\n      if (xmlData[i + 1] === \"!\" && xmlData[i + 2] === \"-\" && xmlData[i + 3] === \"-\") return true;\n      return false;\n    }\n    function isEntity(xmlData, i) {\n      if (\n        xmlData[i + 1] === \"!\" &&\n        xmlData[i + 2] === \"E\" &&\n        xmlData[i + 3] === \"N\" &&\n        xmlData[i + 4] === \"T\" &&\n        xmlData[i + 5] === \"I\" &&\n        xmlData[i + 6] === \"T\" &&\n        xmlData[i + 7] === \"Y\"\n      )\n        return true;\n      return false;\n    }\n    function isElement(xmlData, i) {\n      if (\n        xmlData[i + 1] === \"!\" &&\n        xmlData[i + 2] === \"E\" &&\n        xmlData[i + 3] === \"L\" &&\n        xmlData[i + 4] === \"E\" &&\n        xmlData[i + 5] === \"M\" &&\n        xmlData[i + 6] === \"E\" &&\n        xmlData[i + 7] === \"N\" &&\n        xmlData[i + 8] === \"T\"\n      )\n        return true;\n      return false;\n    }\n    function isAttlist(xmlData, i) {\n      if (\n        xmlData[i + 1] === \"!\" &&\n        xmlData[i + 2] === \"A\" &&\n        xmlData[i + 3] === \"T\" &&\n        xmlData[i + 4] === \"T\" &&\n        xmlData[i + 5] === \"L\" &&\n        xmlData[i + 6] === \"I\" &&\n        xmlData[i + 7] === \"S\" &&\n        xmlData[i + 8] === \"T\"\n      )\n        return true;\n      return false;\n    }\n    function isNotation(xmlData, i) {\n      if (\n        xmlData[i + 1] === \"!\" &&\n        xmlData[i + 2] === \"N\" &&\n        xmlData[i + 3] === \"O\" &&\n        xmlData[i + 4] === \"T\" &&\n        xmlData[i + 5] === \"A\" &&\n        xmlData[i + 6] === \"T\" &&\n        xmlData[i + 7] === \"I\" &&\n        xmlData[i + 8] === \"O\" &&\n        xmlData[i + 9] === \"N\"\n      )\n        return true;\n      return false;\n    }\n    function validateEntityName(name) {\n      if (util.isName(name)) return name;\n      else throw new Error(`Invalid entity name ${name}`);\n    }\n    module2.exports = readDocType;\n  },\n});\n\n// node_modules/strnum/strnum.js\nvar require_strnum = __commonJS({\n  \"node_modules/strnum/strnum.js\"(exports, module2) {\n    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\n    var numRegex = /^([-+])?(0*)(\\.[0-9]+([eE]-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]-?[0-9]+)?)?)$/;\n    if (!Number.parseInt && window.parseInt) {\n      Number.parseInt = window.parseInt;\n    }\n    if (!Number.parseFloat && window.parseFloat) {\n      Number.parseFloat = window.parseFloat;\n    }\n    var consider = {\n      hex: true,\n      leadingZeros: true,\n      decimalPoint: \".\",\n      eNotation: true,\n    };\n    function toNumber(str, options = {}) {\n      options = Object.assign({}, consider, options);\n      if (!str || typeof str !== \"string\") return str;\n      const trimmedStr = str.trim();\n      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr)) return str;\n      else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n      } else {\n        const match = numRegex.exec(trimmedStr);\n        if (match) {\n          const sign = match[1];\n          const leadingZeros = match[2];\n          const numTrimmedByZeros = trimZeros(match[3]);\n          const eNotation = match[4] || match[6];\n          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\")\n            return str;\n          else if (\n            !options.leadingZeros &&\n            leadingZeros.length > 0 &&\n            !sign &&\n            trimmedStr[1] !== \".\"\n          )\n            return str;\n          else {\n            const num = Number(trimmedStr);\n            const numStr = \"\" + num;\n            if (numStr.search(/[eE]/) !== -1) {\n              if (options.eNotation) return num;\n              else return str;\n            } else if (eNotation) {\n              if (options.eNotation) return num;\n              else return str;\n            } else if (trimmedStr.indexOf(\".\") !== -1) {\n              if (numStr === \"0\" && numTrimmedByZeros === \"\") return num;\n              else if (numStr === numTrimmedByZeros) return num;\n              else if (sign && numStr === \"-\" + numTrimmedByZeros) return num;\n              else return str;\n            }\n            if (leadingZeros) {\n              if (numTrimmedByZeros === numStr) return num;\n              else if (sign + numTrimmedByZeros === numStr) return num;\n              else return str;\n            }\n            if (trimmedStr === numStr) return num;\n            else if (trimmedStr === sign + numStr) return num;\n            return str;\n          }\n        } else {\n          return str;\n        }\n      }\n    }\n    function trimZeros(numStr) {\n      if (numStr && numStr.indexOf(\".\") !== -1) {\n        numStr = numStr.replace(/0+$/, \"\");\n        if (numStr === \".\") numStr = \"0\";\n        else if (numStr[0] === \".\") numStr = \"0\" + numStr;\n        else if (numStr[numStr.length - 1] === \".\") numStr = numStr.substr(0, numStr.length - 1);\n        return numStr;\n      }\n      return numStr;\n    }\n    module2.exports = toNumber;\n  },\n});\n\n// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\nvar require_OrderedObjParser = __commonJS({\n  \"node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\"(exports, module2) {\n    var util = require_util();\n    var xmlNode = require_xmlNode();\n    var readDocType = require_DocTypeReader();\n    var toNumber = require_strnum();\n    var regx =\n      \"<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)\".replace(\n        /NAME/g,\n        util.nameRegexp\n      );\n    var OrderedObjParser = class {\n      constructor(options) {\n        this.options = options;\n        this.currentNode = null;\n        this.tagsNodeStack = [];\n        this.docTypeEntities = {};\n        this.lastEntities = {\n          apos: { regex: /&(apos|#39|#x27);/g, val: \"'\" },\n          gt: { regex: /&(gt|#62|#x3E);/g, val: \">\" },\n          lt: { regex: /&(lt|#60|#x3C);/g, val: \"<\" },\n          quot: { regex: /&(quot|#34|#x22);/g, val: '\"' },\n        };\n        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: \"&\" };\n        this.htmlEntities = {\n          space: { regex: /&(nbsp|#160);/g, val: \" \" },\n          cent: { regex: /&(cent|#162);/g, val: \"\\xA2\" },\n          pound: { regex: /&(pound|#163);/g, val: \"\\xA3\" },\n          yen: { regex: /&(yen|#165);/g, val: \"\\xA5\" },\n          euro: { regex: /&(euro|#8364);/g, val: \"\\u20AC\" },\n          copyright: { regex: /&(copy|#169);/g, val: \"\\xA9\" },\n          reg: { regex: /&(reg|#174);/g, val: \"\\xAE\" },\n          inr: { regex: /&(inr|#8377);/g, val: \"\\u20B9\" },\n        };\n        this.addExternalEntities = addExternalEntities;\n        this.parseXml = parseXml;\n        this.parseTextData = parseTextData;\n        this.resolveNameSpace = resolveNameSpace;\n        this.buildAttributesMap = buildAttributesMap;\n        this.isItStopNode = isItStopNode;\n        this.replaceEntitiesValue = replaceEntitiesValue;\n        this.readStopNodeData = readStopNodeData;\n        this.saveTextToParentTag = saveTextToParentTag;\n        this.addChild = addChild;\n      }\n    };\n    function addExternalEntities(externalEntities) {\n      const entKeys = Object.keys(externalEntities);\n      for (let i = 0; i < entKeys.length; i++) {\n        const ent = entKeys[i];\n        this.lastEntities[ent] = {\n          regex: new RegExp(\"&\" + ent + \";\", \"g\"),\n          val: externalEntities[ent],\n        };\n      }\n    }\n    function parseTextData(\n      val2,\n      tagName,\n      jPath,\n      dontTrim,\n      hasAttributes,\n      isLeafNode,\n      escapeEntities\n    ) {\n      if (val2 !== void 0) {\n        if (this.options.trimValues && !dontTrim) {\n          val2 = val2.trim();\n        }\n        if (val2.length > 0) {\n          if (!escapeEntities) val2 = this.replaceEntitiesValue(val2);\n          const newval = this.options.tagValueProcessor(\n            tagName,\n            val2,\n            jPath,\n            hasAttributes,\n            isLeafNode\n          );\n          if (newval === null || newval === void 0) {\n            return val2;\n          } else if (typeof newval !== typeof val2 || newval !== val2) {\n            return newval;\n          } else if (this.options.trimValues) {\n            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);\n          } else {\n            const trimmedVal = val2.trim();\n            if (trimmedVal === val2) {\n              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);\n            } else {\n              return val2;\n            }\n          }\n        }\n      }\n    }\n    function resolveNameSpace(tagname) {\n      if (this.options.removeNSPrefix) {\n        const tags = tagname.split(\":\");\n        const prefix = tagname.charAt(0) === \"/\" ? \"/\" : \"\";\n        if (tags[0] === \"xmlns\") {\n          return \"\";\n        }\n        if (tags.length === 2) {\n          tagname = prefix + tags[1];\n        }\n      }\n      return tagname;\n    }\n    var attrsRegx = /([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?/gm;\n    function buildAttributesMap(attrStr, jPath, tagName) {\n      if (!this.options.ignoreAttributes && typeof attrStr === \"string\") {\n        const matches = util.getAllMatches(attrStr, attrsRegx);\n        const len = matches.length;\n        const attrs = {};\n        for (let i = 0; i < len; i++) {\n          const attrName = this.resolveNameSpace(matches[i][1]);\n          let oldVal = matches[i][4];\n          let aName = this.options.attributeNamePrefix + attrName;\n          if (attrName.length) {\n            if (this.options.transformAttributeName) {\n              aName = this.options.transformAttributeName(aName);\n            }\n            if (aName === \"__proto__\") aName = \"#__proto__\";\n            if (oldVal !== void 0) {\n              if (this.options.trimValues) {\n                oldVal = oldVal.trim();\n              }\n              oldVal = this.replaceEntitiesValue(oldVal);\n              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n              if (newVal === null || newVal === void 0) {\n                attrs[aName] = oldVal;\n              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {\n                attrs[aName] = newVal;\n              } else {\n                attrs[aName] = parseValue(\n                  oldVal,\n                  this.options.parseAttributeValue,\n                  this.options.numberParseOptions\n                );\n              }\n            } else if (this.options.allowBooleanAttributes) {\n              attrs[aName] = true;\n            }\n          }\n        }\n        if (!Object.keys(attrs).length) {\n          return;\n        }\n        if (this.options.attributesGroupName) {\n          const attrCollection = {};\n          attrCollection[this.options.attributesGroupName] = attrs;\n          return attrCollection;\n        }\n        return attrs;\n      }\n    }\n    var parseXml = function (xmlData) {\n      xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n      const xmlObj = new xmlNode(\"!xml\");\n      let currentNode = xmlObj;\n      let textData = \"\";\n      let jPath = \"\";\n      for (let i = 0; i < xmlData.length; i++) {\n        const ch = xmlData[i];\n        if (ch === \"<\") {\n          if (xmlData[i + 1] === \"/\") {\n            const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\");\n            let tagName = xmlData.substring(i + 2, closeIndex).trim();\n            if (this.options.removeNSPrefix) {\n              const colonIndex = tagName.indexOf(\":\");\n              if (colonIndex !== -1) {\n                tagName = tagName.substr(colonIndex + 1);\n              }\n            }\n            if (this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n            if (currentNode) {\n              textData = this.saveTextToParentTag(textData, currentNode, jPath);\n            }\n            const lastTagName = jPath.substring(jPath.lastIndexOf(\".\") + 1);\n            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {\n              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n            }\n            let propIndex = 0;\n            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {\n              propIndex = jPath.lastIndexOf(\".\", jPath.lastIndexOf(\".\") - 1);\n              this.tagsNodeStack.pop();\n            } else {\n              propIndex = jPath.lastIndexOf(\".\");\n            }\n            jPath = jPath.substring(0, propIndex);\n            currentNode = this.tagsNodeStack.pop();\n            textData = \"\";\n            i = closeIndex;\n          } else if (xmlData[i + 1] === \"?\") {\n            const tagData = readTagExp(xmlData, i, false, \"?>\");\n            if (!tagData) throw new Error(\"Pi Tag is not closed.\");\n            textData = this.saveTextToParentTag(textData, currentNode, jPath);\n            if (\n              (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") ||\n              this.options.ignorePiTags\n            ) {\n            } else {\n              const childNode = new xmlNode(tagData.tagName);\n              childNode.add(this.options.textNodeName, \"\");\n              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {\n                childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n              }\n              this.addChild(currentNode, childNode, jPath);\n            }\n            i = tagData.closeIndex + 1;\n          } else if (xmlData.substr(i + 1, 3) === \"!--\") {\n            const endIndex = findClosingIndex(xmlData, \"-->\", i + 4, \"Comment is not closed.\");\n            if (this.options.commentPropName) {\n              const comment = xmlData.substring(i + 4, endIndex - 2);\n              textData = this.saveTextToParentTag(textData, currentNode, jPath);\n              currentNode.add(this.options.commentPropName, [\n                { [this.options.textNodeName]: comment },\n              ]);\n            }\n            i = endIndex;\n          } else if (xmlData.substr(i + 1, 2) === \"!D\") {\n            const result = readDocType(xmlData, i);\n            this.docTypeEntities = result.entities;\n            i = result.i;\n          } else if (xmlData.substr(i + 1, 2) === \"![\") {\n            const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n            const tagExp = xmlData.substring(i + 9, closeIndex);\n            textData = this.saveTextToParentTag(textData, currentNode, jPath);\n            if (this.options.cdataPropName) {\n              currentNode.add(this.options.cdataPropName, [\n                { [this.options.textNodeName]: tagExp },\n              ]);\n            } else {\n              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n              if (val2 == void 0) val2 = \"\";\n              currentNode.add(this.options.textNodeName, val2);\n            }\n            i = closeIndex + 2;\n          } else {\n            const result = readTagExp(xmlData, i, this.options.removeNSPrefix);\n            let tagName = result.tagName;\n            let tagExp = result.tagExp;\n            const attrExpPresent = result.attrExpPresent;\n            const closeIndex = result.closeIndex;\n            if (this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n            if (currentNode && textData) {\n              if (currentNode.tagname !== \"!xml\") {\n                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n              }\n            }\n            const lastTag = currentNode;\n            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {\n              currentNode = this.tagsNodeStack.pop();\n              jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n            }\n            if (tagName !== xmlObj.tagname) {\n              jPath += jPath ? \".\" + tagName : tagName;\n            }\n            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n              let tagContent = \"\";\n              if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n                i = result.closeIndex;\n              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {\n                i = result.closeIndex;\n              } else {\n                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n                if (!result2) throw new Error(`Unexpected end of ${tagName}`);\n                i = result2.i;\n                tagContent = result2.tagContent;\n              }\n              const childNode = new xmlNode(tagName);\n              if (tagName !== tagExp && attrExpPresent) {\n                childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n              }\n              if (tagContent) {\n                tagContent = this.parseTextData(\n                  tagContent,\n                  tagName,\n                  jPath,\n                  true,\n                  attrExpPresent,\n                  true,\n                  true\n                );\n              }\n              jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n              childNode.add(this.options.textNodeName, tagContent);\n              this.addChild(currentNode, childNode, jPath);\n            } else {\n              if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n                if (tagName[tagName.length - 1] === \"/\") {\n                  tagName = tagName.substr(0, tagName.length - 1);\n                  tagExp = tagName;\n                } else {\n                  tagExp = tagExp.substr(0, tagExp.length - 1);\n                }\n                if (this.options.transformTagName) {\n                  tagName = this.options.transformTagName(tagName);\n                }\n                const childNode = new xmlNode(tagName);\n                if (tagName !== tagExp && attrExpPresent) {\n                  childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n                }\n                this.addChild(currentNode, childNode, jPath);\n                jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n              } else {\n                const childNode = new xmlNode(tagName);\n                this.tagsNodeStack.push(currentNode);\n                if (tagName !== tagExp && attrExpPresent) {\n                  childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n                }\n                this.addChild(currentNode, childNode, jPath);\n                currentNode = childNode;\n              }\n              textData = \"\";\n              i = closeIndex;\n            }\n          }\n        } else {\n          textData += xmlData[i];\n        }\n      }\n      return xmlObj.child;\n    };\n    function addChild(currentNode, childNode, jPath) {\n      const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"]);\n      if (result === false) {\n      } else if (typeof result === \"string\") {\n        childNode.tagname = result;\n        currentNode.addChild(childNode);\n      } else {\n        currentNode.addChild(childNode);\n      }\n    }\n    var replaceEntitiesValue = function (val2) {\n      if (this.options.processEntities) {\n        for (const entityName2 in this.docTypeEntities) {\n          const entity = this.docTypeEntities[entityName2];\n          val2 = val2.replace(entity.regx, entity.val);\n        }\n        for (const entityName2 in this.lastEntities) {\n          const entity = this.lastEntities[entityName2];\n          val2 = val2.replace(entity.regex, entity.val);\n        }\n        if (this.options.htmlEntities) {\n          for (const entityName2 in this.htmlEntities) {\n            const entity = this.htmlEntities[entityName2];\n            val2 = val2.replace(entity.regex, entity.val);\n          }\n        }\n        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);\n      }\n      return val2;\n    };\n    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n      if (textData) {\n        if (isLeafNode === void 0) isLeafNode = Object.keys(currentNode.child).length === 0;\n        textData = this.parseTextData(\n          textData,\n          currentNode.tagname,\n          jPath,\n          false,\n          currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n          isLeafNode\n        );\n        if (textData !== void 0 && textData !== \"\")\n          currentNode.add(this.options.textNodeName, textData);\n        textData = \"\";\n      }\n      return textData;\n    }\n    function isItStopNode(stopNodes, jPath, currentTagName) {\n      const allNodesExp = \"*.\" + currentTagName;\n      for (const stopNodePath in stopNodes) {\n        const stopNodeExp = stopNodes[stopNodePath];\n        if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;\n      }\n      return false;\n    }\n    function tagExpWithClosingIndex(xmlData, i, closingChar = \">\") {\n      let attrBoundary;\n      let tagExp = \"\";\n      for (let index = i; index < xmlData.length; index++) {\n        let ch = xmlData[index];\n        if (attrBoundary) {\n          if (ch === attrBoundary) attrBoundary = \"\";\n        } else if (ch === '\"' || ch === \"'\") {\n          attrBoundary = ch;\n        } else if (ch === closingChar[0]) {\n          if (closingChar[1]) {\n            if (xmlData[index + 1] === closingChar[1]) {\n              return {\n                data: tagExp,\n                index,\n              };\n            }\n          } else {\n            return {\n              data: tagExp,\n              index,\n            };\n          }\n        } else if (ch === \"\t\") {\n          ch = \" \";\n        }\n        tagExp += ch;\n      }\n    }\n    function findClosingIndex(xmlData, str, i, errMsg) {\n      const closingIndex = xmlData.indexOf(str, i);\n      if (closingIndex === -1) {\n        throw new Error(errMsg);\n      } else {\n        return closingIndex + str.length - 1;\n      }\n    }\n    function readTagExp(xmlData, i, removeNSPrefix, closingChar = \">\") {\n      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);\n      if (!result) return;\n      let tagExp = result.data;\n      const closeIndex = result.index;\n      const separatorIndex = tagExp.search(/\\s/);\n      let tagName = tagExp;\n      let attrExpPresent = true;\n      if (separatorIndex !== -1) {\n        tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, \"\");\n        tagExp = tagExp.substr(separatorIndex + 1);\n      }\n      if (removeNSPrefix) {\n        const colonIndex = tagName.indexOf(\":\");\n        if (colonIndex !== -1) {\n          tagName = tagName.substr(colonIndex + 1);\n          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n        }\n      }\n      return {\n        tagName,\n        tagExp,\n        closeIndex,\n        attrExpPresent,\n      };\n    }\n    function readStopNodeData(xmlData, tagName, i) {\n      const startIndex = i;\n      let openTagCount = 1;\n      for (; i < xmlData.length; i++) {\n        if (xmlData[i] === \"<\") {\n          if (xmlData[i + 1] === \"/\") {\n            const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n            const closeTagName = xmlData.substring(i + 2, closeIndex).trim();\n            if (closeTagName === tagName) {\n              openTagCount--;\n              if (openTagCount === 0) {\n                return {\n                  tagContent: xmlData.substring(startIndex, i),\n                  i: closeIndex,\n                };\n              }\n            }\n            i = closeIndex;\n          } else if (xmlData[i + 1] === \"?\") {\n            const closeIndex = findClosingIndex(xmlData, \"?>\", i + 1, \"StopNode is not closed.\");\n            i = closeIndex;\n          } else if (xmlData.substr(i + 1, 3) === \"!--\") {\n            const closeIndex = findClosingIndex(xmlData, \"-->\", i + 3, \"StopNode is not closed.\");\n            i = closeIndex;\n          } else if (xmlData.substr(i + 1, 2) === \"![\") {\n            const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n            i = closeIndex;\n          } else {\n            const tagData = readTagExp(xmlData, i, \">\");\n            if (tagData) {\n              const openTagName = tagData && tagData.tagName;\n              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== \"/\") {\n                openTagCount++;\n              }\n              i = tagData.closeIndex;\n            }\n          }\n        }\n      }\n    }\n    function parseValue(val2, shouldParse, options) {\n      if (shouldParse && typeof val2 === \"string\") {\n        const newval = val2.trim();\n        if (newval === \"true\") return true;\n        else if (newval === \"false\") return false;\n        else return toNumber(val2, options);\n      } else {\n        if (util.isExist(val2)) {\n          return val2;\n        } else {\n          return \"\";\n        }\n      }\n    }\n    module2.exports = OrderedObjParser;\n  },\n});\n\n// node_modules/fast-xml-parser/src/xmlparser/node2json.js\nvar require_node2json = __commonJS({\n  \"node_modules/fast-xml-parser/src/xmlparser/node2json.js\"(exports) {\n    function prettify(node, options) {\n      return compress(node, options);\n    }\n    function compress(arr, options, jPath) {\n      let text;\n      const compressedObj = {};\n      for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const property = propName(tagObj);\n        let newJpath = \"\";\n        if (jPath === void 0) newJpath = property;\n        else newJpath = jPath + \".\" + property;\n        if (property === options.textNodeName) {\n          if (text === void 0) text = tagObj[property];\n          else text += \"\" + tagObj[property];\n        } else if (property === void 0) {\n        } else if (tagObj[property]) {\n          let val2 = compress(tagObj[property], options, newJpath);\n          const isLeaf = isLeafTag(val2, options);\n          if (tagObj[\":@\"]) {\n            assignAttributes(val2, tagObj[\":@\"], newJpath, options);\n          } else if (\n            Object.keys(val2).length === 1 &&\n            val2[options.textNodeName] !== void 0 &&\n            !options.alwaysCreateTextNode\n          ) {\n            val2 = val2[options.textNodeName];\n          } else if (Object.keys(val2).length === 0) {\n            if (options.alwaysCreateTextNode) val2[options.textNodeName] = \"\";\n            else val2 = \"\";\n          }\n          if (compressedObj[property] !== void 0 && Object.hasOwn(compressedObj, property)) {\n            if (!Array.isArray(compressedObj[property])) {\n              compressedObj[property] = [compressedObj[property]];\n            }\n            compressedObj[property].push(val2);\n          } else {\n            if (options.isArray(property, newJpath, isLeaf)) {\n              compressedObj[property] = [val2];\n            } else {\n              compressedObj[property] = val2;\n            }\n          }\n        }\n      }\n      if (typeof text === \"string\") {\n        if (text.length > 0) compressedObj[options.textNodeName] = text;\n      } else if (text !== void 0) compressedObj[options.textNodeName] = text;\n      return compressedObj;\n    }\n    function propName(obj) {\n      const keys = Object.keys(obj);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n      }\n    }\n    function assignAttributes(obj, attrMap, jpath, options) {\n      if (attrMap) {\n        const keys = Object.keys(attrMap);\n        const len = keys.length;\n        for (let i = 0; i < len; i++) {\n          const atrrName = keys[i];\n          if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n            obj[atrrName] = [attrMap[atrrName]];\n          } else {\n            obj[atrrName] = attrMap[atrrName];\n          }\n        }\n      }\n    }\n    function isLeafTag(obj, options) {\n      const { textNodeName } = options;\n      const propCount = Object.keys(obj).length;\n      if (propCount === 0) {\n        return true;\n      }\n      if (\n        propCount === 1 &&\n        (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n      ) {\n        return true;\n      }\n      return false;\n    }\n    exports.prettify = prettify;\n  },\n});\n\n// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\nvar require_XMLParser = __commonJS({\n  \"node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\"(exports, module2) {\n    var { buildOptions } = require_OptionsBuilder();\n    var OrderedObjParser = require_OrderedObjParser();\n    var { prettify } = require_node2json();\n    var validator = require_validator();\n    var XMLParser = class {\n      constructor(options) {\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n      }\n      parse(xmlData, validationOption) {\n        if (typeof xmlData === \"string\") {\n        } else if (xmlData.toString) {\n          xmlData = xmlData.toString();\n        } else {\n          throw new Error(\"XML data is accepted in String or Bytes[] form.\");\n        }\n        if (validationOption) {\n          if (validationOption === true) validationOption = {};\n          const result = validator.validate(xmlData, validationOption);\n          if (result !== true) {\n            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);\n          }\n        }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if (this.options.preserveOrder || orderedResult === void 0) return orderedResult;\n        else return prettify(orderedResult, this.options);\n      }\n      addEntity(key, value) {\n        if (value.indexOf(\"&\") !== -1) {\n          throw new Error(\"Entity value can't have '&'\");\n        } else if (key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1) {\n          throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\");\n        } else if (value === \"&\") {\n          throw new Error(\"An entity with value '&' is not permitted\");\n        } else {\n          this.externalEntities[key] = value;\n        }\n      }\n    };\n    module2.exports = XMLParser;\n  },\n});\n\n// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\nvar require_orderedJs2Xml = __commonJS({\n  \"node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\"(exports, module2) {\n    var EOL = \"\\n\";\n    function toXml(jArray, options) {\n      let indentation = \"\";\n      if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n      }\n      return arrToStr(jArray, options, \"\", indentation);\n    }\n    function arrToStr(arr, options, jPath, indentation) {\n      let xmlStr = \"\";\n      let isPreviousElementTag = false;\n      for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName;\n        else newJPath = `${jPath}.${tagName}`;\n        if (tagName === options.textNodeName) {\n          let tagText = tagObj[tagName];\n          if (!isStopNode(newJPath, options)) {\n            tagText = options.tagValueProcessor(tagName, tagText);\n            tagText = replaceEntitiesValue(tagText, options);\n          }\n          if (isPreviousElementTag) {\n            xmlStr += indentation;\n          }\n          xmlStr += tagText;\n          isPreviousElementTag = false;\n          continue;\n        } else if (tagName === options.cdataPropName) {\n          if (isPreviousElementTag) {\n            xmlStr += indentation;\n          }\n          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n          isPreviousElementTag = false;\n          continue;\n        } else if (tagName === options.commentPropName) {\n          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n          isPreviousElementTag = true;\n          continue;\n        } else if (tagName[0] === \"?\") {\n          const attStr2 = attr_to_str(tagObj[\":@\"], options);\n          const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n          let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n          piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\";\n          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;\n          isPreviousElementTag = true;\n          continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n          newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n          if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n          else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n          xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n          xmlStr += tagStart + \">\";\n          if (\n            tagValue &&\n            indentation !== \"\" &&\n            (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))\n          ) {\n            xmlStr += indentation + options.indentBy + tagValue + indentation;\n          } else {\n            xmlStr += tagValue;\n          }\n          xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n      }\n      return xmlStr;\n    }\n    function propName(obj) {\n      const keys = Object.keys(obj);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n      }\n    }\n    function attr_to_str(attrMap, options) {\n      let attrStr = \"\";\n      if (attrMap && !options.ignoreAttributes) {\n        for (const attr in attrMap) {\n          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n          attrVal = replaceEntitiesValue(attrVal, options);\n          if (attrVal === true && options.suppressBooleanAttributes) {\n            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n          } else {\n            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n          }\n        }\n      }\n      return attrStr;\n    }\n    function isStopNode(jPath, options) {\n      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n      const tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n      for (const index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName)\n          return true;\n      }\n      return false;\n    }\n    function replaceEntitiesValue(textValue, options) {\n      if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n          const entity = options.entities[i];\n          textValue = textValue.replace(entity.regex, entity.val);\n        }\n      }\n      return textValue;\n    }\n    module2.exports = toXml;\n  },\n});\n\n// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\nvar require_json2xml = __commonJS({\n  \"node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\"(exports, module2) {\n    var buildFromOrderedJs = require_orderedJs2Xml();\n    var defaultOptions = {\n      attributeNamePrefix: \"@_\",\n      attributesGroupName: false,\n      textNodeName: \"#text\",\n      ignoreAttributes: true,\n      cdataPropName: false,\n      format: false,\n      indentBy: \"  \",\n      suppressEmptyNode: false,\n      suppressUnpairedNode: true,\n      suppressBooleanAttributes: true,\n      tagValueProcessor: (key, a) => a,\n      attributeValueProcessor: (attrName, a) => a,\n      preserveOrder: false,\n      commentPropName: false,\n      unpairedTags: [],\n      entities: [\n        { regex: /&/g, val: \"&amp;\" },\n        { regex: />/g, val: \"&gt;\" },\n        { regex: /</g, val: \"&lt;\" },\n        { regex: /'/g, val: \"&apos;\" },\n        { regex: /\"/g, val: \"&quot;\" },\n      ],\n      processEntities: true,\n      stopNodes: [],\n      oneListGroup: false,\n    };\n    function Builder(options) {\n      this.options = Object.assign({}, defaultOptions, options);\n      if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n        this.isAttribute = () => false;\n      } else {\n        this.attrPrefixLen = this.options.attributeNamePrefix.length;\n        this.isAttribute = isAttribute;\n      }\n      this.processTextOrObjNode = processTextOrObjNode;\n      if (this.options.format) {\n        this.indentate = indentate;\n        this.tagEndChar = \">\\n\";\n        this.newLine = \"\\n\";\n      } else {\n        this.indentate = () => \"\";\n        this.tagEndChar = \">\";\n        this.newLine = \"\";\n      }\n    }\n    Builder.prototype.build = function (jObj) {\n      if (this.options.preserveOrder) {\n        return buildFromOrderedJs(jObj, this.options);\n      } else {\n        if (\n          Array.isArray(jObj) &&\n          this.options.arrayNodeName &&\n          this.options.arrayNodeName.length > 1\n        ) {\n          jObj = {\n            [this.options.arrayNodeName]: jObj,\n          };\n        }\n        return this.j2x(jObj, 0).val;\n      }\n    };\n    Builder.prototype.j2x = function (jObj, level) {\n      let attrStr = \"\";\n      let val2 = \"\";\n      for (const key in jObj) {\n        if (typeof jObj[key] === \"undefined\") {\n        } else if (jObj[key] === null) {\n          if (key[0] === \"?\") val2 += this.indentate(level) + \"<\" + key + \"?\" + this.tagEndChar;\n          else val2 += this.indentate(level) + \"<\" + key + \"/\" + this.tagEndChar;\n        } else if (jObj[key] instanceof Date) {\n          val2 += this.buildTextValNode(jObj[key], key, \"\", level);\n        } else if (typeof jObj[key] !== \"object\") {\n          const attr = this.isAttribute(key);\n          if (attr) {\n            attrStr += this.buildAttrPairStr(attr, \"\" + jObj[key]);\n          } else {\n            if (key === this.options.textNodeName) {\n              const newval = this.options.tagValueProcessor(key, \"\" + jObj[key]);\n              val2 += this.replaceEntitiesValue(newval);\n            } else {\n              val2 += this.buildTextValNode(jObj[key], key, \"\", level);\n            }\n          }\n        } else if (Array.isArray(jObj[key])) {\n          const arrLen = jObj[key].length;\n          let listTagVal = \"\";\n          for (let j = 0; j < arrLen; j++) {\n            const item = jObj[key][j];\n            if (typeof item === \"undefined\") {\n            } else if (item === null) {\n              if (key[0] === \"?\") val2 += this.indentate(level) + \"<\" + key + \"?\" + this.tagEndChar;\n              else val2 += this.indentate(level) + \"<\" + key + \"/\" + this.tagEndChar;\n            } else if (typeof item === \"object\") {\n              if (this.options.oneListGroup) {\n                listTagVal += this.j2x(item, level + 1).val;\n              } else {\n                listTagVal += this.processTextOrObjNode(item, key, level);\n              }\n            } else {\n              listTagVal += this.buildTextValNode(item, key, \"\", level);\n            }\n          }\n          if (this.options.oneListGroup) {\n            listTagVal = this.buildObjectNode(listTagVal, key, \"\", level);\n          }\n          val2 += listTagVal;\n        } else {\n          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n            const Ks = Object.keys(jObj[key]);\n            const L = Ks.length;\n            for (let j = 0; j < L; j++) {\n              attrStr += this.buildAttrPairStr(Ks[j], \"\" + jObj[key][Ks[j]]);\n            }\n          } else {\n            val2 += this.processTextOrObjNode(jObj[key], key, level);\n          }\n        }\n      }\n      return { attrStr, val: val2 };\n    };\n    Builder.prototype.buildAttrPairStr = function (attrName, val2) {\n      val2 = this.options.attributeValueProcessor(attrName, \"\" + val2);\n      val2 = this.replaceEntitiesValue(val2);\n      if (this.options.suppressBooleanAttributes && val2 === \"true\") {\n        return \" \" + attrName;\n      } else return \" \" + attrName + '=\"' + val2 + '\"';\n    };\n    function processTextOrObjNode(object, key, level) {\n      const result = this.j2x(object, level + 1);\n      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {\n        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n      } else {\n        return this.buildObjectNode(result.val, key, result.attrStr, level);\n      }\n    }\n    Builder.prototype.buildObjectNode = function (val2, key, attrStr, level) {\n      if (val2 === \"\") {\n        if (key[0] === \"?\")\n          return this.indentate(level) + \"<\" + key + attrStr + \"?\" + this.tagEndChar;\n        else {\n          return this.indentate(level) + \"<\" + key + attrStr + this.closeTag(key) + this.tagEndChar;\n        }\n      } else {\n        let tagEndExp = \"</\" + key + this.tagEndChar;\n        let piClosingChar = \"\";\n        if (key[0] === \"?\") {\n          piClosingChar = \"?\";\n          tagEndExp = \"\";\n        }\n        if (attrStr && val2.indexOf(\"<\") === -1) {\n          return (\n            this.indentate(level) + \"<\" + key + attrStr + piClosingChar + \">\" + val2 + tagEndExp\n          );\n        } else if (\n          this.options.commentPropName !== false &&\n          key === this.options.commentPropName &&\n          piClosingChar.length === 0\n        ) {\n          return this.indentate(level) + `<!--${val2}-->` + this.newLine;\n        } else {\n          return (\n            this.indentate(level) +\n            \"<\" +\n            key +\n            attrStr +\n            piClosingChar +\n            this.tagEndChar +\n            val2 +\n            this.indentate(level) +\n            tagEndExp\n          );\n        }\n      }\n    };\n    Builder.prototype.closeTag = function (key) {\n      let closeTag = \"\";\n      if (this.options.unpairedTags.indexOf(key) !== -1) {\n        if (!this.options.suppressUnpairedNode) closeTag = \"/\";\n      } else if (this.options.suppressEmptyNode) {\n        closeTag = \"/\";\n      } else {\n        closeTag = `></${key}`;\n      }\n      return closeTag;\n    };\n    Builder.prototype.buildTextValNode = function (val2, key, attrStr, level) {\n      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;\n      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n        return this.indentate(level) + `<!--${val2}-->` + this.newLine;\n      } else if (key[0] === \"?\") {\n        return this.indentate(level) + \"<\" + key + attrStr + \"?\" + this.tagEndChar;\n      } else {\n        let textValue = this.options.tagValueProcessor(key, val2);\n        textValue = this.replaceEntitiesValue(textValue);\n        if (textValue === \"\") {\n          return this.indentate(level) + \"<\" + key + attrStr + this.closeTag(key) + this.tagEndChar;\n        } else {\n          return (\n            this.indentate(level) +\n            \"<\" +\n            key +\n            attrStr +\n            \">\" +\n            textValue +\n            \"</\" +\n            key +\n            this.tagEndChar\n          );\n        }\n      }\n    };\n    Builder.prototype.replaceEntitiesValue = function (textValue) {\n      if (textValue && textValue.length > 0 && this.options.processEntities) {\n        for (let i = 0; i < this.options.entities.length; i++) {\n          const entity = this.options.entities[i];\n          textValue = textValue.replace(entity.regex, entity.val);\n        }\n      }\n      return textValue;\n    };\n    function indentate(level) {\n      return this.options.indentBy.repeat(level);\n    }\n    function isAttribute(name) {\n      if (name.startsWith(this.options.attributeNamePrefix)) {\n        return name.substr(this.attrPrefixLen);\n      } else {\n        return false;\n      }\n    }\n    module2.exports = Builder;\n  },\n});\n\n// node_modules/fast-xml-parser/src/fxp.js\nvar require_fxp = __commonJS({\n  \"node_modules/fast-xml-parser/src/fxp.js\"(exports, module2) {\n    var validator = require_validator();\n    var XMLParser = require_XMLParser();\n    var XMLBuilder = require_json2xml();\n    module2.exports = {\n      XMLParser,\n      XMLValidator: validator,\n      XMLBuilder,\n    };\n  },\n});\n\n// node_modules/@aws-sdk/core/dist-cjs/submodules/protocols/index.js\nvar require_protocols = __commonJS({\n  \"node_modules/@aws-sdk/core/dist-cjs/submodules/protocols/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var protocols_exports = {};\n    __export2(protocols_exports, {\n      _toBool: () => _toBool,\n      _toNum: () => _toNum,\n      _toStr: () => _toStr,\n      awsExpectUnion: () => awsExpectUnion,\n      loadRestJsonErrorCode: () => loadRestJsonErrorCode,\n      loadRestXmlErrorCode: () => loadRestXmlErrorCode,\n      parseJsonBody: () => parseJsonBody,\n      parseJsonErrorBody: () => parseJsonErrorBody,\n      parseXmlBody: () => parseXmlBody,\n      parseXmlErrorBody: () => parseXmlErrorBody,\n    });\n    module2.exports = __toCommonJS2(protocols_exports);\n    var _toStr = /* @__PURE__ */ __name((val2) => {\n      if (val2 == null) {\n        return val2;\n      }\n      if (typeof val2 === \"number\" || typeof val2 === \"bigint\") {\n        const warning = new Error(`Received number ${val2} where a string was expected.`);\n        warning.name = \"Warning\";\n        console.warn(warning);\n        return String(val2);\n      }\n      if (typeof val2 === \"boolean\") {\n        const warning = new Error(`Received boolean ${val2} where a string was expected.`);\n        warning.name = \"Warning\";\n        console.warn(warning);\n        return String(val2);\n      }\n      return val2;\n    }, \"_toStr\");\n    var _toBool = /* @__PURE__ */ __name((val2) => {\n      if (val2 == null) {\n        return val2;\n      }\n      if (typeof val2 === \"number\") {\n      }\n      if (typeof val2 === \"string\") {\n        const lowercase = val2.toLowerCase();\n        if (val2 !== \"\" && lowercase !== \"false\" && lowercase !== \"true\") {\n          const warning = new Error(`Received string \"${val2}\" where a boolean was expected.`);\n          warning.name = \"Warning\";\n          console.warn(warning);\n        }\n        return val2 !== \"\" && lowercase !== \"false\";\n      }\n      return val2;\n    }, \"_toBool\");\n    var _toNum = /* @__PURE__ */ __name((val2) => {\n      if (val2 == null) {\n        return val2;\n      }\n      if (typeof val2 === \"boolean\") {\n      }\n      if (typeof val2 === \"string\") {\n        const num = Number(val2);\n        if (num.toString() !== val2) {\n          const warning = new Error(`Received string \"${val2}\" where a number was expected.`);\n          warning.name = \"Warning\";\n          console.warn(warning);\n          return val2;\n        }\n        return num;\n      }\n      return val2;\n    }, \"_toNum\");\n    var import_smithy_client = require_dist_cjs32();\n    var awsExpectUnion = /* @__PURE__ */ __name((value) => {\n      if (value == null) {\n        return void 0;\n      }\n      if (typeof value === \"object\" && \"__type\" in value) {\n        delete value.__type;\n      }\n      return (0, import_smithy_client.expectUnion)(value);\n    }, \"awsExpectUnion\");\n    var import_smithy_client2 = require_dist_cjs32();\n    var collectBodyString = /* @__PURE__ */ __name(\n      (streamBody, context) =>\n        (0, import_smithy_client2.collectBody)(streamBody, context).then((body) =>\n          context.utf8Encoder(body)\n        ),\n      \"collectBodyString\"\n    );\n    var parseJsonBody = /* @__PURE__ */ __name(\n      (streamBody, context) =>\n        collectBodyString(streamBody, context).then((encoded) => {\n          if (encoded.length) {\n            try {\n              return JSON.parse(encoded);\n            } catch (e) {\n              if ((e == null ? void 0 : e.name) === \"SyntaxError\") {\n                Object.defineProperty(e, \"$responseBodyText\", {\n                  value: encoded,\n                });\n              }\n              throw e;\n            }\n          }\n          return {};\n        }),\n      \"parseJsonBody\"\n    );\n    var parseJsonErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {\n      const value = await parseJsonBody(errorBody, context);\n      value.message = value.message ?? value.Message;\n      return value;\n    }, \"parseJsonErrorBody\");\n    var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {\n      const findKey = /* @__PURE__ */ __name(\n        (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()),\n        \"findKey\"\n      );\n      const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n          cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n          cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n          cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n          cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n      }, \"sanitizeErrorCode\");\n      const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n      if (headerKey !== void 0) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n      }\n      if (data.code !== void 0) {\n        return sanitizeErrorCode(data.code);\n      }\n      if (data[\"__type\"] !== void 0) {\n        return sanitizeErrorCode(data[\"__type\"]);\n      }\n    }, \"loadRestJsonErrorCode\");\n    var import_smithy_client3 = require_dist_cjs32();\n    var import_fast_xml_parser = require_fxp();\n    var parseXmlBody = /* @__PURE__ */ __name(\n      (streamBody, context) =>\n        collectBodyString(streamBody, context).then((encoded) => {\n          if (encoded.length) {\n            const parser = new import_fast_xml_parser.XMLParser({\n              attributeNamePrefix: \"\",\n              htmlEntities: true,\n              ignoreAttributes: false,\n              ignoreDeclaration: true,\n              parseTagValue: false,\n              trimValues: false,\n              tagValueProcessor: (_, val2) =>\n                val2.trim() === \"\" && val2.includes(\"\\n\") ? \"\" : void 0,\n            });\n            parser.addEntity(\"#xD\", \"\\r\");\n            parser.addEntity(\"#10\", \"\\n\");\n            let parsedObj;\n            try {\n              parsedObj = parser.parse(encoded, true);\n            } catch (e) {\n              if (e && typeof e === \"object\") {\n                Object.defineProperty(e, \"$responseBodyText\", {\n                  value: encoded,\n                });\n              }\n              throw e;\n            }\n            const textNodeName = \"#text\";\n            const key = Object.keys(parsedObj)[0];\n            const parsedObjToReturn = parsedObj[key];\n            if (parsedObjToReturn[textNodeName]) {\n              parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n              delete parsedObjToReturn[textNodeName];\n            }\n            return (0, import_smithy_client3.getValueFromTextNode)(parsedObjToReturn);\n          }\n          return {};\n        }),\n      \"parseXmlBody\"\n    );\n    var parseXmlErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {\n      const value = await parseXmlBody(errorBody, context);\n      if (value.Error) {\n        value.Error.message = value.Error.message ?? value.Error.Message;\n      }\n      return value;\n    }, \"parseXmlErrorBody\");\n    var loadRestXmlErrorCode = /* @__PURE__ */ __name((output, data) => {\n      var _a;\n      if (((_a = data == null ? void 0 : data.Error) == null ? void 0 : _a.Code) !== void 0) {\n        return data.Error.Code;\n      }\n      if ((data == null ? void 0 : data.Code) !== void 0) {\n        return data.Code;\n      }\n      if (output.statusCode == 404) {\n        return \"NotFound\";\n      }\n    }, \"loadRestXmlErrorCode\");\n  },\n});\n\n// node_modules/@aws-sdk/core/dist-cjs/index.js\nvar require_dist_cjs37 = __commonJS({\n  \"node_modules/@aws-sdk/core/dist-cjs/index.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var tslib_1 = require_tslib();\n    tslib_1.__exportStar(require_client(), exports);\n    tslib_1.__exportStar(require_httpAuthSchemes(), exports);\n    tslib_1.__exportStar(require_protocols(), exports);\n  },\n});\n\n// node_modules/@aws-sdk/client-iot-wireless/dist-cjs/auth/httpAuthSchemeProvider.js\nvar require_httpAuthSchemeProvider = __commonJS({\n  \"node_modules/@aws-sdk/client-iot-wireless/dist-cjs/auth/httpAuthSchemeProvider.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.resolveHttpAuthSchemeConfig =\n      exports.defaultIoTWirelessHttpAuthSchemeProvider =\n      exports.defaultIoTWirelessHttpAuthSchemeParametersProvider =\n        void 0;\n    var core_1 = require_dist_cjs37();\n    var util_middleware_1 = require_dist_cjs10();\n    var defaultIoTWirelessHttpAuthSchemeParametersProvider = async (config, context, input) => {\n      return {\n        operation: (0, util_middleware_1.getSmithyContext)(context).operation,\n        region:\n          (await (0, util_middleware_1.normalizeProvider)(config.region)()) ||\n          (() => {\n            throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n          })(),\n      };\n    };\n    exports.defaultIoTWirelessHttpAuthSchemeParametersProvider =\n      defaultIoTWirelessHttpAuthSchemeParametersProvider;\n    function createAwsAuthSigv4HttpAuthOption(authParameters) {\n      return {\n        schemeId: \"aws.auth#sigv4\",\n        signingProperties: {\n          name: \"iotwireless\",\n          region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n          signingProperties: {\n            config,\n            context,\n          },\n        }),\n      };\n    }\n    var defaultIoTWirelessHttpAuthSchemeProvider = (authParameters) => {\n      const options = [];\n      switch (authParameters.operation) {\n        default: {\n          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n        }\n      }\n      return options;\n    };\n    exports.defaultIoTWirelessHttpAuthSchemeProvider = defaultIoTWirelessHttpAuthSchemeProvider;\n    var resolveHttpAuthSchemeConfig = (config) => {\n      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);\n      return {\n        ...config_0,\n      };\n    };\n    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-iot-wireless/package.json\nvar require_package = __commonJS({\n  \"node_modules/@aws-sdk/client-iot-wireless/package.json\"(exports, module2) {\n    module2.exports = {\n      name: \"@aws-sdk/client-iot-wireless\",\n      description:\n        \"AWS SDK for JavaScript Iot Wireless Client for Node.js, Browser and React Native\",\n      version: \"3.600.0\",\n      scripts: {\n        build: \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n        \"build:cjs\": \"node ../../scripts/compilation/inline client-iot-wireless\",\n        \"build:es\": \"tsc -p tsconfig.es.json\",\n        \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n        \"build:types\": \"tsc -p tsconfig.types.json\",\n        \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n        clean: \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n        \"extract:docs\": \"api-extractor run --local\",\n        \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo iot-wireless\",\n      },\n      main: \"./dist-cjs/index.js\",\n      types: \"./dist-types/index.d.ts\",\n      module: \"./dist-es/index.js\",\n      sideEffects: false,\n      dependencies: {\n        \"@aws-crypto/sha256-browser\": \"5.2.0\",\n        \"@aws-crypto/sha256-js\": \"5.2.0\",\n        \"@aws-sdk/client-sso-oidc\": \"3.600.0\",\n        \"@aws-sdk/client-sts\": \"3.600.0\",\n        \"@aws-sdk/core\": \"3.598.0\",\n        \"@aws-sdk/credential-provider-node\": \"3.600.0\",\n        \"@aws-sdk/middleware-host-header\": \"3.598.0\",\n        \"@aws-sdk/middleware-logger\": \"3.598.0\",\n        \"@aws-sdk/middleware-recursion-detection\": \"3.598.0\",\n        \"@aws-sdk/middleware-user-agent\": \"3.598.0\",\n        \"@aws-sdk/region-config-resolver\": \"3.598.0\",\n        \"@aws-sdk/types\": \"3.598.0\",\n        \"@aws-sdk/util-endpoints\": \"3.598.0\",\n        \"@aws-sdk/util-user-agent-browser\": \"3.598.0\",\n        \"@aws-sdk/util-user-agent-node\": \"3.598.0\",\n        \"@smithy/config-resolver\": \"^3.0.2\",\n        \"@smithy/core\": \"^2.2.1\",\n        \"@smithy/fetch-http-handler\": \"^3.0.2\",\n        \"@smithy/hash-node\": \"^3.0.1\",\n        \"@smithy/invalid-dependency\": \"^3.0.1\",\n        \"@smithy/middleware-content-length\": \"^3.0.1\",\n        \"@smithy/middleware-endpoint\": \"^3.0.2\",\n        \"@smithy/middleware-retry\": \"^3.0.4\",\n        \"@smithy/middleware-serde\": \"^3.0.1\",\n        \"@smithy/middleware-stack\": \"^3.0.1\",\n        \"@smithy/node-config-provider\": \"^3.1.1\",\n        \"@smithy/node-http-handler\": \"^3.0.1\",\n        \"@smithy/protocol-http\": \"^4.0.1\",\n        \"@smithy/smithy-client\": \"^3.1.2\",\n        \"@smithy/types\": \"^3.1.0\",\n        \"@smithy/url-parser\": \"^3.0.1\",\n        \"@smithy/util-base64\": \"^3.0.0\",\n        \"@smithy/util-body-length-browser\": \"^3.0.0\",\n        \"@smithy/util-body-length-node\": \"^3.0.0\",\n        \"@smithy/util-defaults-mode-browser\": \"^3.0.4\",\n        \"@smithy/util-defaults-mode-node\": \"^3.0.4\",\n        \"@smithy/util-endpoints\": \"^2.0.2\",\n        \"@smithy/util-middleware\": \"^3.0.1\",\n        \"@smithy/util-retry\": \"^3.0.1\",\n        \"@smithy/util-stream\": \"^3.0.2\",\n        \"@smithy/util-utf8\": \"^3.0.0\",\n        tslib: \"^2.6.2\",\n        uuid: \"^9.0.1\",\n      },\n      devDependencies: {\n        \"@tsconfig/node16\": \"16.1.3\",\n        \"@types/node\": \"^16.18.96\",\n        \"@types/uuid\": \"^9.0.4\",\n        concurrently: \"7.0.0\",\n        \"downlevel-dts\": \"0.10.1\",\n        rimraf: \"3.0.2\",\n        typescript: \"~4.9.5\",\n      },\n      engines: {\n        node: \">=16.0.0\",\n      },\n      typesVersions: {\n        \"<4.0\": {\n          \"dist-types/*\": [\"dist-types/ts3.4/*\"],\n        },\n      },\n      files: [\"dist-*/**\"],\n      author: {\n        name: \"AWS SDK for JavaScript Team\",\n        url: \"https://aws.amazon.com/javascript/\",\n      },\n      license: \"Apache-2.0\",\n      browser: {\n        \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\",\n      },\n      \"react-native\": {\n        \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\",\n      },\n      homepage: \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-iot-wireless\",\n      repository: {\n        type: \"git\",\n        url: \"https://github.com/aws/aws-sdk-js-v3.git\",\n        directory: \"clients/client-iot-wireless\",\n      },\n    };\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js\nvar require_dist_cjs38 = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,\n      ENV_EXPIRATION: () => ENV_EXPIRATION,\n      ENV_KEY: () => ENV_KEY,\n      ENV_SECRET: () => ENV_SECRET,\n      ENV_SESSION: () => ENV_SESSION,\n      fromEnv: () => fromEnv,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_property_provider = require_dist_cjs12();\n    var ENV_KEY = \"AWS_ACCESS_KEY_ID\";\n    var ENV_SECRET = \"AWS_SECRET_ACCESS_KEY\";\n    var ENV_SESSION = \"AWS_SESSION_TOKEN\";\n    var ENV_EXPIRATION = \"AWS_CREDENTIAL_EXPIRATION\";\n    var ENV_CREDENTIAL_SCOPE = \"AWS_CREDENTIAL_SCOPE\";\n    var fromEnv = /* @__PURE__ */ __name(\n      (init) => async () => {\n        var _a;\n        (_a = init == null ? void 0 : init.logger) == null\n          ? void 0\n          : _a.debug(\"@aws-sdk/credential-provider-env - fromEnv\");\n        const accessKeyId = process.env[ENV_KEY];\n        const secretAccessKey = process.env[ENV_SECRET];\n        const sessionToken = process.env[ENV_SESSION];\n        const expiry = process.env[ENV_EXPIRATION];\n        const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];\n        if (accessKeyId && secretAccessKey) {\n          return {\n            accessKeyId,\n            secretAccessKey,\n            ...(sessionToken && { sessionToken }),\n            ...(expiry && { expiration: new Date(expiry) }),\n            ...(credentialScope && { credentialScope }),\n          };\n        }\n        throw new import_property_provider.CredentialsProviderError(\n          \"Unable to find environment variable credentials.\",\n          { logger: init == null ? void 0 : init.logger }\n        );\n      },\n      \"fromEnv\"\n    );\n  },\n});\n\n// node_modules/@smithy/credential-provider-imds/dist-cjs/index.js\nvar require_dist_cjs39 = __commonJS({\n  \"node_modules/@smithy/credential-provider-imds/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,\n      DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,\n      ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,\n      ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,\n      ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,\n      Endpoint: () => Endpoint,\n      fromContainerMetadata: () => fromContainerMetadata,\n      fromInstanceMetadata: () => fromInstanceMetadata,\n      getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,\n      httpRequest: () => httpRequest,\n      providerConfigFromInit: () => providerConfigFromInit,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_url = require(\"url\");\n    var import_property_provider = require_dist_cjs12();\n    var import_buffer = require(\"buffer\");\n    var import_http = require(\"http\");\n    function httpRequest(options) {\n      return new Promise((resolve, reject) => {\n        var _a;\n        const req = (0, import_http.request)({\n          method: \"GET\",\n          ...options,\n          hostname: (_a = options.hostname) == null ? void 0 : _a.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n          reject(\n            Object.assign(\n              new import_property_provider.ProviderError(\n                \"Unable to connect to instance metadata service\"\n              ),\n              err\n            )\n          );\n          req.destroy();\n        });\n        req.on(\"timeout\", () => {\n          reject(\n            new import_property_provider.ProviderError(\n              \"TimeoutError from instance metadata service\"\n            )\n          );\n          req.destroy();\n        });\n        req.on(\"response\", (res) => {\n          const { statusCode = 400 } = res;\n          if (statusCode < 200 || 300 <= statusCode) {\n            reject(\n              Object.assign(\n                new import_property_provider.ProviderError(\n                  \"Error response received from instance metadata service\"\n                ),\n                { statusCode }\n              )\n            );\n            req.destroy();\n          }\n          const chunks = [];\n          res.on(\"data\", (chunk) => {\n            chunks.push(chunk);\n          });\n          res.on(\"end\", () => {\n            resolve(import_buffer.Buffer.concat(chunks));\n            req.destroy();\n          });\n        });\n        req.end();\n      });\n    }\n    __name(httpRequest, \"httpRequest\");\n    var isImdsCredentials = /* @__PURE__ */ __name(\n      (arg) =>\n        Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.AccessKeyId === \"string\" &&\n        typeof arg.SecretAccessKey === \"string\" &&\n        typeof arg.Token === \"string\" &&\n        typeof arg.Expiration === \"string\",\n      \"isImdsCredentials\"\n    );\n    var fromImdsCredentials = /* @__PURE__ */ __name(\n      (creds) => ({\n        accessKeyId: creds.AccessKeyId,\n        secretAccessKey: creds.SecretAccessKey,\n        sessionToken: creds.Token,\n        expiration: new Date(creds.Expiration),\n      }),\n      \"fromImdsCredentials\"\n    );\n    var DEFAULT_TIMEOUT = 1e3;\n    var DEFAULT_MAX_RETRIES = 0;\n    var providerConfigFromInit = /* @__PURE__ */ __name(\n      ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT }) => ({\n        maxRetries,\n        timeout,\n      }),\n      \"providerConfigFromInit\"\n    );\n    var retry = /* @__PURE__ */ __name((toRetry, maxRetries) => {\n      let promise = toRetry();\n      for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n      }\n      return promise;\n    }, \"retry\");\n    var ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\n    var ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\n    var ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\n    var fromContainerMetadata = /* @__PURE__ */ __name((init = {}) => {\n      const { timeout, maxRetries } = providerConfigFromInit(init);\n      return () =>\n        retry(async () => {\n          const requestOptions = await getCmdsUri({ logger: init.logger });\n          const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n          if (!isImdsCredentials(credsResponse)) {\n            throw new import_property_provider.CredentialsProviderError(\n              \"Invalid response received from instance metadata service.\",\n              {\n                logger: init.logger,\n              }\n            );\n          }\n          return fromImdsCredentials(credsResponse);\n        }, maxRetries);\n    }, \"fromContainerMetadata\");\n    var requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options) => {\n      if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n          ...options.headers,\n          Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n      }\n      const buffer = await httpRequest({\n        ...options,\n        timeout,\n      });\n      return buffer.toString();\n    }, \"requestFromEcsImds\");\n    var CMDS_IP = \"169.254.170.2\";\n    var GREENGRASS_HOSTS = {\n      localhost: true,\n      \"127.0.0.1\": true,\n    };\n    var GREENGRASS_PROTOCOLS = {\n      \"http:\": true,\n      \"https:\": true,\n    };\n    var getCmdsUri = /* @__PURE__ */ __name(async ({ logger }) => {\n      if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n          hostname: CMDS_IP,\n          path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n      }\n      if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n          throw new import_property_provider.CredentialsProviderError(\n            `${parsed.hostname} is not a valid container metadata service hostname`,\n            {\n              tryNextLink: false,\n              logger,\n            }\n          );\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n          throw new import_property_provider.CredentialsProviderError(\n            `${parsed.protocol} is not a valid container metadata service protocol`,\n            {\n              tryNextLink: false,\n              logger,\n            }\n          );\n        }\n        return {\n          ...parsed,\n          port: parsed.port ? parseInt(parsed.port, 10) : void 0,\n        };\n      }\n      throw new import_property_provider.CredentialsProviderError(\n        `The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`,\n        {\n          tryNextLink: false,\n          logger,\n        }\n      );\n    }, \"getCmdsUri\");\n    var _InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError2 extends import_property_provider.CredentialsProviderError {\n      constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError2.prototype);\n      }\n    };\n    __name(_InstanceMetadataV1FallbackError, \"InstanceMetadataV1FallbackError\");\n    var InstanceMetadataV1FallbackError = _InstanceMetadataV1FallbackError;\n    var import_node_config_provider = require_dist_cjs14();\n    var import_url_parser = require_dist_cjs16();\n    var Endpoint = /* @__PURE__ */ ((Endpoint2) => {\n      Endpoint2[\"IPv4\"] = \"http://169.254.169.254\";\n      Endpoint2[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n      return Endpoint2;\n    })(Endpoint || {});\n    var ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\n    var CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\n    var ENDPOINT_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n      default: void 0,\n    };\n    var EndpointMode = /* @__PURE__ */ ((EndpointMode2) => {\n      EndpointMode2[\"IPv4\"] = \"IPv4\";\n      EndpointMode2[\"IPv6\"] = \"IPv6\";\n      return EndpointMode2;\n    })(EndpointMode || {});\n    var ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\n    var CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\n    var ENDPOINT_MODE_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n      default: \"IPv4\",\n    };\n    var getInstanceMetadataEndpoint = /* @__PURE__ */ __name(\n      async () =>\n        (0, import_url_parser.parseUrl)(\n          (await getFromEndpointConfig()) || (await getFromEndpointModeConfig())\n        ),\n      \"getInstanceMetadataEndpoint\"\n    );\n    var getFromEndpointConfig = /* @__PURE__ */ __name(\n      async () => (0, import_node_config_provider.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(),\n      \"getFromEndpointConfig\"\n    );\n    var getFromEndpointModeConfig = /* @__PURE__ */ __name(async () => {\n      const endpointMode = await (0, import_node_config_provider.loadConfig)(\n        ENDPOINT_MODE_CONFIG_OPTIONS\n      )();\n      switch (endpointMode) {\n        case \"IPv4\":\n          return \"http://169.254.169.254\";\n        case \"IPv6\":\n          return \"http://[fd00:ec2::254]\";\n        default:\n          throw new Error(\n            `Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`\n          );\n      }\n    }, \"getFromEndpointModeConfig\");\n    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\n    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\n    var STATIC_STABILITY_DOC_URL =\n      \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\n    var getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger) => {\n      const refreshInterval =\n        STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);\n      logger.warn(\n        `Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: ` + STATIC_STABILITY_DOC_URL\n      );\n      const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n      return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n      };\n    }, \"getExtendedInstanceMetadataCredentials\");\n    var staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {}) => {\n      const logger = (options == null ? void 0 : options.logger) || console;\n      let pastCredentials;\n      return async () => {\n        let credentials;\n        try {\n          credentials = await provider();\n          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n            credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n          }\n        } catch (e) {\n          if (pastCredentials) {\n            logger.warn(\"Credential renew failed: \", e);\n            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n          } else {\n            throw e;\n          }\n        }\n        pastCredentials = credentials;\n        return credentials;\n      };\n    }, \"staticStabilityProvider\");\n    var IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\n    var IMDS_TOKEN_PATH = \"/latest/api/token\";\n    var AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\n    var PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\n    var X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\n    var fromInstanceMetadata = /* @__PURE__ */ __name(\n      (init = {}) =>\n        staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger }),\n      \"fromInstanceMetadata\"\n    );\n    var getInstanceMetadataProvider = /* @__PURE__ */ __name((init = {}) => {\n      let disableFetchToken = false;\n      const { logger, profile } = init;\n      const { timeout, maxRetries } = providerConfigFromInit(init);\n      const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options) => {\n        var _a;\n        const isImdsV1Fallback =\n          disableFetchToken ||\n          ((_a = options.headers) == null ? void 0 : _a[X_AWS_EC2_METADATA_TOKEN]) == null;\n        if (isImdsV1Fallback) {\n          let fallbackBlockedFromProfile = false;\n          let fallbackBlockedFromProcessEnv = false;\n          const configValue = await (0, import_node_config_provider.loadConfig)(\n            {\n              environmentVariableSelector: (env) => {\n                const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                if (envValue === void 0) {\n                  throw new import_property_provider.CredentialsProviderError(\n                    `${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`,\n                    { logger: init.logger }\n                  );\n                }\n                return fallbackBlockedFromProcessEnv;\n              },\n              configFileSelector: (profile2) => {\n                const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                return fallbackBlockedFromProfile;\n              },\n              default: false,\n            },\n            {\n              profile,\n            }\n          )();\n          if (init.ec2MetadataV1Disabled || configValue) {\n            const causes = [];\n            if (init.ec2MetadataV1Disabled)\n              causes.push(\n                \"credential provider initialization (runtime option ec2MetadataV1Disabled)\"\n              );\n            if (fallbackBlockedFromProfile)\n              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n            if (fallbackBlockedFromProcessEnv)\n              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n            throw new InstanceMetadataV1FallbackError(\n              `AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\n                \", \"\n              )}].`\n            );\n          }\n        }\n        const imdsProfile = (\n          await retry(async () => {\n            let profile2;\n            try {\n              profile2 = await getProfile(options);\n            } catch (err) {\n              if (err.statusCode === 401) {\n                disableFetchToken = false;\n              }\n              throw err;\n            }\n            return profile2;\n          }, maxRetries2)\n        ).trim();\n        return retry(async () => {\n          let creds;\n          try {\n            creds = await getCredentialsFromProfile(imdsProfile, options, init);\n          } catch (err) {\n            if (err.statusCode === 401) {\n              disableFetchToken = false;\n            }\n            throw err;\n          }\n          return creds;\n        }, maxRetries2);\n      }, \"getCredentials\");\n      return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n          logger == null\n            ? void 0\n            : logger.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n          return getCredentials(maxRetries, { ...endpoint, timeout });\n        } else {\n          let token;\n          try {\n            token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n          } catch (error) {\n            if ((error == null ? void 0 : error.statusCode) === 400) {\n              throw Object.assign(error, {\n                message: \"EC2 Metadata token request returned error\",\n              });\n            } else if (\n              error.message === \"TimeoutError\" ||\n              [403, 404, 405].includes(error.statusCode)\n            ) {\n              disableFetchToken = true;\n            }\n            logger == null\n              ? void 0\n              : logger.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n          }\n          return getCredentials(maxRetries, {\n            ...endpoint,\n            headers: {\n              [X_AWS_EC2_METADATA_TOKEN]: token,\n            },\n            timeout,\n          });\n        }\n      };\n    }, \"getInstanceMetadataProvider\");\n    var getMetadataToken = /* @__PURE__ */ __name(\n      async (options) =>\n        httpRequest({\n          ...options,\n          path: IMDS_TOKEN_PATH,\n          method: \"PUT\",\n          headers: {\n            \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n          },\n        }),\n      \"getMetadataToken\"\n    );\n    var getProfile = /* @__PURE__ */ __name(\n      async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString(),\n      \"getProfile\"\n    );\n    var getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options, init) => {\n      const credentialsResponse = JSON.parse(\n        (\n          await httpRequest({\n            ...options,\n            path: IMDS_PATH + profile,\n          })\n        ).toString()\n      );\n      if (!isImdsCredentials(credentialsResponse)) {\n        throw new import_property_provider.CredentialsProviderError(\n          \"Invalid response received from instance metadata service.\",\n          {\n            logger: init.logger,\n          }\n        );\n      }\n      return fromImdsCredentials(credentialsResponse);\n    }, \"getCredentialsFromProfile\");\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js\nvar require_checkUrl = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.checkUrl = void 0;\n    var property_provider_1 = require_dist_cjs12();\n    var ECS_CONTAINER_HOST = \"169.254.170.2\";\n    var EKS_CONTAINER_HOST_IPv4 = \"169.254.170.23\";\n    var EKS_CONTAINER_HOST_IPv6 = \"[fd00:ec2::23]\";\n    var checkUrl = (url, logger) => {\n      if (url.protocol === \"https:\") {\n        return;\n      }\n      if (\n        url.hostname === ECS_CONTAINER_HOST ||\n        url.hostname === EKS_CONTAINER_HOST_IPv4 ||\n        url.hostname === EKS_CONTAINER_HOST_IPv6\n      ) {\n        return;\n      }\n      if (url.hostname.includes(\"[\")) {\n        if (\n          url.hostname === \"[::1]\" ||\n          url.hostname === \"[0000:0000:0000:0000:0000:0000:0000:0001]\"\n        ) {\n          return;\n        }\n      } else {\n        if (url.hostname === \"localhost\") {\n          return;\n        }\n        const ipComponents = url.hostname.split(\".\");\n        const inRange = (component) => {\n          const num = parseInt(component, 10);\n          return 0 <= num && num <= 255;\n        };\n        if (\n          ipComponents[0] === \"127\" &&\n          inRange(ipComponents[1]) &&\n          inRange(ipComponents[2]) &&\n          inRange(ipComponents[3]) &&\n          ipComponents.length === 4\n        ) {\n          return;\n        }\n      }\n      throw new property_provider_1.CredentialsProviderError(\n        `URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]`,\n        { logger }\n      );\n    };\n    exports.checkUrl = checkUrl;\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js\nvar require_requestHelpers = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getCredentials = exports.createGetRequest = void 0;\n    var property_provider_1 = require_dist_cjs12();\n    var protocol_http_1 = require_dist_cjs2();\n    var smithy_client_1 = require_dist_cjs32();\n    var util_stream_1 = require_dist_cjs31();\n    function createGetRequest(url) {\n      return new protocol_http_1.HttpRequest({\n        protocol: url.protocol,\n        hostname: url.hostname,\n        port: Number(url.port),\n        path: url.pathname,\n        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {\n          acc[k] = v;\n          return acc;\n        }, {}),\n        fragment: url.hash,\n      });\n    }\n    exports.createGetRequest = createGetRequest;\n    async function getCredentials(response, logger) {\n      const stream = (0, util_stream_1.sdkStreamMixin)(response.body);\n      const str = await stream.transformToString();\n      if (response.statusCode === 200) {\n        const parsed = JSON.parse(str);\n        if (\n          typeof parsed.AccessKeyId !== \"string\" ||\n          typeof parsed.SecretAccessKey !== \"string\" ||\n          typeof parsed.Token !== \"string\" ||\n          typeof parsed.Expiration !== \"string\"\n        ) {\n          throw new property_provider_1.CredentialsProviderError(\n            \"HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }\",\n            { logger }\n          );\n        }\n        return {\n          accessKeyId: parsed.AccessKeyId,\n          secretAccessKey: parsed.SecretAccessKey,\n          sessionToken: parsed.Token,\n          expiration: (0, smithy_client_1.parseRfc3339DateTime)(parsed.Expiration),\n        };\n      }\n      if (response.statusCode >= 400 && response.statusCode < 500) {\n        let parsedBody = {};\n        try {\n          parsedBody = JSON.parse(str);\n        } catch (e) {}\n        throw Object.assign(\n          new property_provider_1.CredentialsProviderError(\n            `Server responded with status: ${response.statusCode}`,\n            { logger }\n          ),\n          {\n            Code: parsedBody.Code,\n            Message: parsedBody.Message,\n          }\n        );\n      }\n      throw new property_provider_1.CredentialsProviderError(\n        `Server responded with status: ${response.statusCode}`,\n        { logger }\n      );\n    }\n    exports.getCredentials = getCredentials;\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js\nvar require_retry_wrapper = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.retryWrapper = void 0;\n    var retryWrapper = (toRetry, maxRetries, delayMs) => {\n      return async () => {\n        for (let i = 0; i < maxRetries; ++i) {\n          try {\n            return await toRetry();\n          } catch (e) {\n            await new Promise((resolve) => setTimeout(resolve, delayMs));\n          }\n        }\n        return await toRetry();\n      };\n    };\n    exports.retryWrapper = retryWrapper;\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js\nvar require_fromHttp = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.fromHttp = void 0;\n    var tslib_1 = require_tslib();\n    var node_http_handler_1 = require_dist_cjs28();\n    var property_provider_1 = require_dist_cjs12();\n    var promises_1 = tslib_1.__importDefault(require(\"fs/promises\"));\n    var checkUrl_1 = require_checkUrl();\n    var requestHelpers_1 = require_requestHelpers();\n    var retry_wrapper_1 = require_retry_wrapper();\n    var AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\n    var DEFAULT_LINK_LOCAL_HOST = \"http://169.254.170.2\";\n    var AWS_CONTAINER_CREDENTIALS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\n    var AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = \"AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE\";\n    var AWS_CONTAINER_AUTHORIZATION_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\n    var fromHttp = (options = {}) => {\n      var _a, _b, _c;\n      (_a = options.logger) == null\n        ? void 0\n        : _a.debug(\"@aws-sdk/credential-provider-http - fromHttp\");\n      let host;\n      const relative =\n        options.awsContainerCredentialsRelativeUri ??\n        process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];\n      const full =\n        options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];\n      const token =\n        options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];\n      const tokenFile =\n        options.awsContainerAuthorizationTokenFile ??\n        process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];\n      const warn =\n        ((_c = (_b = options.logger) == null ? void 0 : _b.constructor) == null\n          ? void 0\n          : _c.name) === \"NoOpLogger\" || !options.logger\n          ? console.warn\n          : options.logger.warn;\n      if (relative && full) {\n        warn(\n          \"@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.\"\n        );\n        warn(\"awsContainerCredentialsFullUri will take precedence.\");\n      }\n      if (token && tokenFile) {\n        warn(\n          \"@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.\"\n        );\n        warn(\"awsContainerAuthorizationToken will take precedence.\");\n      }\n      if (full) {\n        host = full;\n      } else if (relative) {\n        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;\n      } else {\n        throw new property_provider_1.CredentialsProviderError(\n          `No HTTP credential provider host provided.\nSet AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`,\n          { logger: options.logger }\n        );\n      }\n      const url = new URL(host);\n      (0, checkUrl_1.checkUrl)(url, options.logger);\n      const requestHandler = new node_http_handler_1.NodeHttpHandler({\n        requestTimeout: options.timeout ?? 1e3,\n        connectionTimeout: options.timeout ?? 1e3,\n      });\n      return (0, retry_wrapper_1.retryWrapper)(\n        async () => {\n          const request = (0, requestHelpers_1.createGetRequest)(url);\n          if (token) {\n            request.headers.Authorization = token;\n          } else if (tokenFile) {\n            request.headers.Authorization = (\n              await promises_1.default.readFile(tokenFile)\n            ).toString();\n          }\n          try {\n            const result = await requestHandler.handle(request);\n            return (0, requestHelpers_1.getCredentials)(result.response);\n          } catch (e) {\n            throw new property_provider_1.CredentialsProviderError(String(e), {\n              logger: options.logger,\n            });\n          }\n        },\n        options.maxRetries ?? 3,\n        options.timeout ?? 1e3\n      );\n    };\n    exports.fromHttp = fromHttp;\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js\nvar require_dist_cjs40 = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.fromHttp = void 0;\n    var fromHttp_1 = require_fromHttp();\n    Object.defineProperty(exports, \"fromHttp\", {\n      enumerable: true,\n      get: () => fromHttp_1.fromHttp,\n    });\n  },\n});\n\n// node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js\nvar require_httpAuthSchemeProvider2 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.resolveHttpAuthSchemeConfig =\n      exports.defaultSSOHttpAuthSchemeProvider =\n      exports.defaultSSOHttpAuthSchemeParametersProvider =\n        void 0;\n    var core_1 = require_dist_cjs37();\n    var util_middleware_1 = require_dist_cjs10();\n    var defaultSSOHttpAuthSchemeParametersProvider = async (config, context, input) => {\n      return {\n        operation: (0, util_middleware_1.getSmithyContext)(context).operation,\n        region:\n          (await (0, util_middleware_1.normalizeProvider)(config.region)()) ||\n          (() => {\n            throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n          })(),\n      };\n    };\n    exports.defaultSSOHttpAuthSchemeParametersProvider = defaultSSOHttpAuthSchemeParametersProvider;\n    function createAwsAuthSigv4HttpAuthOption(authParameters) {\n      return {\n        schemeId: \"aws.auth#sigv4\",\n        signingProperties: {\n          name: \"awsssoportal\",\n          region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n          signingProperties: {\n            config,\n            context,\n          },\n        }),\n      };\n    }\n    function createSmithyApiNoAuthHttpAuthOption(authParameters) {\n      return {\n        schemeId: \"smithy.api#noAuth\",\n      };\n    }\n    var defaultSSOHttpAuthSchemeProvider = (authParameters) => {\n      const options = [];\n      switch (authParameters.operation) {\n        case \"GetRoleCredentials\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        case \"ListAccountRoles\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        case \"ListAccounts\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        case \"Logout\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        default: {\n          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n        }\n      }\n      return options;\n    };\n    exports.defaultSSOHttpAuthSchemeProvider = defaultSSOHttpAuthSchemeProvider;\n    var resolveHttpAuthSchemeConfig = (config) => {\n      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);\n      return {\n        ...config_0,\n      };\n    };\n    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-sso/package.json\nvar require_package2 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso/package.json\"(exports, module2) {\n    module2.exports = {\n      name: \"@aws-sdk/client-sso\",\n      description: \"AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native\",\n      version: \"3.598.0\",\n      scripts: {\n        build: \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n        \"build:cjs\": \"node ../../scripts/compilation/inline client-sso\",\n        \"build:es\": \"tsc -p tsconfig.es.json\",\n        \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n        \"build:types\": \"tsc -p tsconfig.types.json\",\n        \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n        clean: \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n        \"extract:docs\": \"api-extractor run --local\",\n        \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo sso\",\n      },\n      main: \"./dist-cjs/index.js\",\n      types: \"./dist-types/index.d.ts\",\n      module: \"./dist-es/index.js\",\n      sideEffects: false,\n      dependencies: {\n        \"@aws-crypto/sha256-browser\": \"5.2.0\",\n        \"@aws-crypto/sha256-js\": \"5.2.0\",\n        \"@aws-sdk/core\": \"3.598.0\",\n        \"@aws-sdk/middleware-host-header\": \"3.598.0\",\n        \"@aws-sdk/middleware-logger\": \"3.598.0\",\n        \"@aws-sdk/middleware-recursion-detection\": \"3.598.0\",\n        \"@aws-sdk/middleware-user-agent\": \"3.598.0\",\n        \"@aws-sdk/region-config-resolver\": \"3.598.0\",\n        \"@aws-sdk/types\": \"3.598.0\",\n        \"@aws-sdk/util-endpoints\": \"3.598.0\",\n        \"@aws-sdk/util-user-agent-browser\": \"3.598.0\",\n        \"@aws-sdk/util-user-agent-node\": \"3.598.0\",\n        \"@smithy/config-resolver\": \"^3.0.2\",\n        \"@smithy/core\": \"^2.2.1\",\n        \"@smithy/fetch-http-handler\": \"^3.0.2\",\n        \"@smithy/hash-node\": \"^3.0.1\",\n        \"@smithy/invalid-dependency\": \"^3.0.1\",\n        \"@smithy/middleware-content-length\": \"^3.0.1\",\n        \"@smithy/middleware-endpoint\": \"^3.0.2\",\n        \"@smithy/middleware-retry\": \"^3.0.4\",\n        \"@smithy/middleware-serde\": \"^3.0.1\",\n        \"@smithy/middleware-stack\": \"^3.0.1\",\n        \"@smithy/node-config-provider\": \"^3.1.1\",\n        \"@smithy/node-http-handler\": \"^3.0.1\",\n        \"@smithy/protocol-http\": \"^4.0.1\",\n        \"@smithy/smithy-client\": \"^3.1.2\",\n        \"@smithy/types\": \"^3.1.0\",\n        \"@smithy/url-parser\": \"^3.0.1\",\n        \"@smithy/util-base64\": \"^3.0.0\",\n        \"@smithy/util-body-length-browser\": \"^3.0.0\",\n        \"@smithy/util-body-length-node\": \"^3.0.0\",\n        \"@smithy/util-defaults-mode-browser\": \"^3.0.4\",\n        \"@smithy/util-defaults-mode-node\": \"^3.0.4\",\n        \"@smithy/util-endpoints\": \"^2.0.2\",\n        \"@smithy/util-middleware\": \"^3.0.1\",\n        \"@smithy/util-retry\": \"^3.0.1\",\n        \"@smithy/util-utf8\": \"^3.0.0\",\n        tslib: \"^2.6.2\",\n      },\n      devDependencies: {\n        \"@tsconfig/node16\": \"16.1.3\",\n        \"@types/node\": \"^16.18.96\",\n        concurrently: \"7.0.0\",\n        \"downlevel-dts\": \"0.10.1\",\n        rimraf: \"3.0.2\",\n        typescript: \"~4.9.5\",\n      },\n      engines: {\n        node: \">=16.0.0\",\n      },\n      typesVersions: {\n        \"<4.0\": {\n          \"dist-types/*\": [\"dist-types/ts3.4/*\"],\n        },\n      },\n      files: [\"dist-*/**\"],\n      author: {\n        name: \"AWS SDK for JavaScript Team\",\n        url: \"https://aws.amazon.com/javascript/\",\n      },\n      license: \"Apache-2.0\",\n      browser: {\n        \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\",\n      },\n      \"react-native\": {\n        \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\",\n      },\n      homepage: \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso\",\n      repository: {\n        type: \"git\",\n        url: \"https://github.com/aws/aws-sdk-js-v3.git\",\n        directory: \"clients/client-sso\",\n      },\n    };\n  },\n});\n\n// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js\nvar require_dist_cjs41 = __commonJS({\n  \"node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,\n      UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,\n      crtAvailability: () => crtAvailability,\n      defaultUserAgent: () => defaultUserAgent,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_node_config_provider = require_dist_cjs14();\n    var import_os = require(\"os\");\n    var import_process = require(\"process\");\n    var crtAvailability = {\n      isCrtAvailable: false,\n    };\n    var isCrtAvailable = /* @__PURE__ */ __name(() => {\n      if (crtAvailability.isCrtAvailable) {\n        return [\"md/crt-avail\"];\n      }\n      return null;\n    }, \"isCrtAvailable\");\n    var UA_APP_ID_ENV_NAME = \"AWS_SDK_UA_APP_ID\";\n    var UA_APP_ID_INI_NAME = \"sdk-ua-app-id\";\n    var defaultUserAgent = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {\n      const sections = [\n        [\"aws-sdk-js\", clientVersion],\n        [\"ua\", \"2.0\"],\n        [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],\n        [\"lang/js\"],\n        [\"md/nodejs\", `${import_process.versions.node}`],\n      ];\n      const crtAvailable = isCrtAvailable();\n      if (crtAvailable) {\n        sections.push(crtAvailable);\n      }\n      if (serviceId) {\n        sections.push([`api/${serviceId}`, clientVersion]);\n      }\n      if (import_process.env.AWS_EXECUTION_ENV) {\n        sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);\n      }\n      const appIdPromise = (0, import_node_config_provider.loadConfig)({\n        environmentVariableSelector: (env2) => env2[UA_APP_ID_ENV_NAME],\n        configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME],\n        default: void 0,\n      })();\n      let resolvedUserAgent = void 0;\n      return async () => {\n        if (!resolvedUserAgent) {\n          const appId = await appIdPromise;\n          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];\n        }\n        return resolvedUserAgent;\n      };\n    }, \"defaultUserAgent\");\n  },\n});\n\n// node_modules/@smithy/hash-node/dist-cjs/index.js\nvar require_dist_cjs42 = __commonJS({\n  \"node_modules/@smithy/hash-node/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      Hash: () => Hash,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_util_buffer_from = require_dist_cjs23();\n    var import_util_utf8 = require_dist_cjs24();\n    var import_buffer = require(\"buffer\");\n    var import_crypto = require(\"crypto\");\n    var _Hash = class _Hash {\n      constructor(algorithmIdentifier, secret) {\n        this.algorithmIdentifier = algorithmIdentifier;\n        this.secret = secret;\n        this.reset();\n      }\n      update(toHash, encoding) {\n        this.hash.update((0, import_util_utf8.toUint8Array)(castSourceData(toHash, encoding)));\n      }\n      digest() {\n        return Promise.resolve(this.hash.digest());\n      }\n      reset() {\n        this.hash = this.secret\n          ? (0, import_crypto.createHmac)(this.algorithmIdentifier, castSourceData(this.secret))\n          : (0, import_crypto.createHash)(this.algorithmIdentifier);\n      }\n    };\n    __name(_Hash, \"Hash\");\n    var Hash = _Hash;\n    function castSourceData(toCast, encoding) {\n      if (import_buffer.Buffer.isBuffer(toCast)) {\n        return toCast;\n      }\n      if (typeof toCast === \"string\") {\n        return (0, import_util_buffer_from.fromString)(toCast, encoding);\n      }\n      if (ArrayBuffer.isView(toCast)) {\n        return (0, import_util_buffer_from.fromArrayBuffer)(\n          toCast.buffer,\n          toCast.byteOffset,\n          toCast.byteLength\n        );\n      }\n      return (0, import_util_buffer_from.fromArrayBuffer)(toCast);\n    }\n    __name(castSourceData, \"castSourceData\");\n  },\n});\n\n// node_modules/@smithy/util-body-length-node/dist-cjs/index.js\nvar require_dist_cjs43 = __commonJS({\n  \"node_modules/@smithy/util-body-length-node/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      calculateBodyLength: () => calculateBodyLength,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_fs = require(\"fs\");\n    var calculateBodyLength = /* @__PURE__ */ __name((body) => {\n      if (!body) {\n        return 0;\n      }\n      if (typeof body === \"string\") {\n        return Buffer.byteLength(body);\n      } else if (typeof body.byteLength === \"number\") {\n        return body.byteLength;\n      } else if (typeof body.size === \"number\") {\n        return body.size;\n      } else if (typeof body.start === \"number\" && typeof body.end === \"number\") {\n        return body.end + 1 - body.start;\n      } else if (typeof body.path === \"string\" || Buffer.isBuffer(body.path)) {\n        return (0, import_fs.lstatSync)(body.path).size;\n      } else if (typeof body.fd === \"number\") {\n        return (0, import_fs.fstatSync)(body.fd).size;\n      }\n      throw new Error(`Body Length computation failed for ${body}`);\n    }, \"calculateBodyLength\");\n  },\n});\n\n// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js\nvar require_ruleset = __commonJS({\n  \"node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ruleSet = void 0;\n    var u = \"required\";\n    var v = \"fn\";\n    var w = \"argv\";\n    var x = \"ref\";\n    var a = true;\n    var b = \"isSet\";\n    var c = \"booleanEquals\";\n    var d = \"error\";\n    var e = \"endpoint\";\n    var f = \"tree\";\n    var g = \"PartitionResult\";\n    var h = \"getAttr\";\n    var i = { [u]: false, type: \"String\" };\n    var j = { [u]: true, default: false, type: \"Boolean\" };\n    var k = { [x]: \"Endpoint\" };\n    var l = { [v]: c, [w]: [{ [x]: \"UseFIPS\" }, true] };\n    var m = { [v]: c, [w]: [{ [x]: \"UseDualStack\" }, true] };\n    var n = {};\n    var o = { [v]: h, [w]: [{ [x]: g }, \"supportsFIPS\"] };\n    var p = { [x]: g };\n    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, \"supportsDualStack\"] }] };\n    var r = [l];\n    var s = [m];\n    var t = [{ [x]: \"Region\" }];\n    var _data = {\n      version: \"1.0\",\n      parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i },\n      rules: [\n        {\n          conditions: [{ [v]: b, [w]: [k] }],\n          rules: [\n            {\n              conditions: r,\n              error: \"Invalid Configuration: FIPS and custom endpoint are not supported\",\n              type: d,\n            },\n            {\n              conditions: s,\n              error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\",\n              type: d,\n            },\n            { endpoint: { url: k, properties: n, headers: n }, type: e },\n          ],\n          type: f,\n        },\n        {\n          conditions: [{ [v]: b, [w]: t }],\n          rules: [\n            {\n              conditions: [{ [v]: \"aws.partition\", [w]: t, assign: g }],\n              rules: [\n                {\n                  conditions: [l, m],\n                  rules: [\n                    {\n                      conditions: [{ [v]: c, [w]: [a, o] }, q],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n                            properties: n,\n                            headers: n,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    {\n                      error:\n                        \"FIPS and DualStack are enabled, but this partition does not support one or both\",\n                      type: d,\n                    },\n                  ],\n                  type: f,\n                },\n                {\n                  conditions: r,\n                  rules: [\n                    {\n                      conditions: [{ [v]: c, [w]: [o, a] }],\n                      rules: [\n                        {\n                          conditions: [\n                            {\n                              [v]: \"stringEquals\",\n                              [w]: [{ [v]: h, [w]: [p, \"name\"] }, \"aws-us-gov\"],\n                            },\n                          ],\n                          endpoint: {\n                            url: \"https://portal.sso.{Region}.amazonaws.com\",\n                            properties: n,\n                            headers: n,\n                          },\n                          type: e,\n                        },\n                        {\n                          endpoint: {\n                            url: \"https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}\",\n                            properties: n,\n                            headers: n,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    { error: \"FIPS is enabled but this partition does not support FIPS\", type: d },\n                  ],\n                  type: f,\n                },\n                {\n                  conditions: s,\n                  rules: [\n                    {\n                      conditions: [q],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n                            properties: n,\n                            headers: n,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    {\n                      error: \"DualStack is enabled but this partition does not support DualStack\",\n                      type: d,\n                    },\n                  ],\n                  type: f,\n                },\n                {\n                  endpoint: {\n                    url: \"https://portal.sso.{Region}.{PartitionResult#dnsSuffix}\",\n                    properties: n,\n                    headers: n,\n                  },\n                  type: e,\n                },\n              ],\n              type: f,\n            },\n          ],\n          type: f,\n        },\n        { error: \"Invalid Configuration: Missing Region\", type: d },\n      ],\n    };\n    exports.ruleSet = _data;\n  },\n});\n\n// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js\nvar require_endpointResolver = __commonJS({\n  \"node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.defaultEndpointResolver = void 0;\n    var util_endpoints_1 = require_dist_cjs7();\n    var util_endpoints_2 = require_dist_cjs6();\n    var ruleset_1 = require_ruleset();\n    var defaultEndpointResolver = (endpointParams, context = {}) => {\n      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {\n        endpointParams,\n        logger: context.logger,\n      });\n    };\n    exports.defaultEndpointResolver = defaultEndpointResolver;\n    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;\n  },\n});\n\n// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js\nvar require_runtimeConfig_shared = __commonJS({\n  \"node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getRuntimeConfig = void 0;\n    var core_1 = require_dist_cjs37();\n    var core_2 = require_dist_cjs34();\n    var smithy_client_1 = require_dist_cjs32();\n    var url_parser_1 = require_dist_cjs16();\n    var util_base64_1 = require_dist_cjs25();\n    var util_utf8_1 = require_dist_cjs24();\n    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider2();\n    var endpointResolver_1 = require_endpointResolver();\n    var getRuntimeConfig = (config) => {\n      return {\n        apiVersion: \"2019-06-10\",\n        base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,\n        base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,\n        disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,\n        endpointProvider:\n          (config == null ? void 0 : config.endpointProvider) ??\n          endpointResolver_1.defaultEndpointResolver,\n        extensions: (config == null ? void 0 : config.extensions) ?? [],\n        httpAuthSchemeProvider:\n          (config == null ? void 0 : config.httpAuthSchemeProvider) ??\n          httpAuthSchemeProvider_1.defaultSSOHttpAuthSchemeProvider,\n        httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [\n          {\n            schemeId: \"aws.auth#sigv4\",\n            identityProvider: (ipc) => ipc.getIdentityProvider(\"aws.auth#sigv4\"),\n            signer: new core_1.AwsSdkSigV4Signer(),\n          },\n          {\n            schemeId: \"smithy.api#noAuth\",\n            identityProvider: (ipc) =>\n              ipc.getIdentityProvider(\"smithy.api#noAuth\") || (async () => ({})),\n            signer: new core_2.NoAuthSigner(),\n          },\n        ],\n        logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),\n        serviceId: (config == null ? void 0 : config.serviceId) ?? \"SSO\",\n        urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,\n        utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,\n        utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,\n      };\n    };\n    exports.getRuntimeConfig = getRuntimeConfig;\n  },\n});\n\n// node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js\nvar require_dist_cjs44 = __commonJS({\n  \"node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js\"(exports, module2) {\n    var __create2 = Object.create;\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __getProtoOf2 = Object.getPrototypeOf;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toESM2 = (mod, isNodeMode, target) => (\n      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),\n      __copyProps2(\n        isNodeMode || !mod || !mod.__esModule\n          ? __defProp2(target, \"default\", { value: mod, enumerable: true })\n          : target,\n        mod\n      )\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      resolveDefaultsModeConfig: () => resolveDefaultsModeConfig,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_config_resolver = require_dist_cjs11();\n    var import_node_config_provider = require_dist_cjs14();\n    var import_property_provider = require_dist_cjs12();\n    var AWS_EXECUTION_ENV = \"AWS_EXECUTION_ENV\";\n    var AWS_REGION_ENV = \"AWS_REGION\";\n    var AWS_DEFAULT_REGION_ENV = \"AWS_DEFAULT_REGION\";\n    var ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\n    var DEFAULTS_MODE_OPTIONS = [\"in-region\", \"cross-region\", \"mobile\", \"standard\", \"legacy\"];\n    var IMDS_REGION_PATH = \"/latest/meta-data/placement/region\";\n    var AWS_DEFAULTS_MODE_ENV = \"AWS_DEFAULTS_MODE\";\n    var AWS_DEFAULTS_MODE_CONFIG = \"defaults_mode\";\n    var NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) => {\n        return env[AWS_DEFAULTS_MODE_ENV];\n      },\n      configFileSelector: (profile) => {\n        return profile[AWS_DEFAULTS_MODE_CONFIG];\n      },\n      default: \"legacy\",\n    };\n    var resolveDefaultsModeConfig = /* @__PURE__ */ __name(\n      ({\n        region = (0, import_node_config_provider.loadConfig)(\n          import_config_resolver.NODE_REGION_CONFIG_OPTIONS\n        ),\n        defaultsMode = (0, import_node_config_provider.loadConfig)(\n          NODE_DEFAULTS_MODE_CONFIG_OPTIONS\n        ),\n      } = {}) =>\n        (0, import_property_provider.memoize)(async () => {\n          const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n          switch (mode == null ? void 0 : mode.toLowerCase()) {\n            case \"auto\":\n              return resolveNodeDefaultsModeAuto(region);\n            case \"in-region\":\n            case \"cross-region\":\n            case \"mobile\":\n            case \"standard\":\n            case \"legacy\":\n              return Promise.resolve(mode == null ? void 0 : mode.toLocaleLowerCase());\n            case void 0:\n              return Promise.resolve(\"legacy\");\n            default:\n              throw new Error(\n                `Invalid parameter for \"defaultsMode\", expect ${DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`\n              );\n          }\n        }),\n      \"resolveDefaultsModeConfig\"\n    );\n    var resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion) => {\n      if (clientRegion) {\n        const resolvedRegion =\n          typeof clientRegion === \"function\" ? await clientRegion() : clientRegion;\n        const inferredRegion = await inferPhysicalRegion();\n        if (!inferredRegion) {\n          return \"standard\";\n        }\n        if (resolvedRegion === inferredRegion) {\n          return \"in-region\";\n        } else {\n          return \"cross-region\";\n        }\n      }\n      return \"standard\";\n    }, \"resolveNodeDefaultsModeAuto\");\n    var inferPhysicalRegion = /* @__PURE__ */ __name(async () => {\n      if (\n        process.env[AWS_EXECUTION_ENV] &&\n        (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])\n      ) {\n        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];\n      }\n      if (!process.env[ENV_IMDS_DISABLED]) {\n        try {\n          const { getInstanceMetadataEndpoint, httpRequest } = await Promise.resolve().then(() =>\n            __toESM2(require_dist_cjs39())\n          );\n          const endpoint = await getInstanceMetadataEndpoint();\n          return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();\n        } catch (e) {}\n      }\n    }, \"inferPhysicalRegion\");\n  },\n});\n\n// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js\nvar require_runtimeConfig = __commonJS({\n  \"node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getRuntimeConfig = void 0;\n    var tslib_1 = require_tslib();\n    var package_json_1 = tslib_1.__importDefault(require_package2());\n    var core_1 = require_dist_cjs37();\n    var util_user_agent_node_1 = require_dist_cjs41();\n    var config_resolver_1 = require_dist_cjs11();\n    var hash_node_1 = require_dist_cjs42();\n    var middleware_retry_1 = require_dist_cjs33();\n    var node_config_provider_1 = require_dist_cjs14();\n    var node_http_handler_1 = require_dist_cjs28();\n    var util_body_length_node_1 = require_dist_cjs43();\n    var util_retry_1 = require_dist_cjs20();\n    var runtimeConfig_shared_1 = require_runtimeConfig_shared();\n    var smithy_client_1 = require_dist_cjs32();\n    var util_defaults_mode_node_1 = require_dist_cjs44();\n    var smithy_client_2 = require_dist_cjs32();\n    var getRuntimeConfig = (config) => {\n      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);\n      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);\n      const defaultConfigProvider = () =>\n        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);\n      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);\n      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);\n      return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker:\n          (config == null ? void 0 : config.bodyLengthChecker) ??\n          util_body_length_node_1.calculateBodyLength,\n        defaultUserAgentProvider:\n          (config == null ? void 0 : config.defaultUserAgentProvider) ??\n          (0, util_user_agent_node_1.defaultUserAgent)({\n            serviceId: clientSharedValues.serviceId,\n            clientVersion: package_json_1.default.version,\n          }),\n        maxAttempts:\n          (config == null ? void 0 : config.maxAttempts) ??\n          (0, node_config_provider_1.loadConfig)(\n            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS\n          ),\n        region:\n          (config == null ? void 0 : config.region) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,\n            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS\n          ),\n        requestHandler: node_http_handler_1.NodeHttpHandler.create(\n          (config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider\n        ),\n        retryMode:\n          (config == null ? void 0 : config.retryMode) ??\n          (0, node_config_provider_1.loadConfig)({\n            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,\n            default: async () =>\n              (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE,\n          }),\n        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, \"sha256\"),\n        streamCollector:\n          (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,\n        useDualstackEndpoint:\n          (config == null ? void 0 : config.useDualstackEndpoint) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS\n          ),\n        useFipsEndpoint:\n          (config == null ? void 0 : config.useFipsEndpoint) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS\n          ),\n      };\n    };\n    exports.getRuntimeConfig = getRuntimeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js\nvar require_dist_cjs45 = __commonJS({\n  \"node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,\n      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,\n      REGION_ENV_NAME: () => REGION_ENV_NAME,\n      REGION_INI_NAME: () => REGION_INI_NAME,\n      getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration,\n      resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration,\n      resolveRegionConfig: () => resolveRegionConfig,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var getAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      let runtimeConfigRegion = /* @__PURE__ */ __name(async () => {\n        if (runtimeConfig.region === void 0) {\n          throw new Error(\"Region is missing from runtimeConfig\");\n        }\n        const region = runtimeConfig.region;\n        if (typeof region === \"string\") {\n          return region;\n        }\n        return region();\n      }, \"runtimeConfigRegion\");\n      return {\n        setRegion(region) {\n          runtimeConfigRegion = region;\n        },\n        region() {\n          return runtimeConfigRegion;\n        },\n      };\n    }, \"getAwsRegionExtensionConfiguration\");\n    var resolveAwsRegionExtensionConfiguration = /* @__PURE__ */ __name(\n      (awsRegionExtensionConfiguration) => {\n        return {\n          region: awsRegionExtensionConfiguration.region(),\n        };\n      },\n      \"resolveAwsRegionExtensionConfiguration\"\n    );\n    var REGION_ENV_NAME = \"AWS_REGION\";\n    var REGION_INI_NAME = \"region\";\n    var NODE_REGION_CONFIG_OPTIONS = {\n      environmentVariableSelector: (env) => env[REGION_ENV_NAME],\n      configFileSelector: (profile) => profile[REGION_INI_NAME],\n      default: () => {\n        throw new Error(\"Region is missing\");\n      },\n    };\n    var NODE_REGION_CONFIG_FILE_OPTIONS = {\n      preferredFile: \"credentials\",\n    };\n    var isFipsRegion = /* @__PURE__ */ __name(\n      (region) =>\n        typeof region === \"string\" && (region.startsWith(\"fips-\") || region.endsWith(\"-fips\")),\n      \"isFipsRegion\"\n    );\n    var getRealRegion = /* @__PURE__ */ __name(\n      (region) =>\n        isFipsRegion(region)\n          ? [\"fips-aws-global\", \"aws-fips\"].includes(region)\n            ? \"us-east-1\"\n            : region.replace(/fips-(dkr-|prod-)?|-fips/, \"\")\n          : region,\n      \"getRealRegion\"\n    );\n    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {\n      const { region, useFipsEndpoint } = input;\n      if (!region) {\n        throw new Error(\"Region is missing\");\n      }\n      return {\n        ...input,\n        region: async () => {\n          if (typeof region === \"string\") {\n            return getRealRegion(region);\n          }\n          const providedRegion = await region();\n          return getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n          const providedRegion = typeof region === \"string\" ? region : await region();\n          if (isFipsRegion(providedRegion)) {\n            return true;\n          }\n          return typeof useFipsEndpoint !== \"function\"\n            ? Promise.resolve(!!useFipsEndpoint)\n            : useFipsEndpoint();\n        },\n      };\n    }, \"resolveRegionConfig\");\n  },\n});\n\n// node_modules/@aws-sdk/client-sso/dist-cjs/index.js\nvar require_dist_cjs46 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,\n      GetRoleCredentialsRequestFilterSensitiveLog: () =>\n        GetRoleCredentialsRequestFilterSensitiveLog,\n      GetRoleCredentialsResponseFilterSensitiveLog: () =>\n        GetRoleCredentialsResponseFilterSensitiveLog,\n      InvalidRequestException: () => InvalidRequestException,\n      ListAccountRolesCommand: () => ListAccountRolesCommand,\n      ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,\n      ListAccountsCommand: () => ListAccountsCommand,\n      ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,\n      LogoutCommand: () => LogoutCommand,\n      LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,\n      ResourceNotFoundException: () => ResourceNotFoundException,\n      RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,\n      SSO: () => SSO,\n      SSOClient: () => SSOClient,\n      SSOServiceException: () => SSOServiceException,\n      TooManyRequestsException: () => TooManyRequestsException,\n      UnauthorizedException: () => UnauthorizedException,\n      __Client: () => import_smithy_client.Client,\n      paginateListAccountRoles: () => paginateListAccountRoles,\n      paginateListAccounts: () => paginateListAccounts,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_middleware_host_header = require_dist_cjs3();\n    var import_middleware_logger = require_dist_cjs4();\n    var import_middleware_recursion_detection = require_dist_cjs5();\n    var import_middleware_user_agent = require_dist_cjs8();\n    var import_config_resolver = require_dist_cjs11();\n    var import_core = require_dist_cjs34();\n    var import_middleware_content_length = require_dist_cjs35();\n    var import_middleware_endpoint = require_dist_cjs18();\n    var import_middleware_retry = require_dist_cjs33();\n    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider2();\n    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {\n      return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"awsssoportal\",\n      };\n    }, \"resolveClientEndpointParameters\");\n    var commonParams = {\n      UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n      Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n      Region: { type: \"builtInParams\", name: \"region\" },\n      UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n    var import_runtimeConfig = require_runtimeConfig();\n    var import_region_config_resolver = require_dist_cjs45();\n    var import_protocol_http = require_dist_cjs2();\n    var import_smithy_client = require_dist_cjs32();\n    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n      let _credentials = runtimeConfig.credentials;\n      return {\n        setHttpAuthScheme(httpAuthScheme) {\n          const index = _httpAuthSchemes.findIndex(\n            (scheme) => scheme.schemeId === httpAuthScheme.schemeId\n          );\n          if (index === -1) {\n            _httpAuthSchemes.push(httpAuthScheme);\n          } else {\n            _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n          }\n        },\n        httpAuthSchemes() {\n          return _httpAuthSchemes;\n        },\n        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n          _httpAuthSchemeProvider = httpAuthSchemeProvider;\n        },\n        httpAuthSchemeProvider() {\n          return _httpAuthSchemeProvider;\n        },\n        setCredentials(credentials) {\n          _credentials = credentials;\n        },\n        credentials() {\n          return _credentials;\n        },\n      };\n    }, \"getHttpAuthExtensionConfiguration\");\n    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {\n      return {\n        httpAuthSchemes: config.httpAuthSchemes(),\n        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n        credentials: config.credentials(),\n      };\n    }, \"resolveHttpAuthRuntimeConfig\");\n    var asPartial = /* @__PURE__ */ __name((t) => t, \"asPartial\");\n    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {\n      const extensionConfiguration = {\n        ...asPartial(\n          (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)\n        ),\n        ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),\n        ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),\n        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig)),\n      };\n      extensions.forEach((extension) => extension.configure(extensionConfiguration));\n      return {\n        ...runtimeConfig,\n        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(\n          extensionConfiguration\n        ),\n        ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),\n        ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),\n        ...resolveHttpAuthRuntimeConfig(extensionConfiguration),\n      };\n    }, \"resolveRuntimeExtensions\");\n    var _SSOClient = class _SSOClient extends import_smithy_client.Client {\n      constructor(...[configuration]) {\n        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);\n        const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);\n        const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);\n        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);\n        const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);\n        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);\n        const _config_8 = resolveRuntimeExtensions(\n          _config_7,\n          (configuration == null ? void 0 : configuration.extensions) || []\n        );\n        super(_config_8);\n        this.config = _config_8;\n        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_middleware_content_length.getContentLengthPlugin)(this.config)\n        );\n        this.middlewareStack.use(\n          (0, import_middleware_host_header.getHostHeaderPlugin)(this.config)\n        );\n        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config)\n        );\n        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {\n            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),\n            identityProviderConfigProvider: this.getIdentityProviderConfigProvider(),\n          })\n        );\n        this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));\n      }\n      destroy() {\n        super.destroy();\n      }\n      getDefaultHttpAuthSchemeParametersProvider() {\n        return import_httpAuthSchemeProvider.defaultSSOHttpAuthSchemeParametersProvider;\n      }\n      getIdentityProviderConfigProvider() {\n        return async (config) =>\n          new import_core.DefaultIdentityProviderConfig({\n            \"aws.auth#sigv4\": config.credentials,\n          });\n      }\n    };\n    __name(_SSOClient, \"SSOClient\");\n    var SSOClient = _SSOClient;\n    var import_middleware_serde = require_dist_cjs17();\n    var _SSOServiceException = class _SSOServiceException2 extends import_smithy_client.ServiceException {\n      constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, _SSOServiceException2.prototype);\n      }\n    };\n    __name(_SSOServiceException, \"SSOServiceException\");\n    var SSOServiceException = _SSOServiceException;\n    var _InvalidRequestException = class _InvalidRequestException2 extends SSOServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidRequestException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidRequestException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);\n      }\n    };\n    __name(_InvalidRequestException, \"InvalidRequestException\");\n    var InvalidRequestException = _InvalidRequestException;\n    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends SSOServiceException {\n      constructor(opts) {\n        super({\n          name: \"ResourceNotFoundException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"ResourceNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);\n      }\n    };\n    __name(_ResourceNotFoundException, \"ResourceNotFoundException\");\n    var ResourceNotFoundException = _ResourceNotFoundException;\n    var _TooManyRequestsException = class _TooManyRequestsException2 extends SSOServiceException {\n      constructor(opts) {\n        super({\n          name: \"TooManyRequestsException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"TooManyRequestsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _TooManyRequestsException2.prototype);\n      }\n    };\n    __name(_TooManyRequestsException, \"TooManyRequestsException\");\n    var TooManyRequestsException = _TooManyRequestsException;\n    var _UnauthorizedException = class _UnauthorizedException2 extends SSOServiceException {\n      constructor(opts) {\n        super({\n          name: \"UnauthorizedException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"UnauthorizedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _UnauthorizedException2.prototype);\n      }\n    };\n    __name(_UnauthorizedException, \"UnauthorizedException\");\n    var UnauthorizedException = _UnauthorizedException;\n    var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"GetRoleCredentialsRequestFilterSensitiveLog\"\n    );\n    var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.secretAccessKey && { secretAccessKey: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.sessionToken && { sessionToken: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"RoleCredentialsFilterSensitiveLog\"\n    );\n    var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.roleCredentials && {\n          roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials),\n        }),\n      }),\n      \"GetRoleCredentialsResponseFilterSensitiveLog\"\n    );\n    var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"ListAccountRolesRequestFilterSensitiveLog\"\n    );\n    var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"ListAccountsRequestFilterSensitiveLog\"\n    );\n    var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"LogoutRequestFilterSensitiveLog\"\n    );\n    var import_core2 = require_dist_cjs37();\n    var se_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {\n        [_xasbt]: input[_aT],\n      });\n      b.bp(\"/federation/credentials\");\n      const query = (0, import_smithy_client.map)({\n        [_rn]: [, (0, import_smithy_client.expectNonNull)(input[_rN], `roleName`)],\n        [_ai]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `accountId`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetRoleCredentialsCommand\");\n    var se_ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {\n        [_xasbt]: input[_aT],\n      });\n      b.bp(\"/assignment/roles\");\n      const query = (0, import_smithy_client.map)({\n        [_nt]: [, input[_nT]],\n        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],\n        [_ai]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `accountId`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListAccountRolesCommand\");\n    var se_ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {\n        [_xasbt]: input[_aT],\n      });\n      b.bp(\"/assignment/accounts\");\n      const query = (0, import_smithy_client.map)({\n        [_nt]: [, input[_nT]],\n        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListAccountsCommand\");\n    var se_LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {\n        [_xasbt]: input[_aT],\n      });\n      b.bp(\"/logout\");\n      let body;\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_LogoutCommand\");\n    var de_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        roleCredentials: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetRoleCredentialsCommand\");\n    var de_ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        nextToken: import_smithy_client.expectString,\n        roleList: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListAccountRolesCommand\");\n    var de_ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        accountList: import_smithy_client._json,\n        nextToken: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListAccountsCommand\");\n    var de_LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_LogoutCommand\");\n    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {\n      const parsedOutput = {\n        ...output,\n        body: await (0, import_core2.parseJsonErrorBody)(output.body, context),\n      };\n      const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);\n      switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n          throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n          throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default: {\n          const parsedBody = parsedOutput.body;\n          return throwDefaultError({\n            output,\n            parsedBody,\n            errorCode,\n          });\n        }\n      }\n    }, \"de_CommandError\");\n    var throwDefaultError = (0, import_smithy_client.withBaseException)(SSOServiceException);\n    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        message: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new InvalidRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_InvalidRequestExceptionRes\");\n    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        message: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new ResourceNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_ResourceNotFoundExceptionRes\");\n    var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        message: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new TooManyRequestsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_TooManyRequestsExceptionRes\");\n    var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        message: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new UnauthorizedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_UnauthorizedExceptionRes\");\n    var deserializeMetadata = /* @__PURE__ */ __name(\n      (output) => ({\n        httpStatusCode: output.statusCode,\n        requestId:\n          output.headers[\"x-amzn-requestid\"] ??\n          output.headers[\"x-amzn-request-id\"] ??\n          output.headers[\"x-amz-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n      }),\n      \"deserializeMetadata\"\n    );\n    var isSerializableHeaderValue = /* @__PURE__ */ __name(\n      (value) =>\n        value !== void 0 &&\n        value !== null &&\n        value !== \"\" &&\n        (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n        (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0),\n      \"isSerializableHeaderValue\"\n    );\n    var _aI = \"accountId\";\n    var _aT = \"accessToken\";\n    var _ai = \"account_id\";\n    var _mR = \"maxResults\";\n    var _mr = \"max_result\";\n    var _nT = \"nextToken\";\n    var _nt = \"next_token\";\n    var _rN = \"roleName\";\n    var _rn = \"role_name\";\n    var _xasbt = \"x-amz-sso_bearer_token\";\n    var _GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"SWBPortalService\", \"GetRoleCredentials\", {})\n      .n(\"SSOClient\", \"GetRoleCredentialsCommand\")\n      .f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog)\n      .ser(se_GetRoleCredentialsCommand)\n      .de(de_GetRoleCredentialsCommand)\n      .build() {};\n    __name(_GetRoleCredentialsCommand, \"GetRoleCredentialsCommand\");\n    var GetRoleCredentialsCommand = _GetRoleCredentialsCommand;\n    var _ListAccountRolesCommand = class _ListAccountRolesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"SWBPortalService\", \"ListAccountRoles\", {})\n      .n(\"SSOClient\", \"ListAccountRolesCommand\")\n      .f(ListAccountRolesRequestFilterSensitiveLog, void 0)\n      .ser(se_ListAccountRolesCommand)\n      .de(de_ListAccountRolesCommand)\n      .build() {};\n    __name(_ListAccountRolesCommand, \"ListAccountRolesCommand\");\n    var ListAccountRolesCommand = _ListAccountRolesCommand;\n    var _ListAccountsCommand = class _ListAccountsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"SWBPortalService\", \"ListAccounts\", {})\n      .n(\"SSOClient\", \"ListAccountsCommand\")\n      .f(ListAccountsRequestFilterSensitiveLog, void 0)\n      .ser(se_ListAccountsCommand)\n      .de(de_ListAccountsCommand)\n      .build() {};\n    __name(_ListAccountsCommand, \"ListAccountsCommand\");\n    var ListAccountsCommand = _ListAccountsCommand;\n    var _LogoutCommand = class _LogoutCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"SWBPortalService\", \"Logout\", {})\n      .n(\"SSOClient\", \"LogoutCommand\")\n      .f(LogoutRequestFilterSensitiveLog, void 0)\n      .ser(se_LogoutCommand)\n      .de(de_LogoutCommand)\n      .build() {};\n    __name(_LogoutCommand, \"LogoutCommand\");\n    var LogoutCommand = _LogoutCommand;\n    var commands = {\n      GetRoleCredentialsCommand,\n      ListAccountRolesCommand,\n      ListAccountsCommand,\n      LogoutCommand,\n    };\n    var _SSO = class _SSO extends SSOClient {};\n    __name(_SSO, \"SSO\");\n    var SSO = _SSO;\n    (0, import_smithy_client.createAggregatedClient)(commands, SSO);\n    var paginateListAccountRoles = (0, import_core.createPaginator)(\n      SSOClient,\n      ListAccountRolesCommand,\n      \"nextToken\",\n      \"nextToken\",\n      \"maxResults\"\n    );\n    var paginateListAccounts = (0, import_core.createPaginator)(\n      SSOClient,\n      ListAccountsCommand,\n      \"nextToken\",\n      \"nextToken\",\n      \"maxResults\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js\nvar require_httpAuthSchemeProvider3 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.resolveHttpAuthSchemeConfig =\n      exports.defaultSSOOIDCHttpAuthSchemeProvider =\n      exports.defaultSSOOIDCHttpAuthSchemeParametersProvider =\n        void 0;\n    var core_1 = require_dist_cjs37();\n    var util_middleware_1 = require_dist_cjs10();\n    var defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config, context, input) => {\n      return {\n        operation: (0, util_middleware_1.getSmithyContext)(context).operation,\n        region:\n          (await (0, util_middleware_1.normalizeProvider)(config.region)()) ||\n          (() => {\n            throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n          })(),\n      };\n    };\n    exports.defaultSSOOIDCHttpAuthSchemeParametersProvider =\n      defaultSSOOIDCHttpAuthSchemeParametersProvider;\n    function createAwsAuthSigv4HttpAuthOption(authParameters) {\n      return {\n        schemeId: \"aws.auth#sigv4\",\n        signingProperties: {\n          name: \"sso-oauth\",\n          region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n          signingProperties: {\n            config,\n            context,\n          },\n        }),\n      };\n    }\n    function createSmithyApiNoAuthHttpAuthOption(authParameters) {\n      return {\n        schemeId: \"smithy.api#noAuth\",\n      };\n    }\n    var defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {\n      const options = [];\n      switch (authParameters.operation) {\n        case \"CreateToken\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        case \"RegisterClient\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        case \"StartDeviceAuthorization\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        default: {\n          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n        }\n      }\n      return options;\n    };\n    exports.defaultSSOOIDCHttpAuthSchemeProvider = defaultSSOOIDCHttpAuthSchemeProvider;\n    var resolveHttpAuthSchemeConfig = (config) => {\n      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);\n      return {\n        ...config_0,\n      };\n    };\n    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-sso-oidc/package.json\nvar require_package3 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso-oidc/package.json\"(exports, module2) {\n    module2.exports = {\n      name: \"@aws-sdk/client-sso-oidc\",\n      description: \"AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native\",\n      version: \"3.600.0\",\n      scripts: {\n        build: \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n        \"build:cjs\": \"node ../../scripts/compilation/inline client-sso-oidc\",\n        \"build:es\": \"tsc -p tsconfig.es.json\",\n        \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n        \"build:types\": \"tsc -p tsconfig.types.json\",\n        \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n        clean: \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n        \"extract:docs\": \"api-extractor run --local\",\n        \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo sso-oidc\",\n      },\n      main: \"./dist-cjs/index.js\",\n      types: \"./dist-types/index.d.ts\",\n      module: \"./dist-es/index.js\",\n      sideEffects: false,\n      dependencies: {\n        \"@aws-crypto/sha256-browser\": \"5.2.0\",\n        \"@aws-crypto/sha256-js\": \"5.2.0\",\n        \"@aws-sdk/client-sts\": \"3.600.0\",\n        \"@aws-sdk/core\": \"3.598.0\",\n        \"@aws-sdk/credential-provider-node\": \"3.600.0\",\n        \"@aws-sdk/middleware-host-header\": \"3.598.0\",\n        \"@aws-sdk/middleware-logger\": \"3.598.0\",\n        \"@aws-sdk/middleware-recursion-detection\": \"3.598.0\",\n        \"@aws-sdk/middleware-user-agent\": \"3.598.0\",\n        \"@aws-sdk/region-config-resolver\": \"3.598.0\",\n        \"@aws-sdk/types\": \"3.598.0\",\n        \"@aws-sdk/util-endpoints\": \"3.598.0\",\n        \"@aws-sdk/util-user-agent-browser\": \"3.598.0\",\n        \"@aws-sdk/util-user-agent-node\": \"3.598.0\",\n        \"@smithy/config-resolver\": \"^3.0.2\",\n        \"@smithy/core\": \"^2.2.1\",\n        \"@smithy/fetch-http-handler\": \"^3.0.2\",\n        \"@smithy/hash-node\": \"^3.0.1\",\n        \"@smithy/invalid-dependency\": \"^3.0.1\",\n        \"@smithy/middleware-content-length\": \"^3.0.1\",\n        \"@smithy/middleware-endpoint\": \"^3.0.2\",\n        \"@smithy/middleware-retry\": \"^3.0.4\",\n        \"@smithy/middleware-serde\": \"^3.0.1\",\n        \"@smithy/middleware-stack\": \"^3.0.1\",\n        \"@smithy/node-config-provider\": \"^3.1.1\",\n        \"@smithy/node-http-handler\": \"^3.0.1\",\n        \"@smithy/protocol-http\": \"^4.0.1\",\n        \"@smithy/smithy-client\": \"^3.1.2\",\n        \"@smithy/types\": \"^3.1.0\",\n        \"@smithy/url-parser\": \"^3.0.1\",\n        \"@smithy/util-base64\": \"^3.0.0\",\n        \"@smithy/util-body-length-browser\": \"^3.0.0\",\n        \"@smithy/util-body-length-node\": \"^3.0.0\",\n        \"@smithy/util-defaults-mode-browser\": \"^3.0.4\",\n        \"@smithy/util-defaults-mode-node\": \"^3.0.4\",\n        \"@smithy/util-endpoints\": \"^2.0.2\",\n        \"@smithy/util-middleware\": \"^3.0.1\",\n        \"@smithy/util-retry\": \"^3.0.1\",\n        \"@smithy/util-utf8\": \"^3.0.0\",\n        tslib: \"^2.6.2\",\n      },\n      devDependencies: {\n        \"@tsconfig/node16\": \"16.1.3\",\n        \"@types/node\": \"^16.18.96\",\n        concurrently: \"7.0.0\",\n        \"downlevel-dts\": \"0.10.1\",\n        rimraf: \"3.0.2\",\n        typescript: \"~4.9.5\",\n      },\n      engines: {\n        node: \">=16.0.0\",\n      },\n      typesVersions: {\n        \"<4.0\": {\n          \"dist-types/*\": [\"dist-types/ts3.4/*\"],\n        },\n      },\n      files: [\"dist-*/**\"],\n      author: {\n        name: \"AWS SDK for JavaScript Team\",\n        url: \"https://aws.amazon.com/javascript/\",\n      },\n      license: \"Apache-2.0\",\n      browser: {\n        \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\",\n      },\n      \"react-native\": {\n        \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\",\n      },\n      homepage: \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc\",\n      repository: {\n        type: \"git\",\n        url: \"https://github.com/aws/aws-sdk-js-v3.git\",\n        directory: \"clients/client-sso-oidc\",\n      },\n    };\n  },\n});\n\n// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js\nvar require_ruleset2 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ruleSet = void 0;\n    var u = \"required\";\n    var v = \"fn\";\n    var w = \"argv\";\n    var x = \"ref\";\n    var a = true;\n    var b = \"isSet\";\n    var c = \"booleanEquals\";\n    var d = \"error\";\n    var e = \"endpoint\";\n    var f = \"tree\";\n    var g = \"PartitionResult\";\n    var h = \"getAttr\";\n    var i = { [u]: false, type: \"String\" };\n    var j = { [u]: true, default: false, type: \"Boolean\" };\n    var k = { [x]: \"Endpoint\" };\n    var l = { [v]: c, [w]: [{ [x]: \"UseFIPS\" }, true] };\n    var m = { [v]: c, [w]: [{ [x]: \"UseDualStack\" }, true] };\n    var n = {};\n    var o = { [v]: h, [w]: [{ [x]: g }, \"supportsFIPS\"] };\n    var p = { [x]: g };\n    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, \"supportsDualStack\"] }] };\n    var r = [l];\n    var s = [m];\n    var t = [{ [x]: \"Region\" }];\n    var _data = {\n      version: \"1.0\",\n      parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i },\n      rules: [\n        {\n          conditions: [{ [v]: b, [w]: [k] }],\n          rules: [\n            {\n              conditions: r,\n              error: \"Invalid Configuration: FIPS and custom endpoint are not supported\",\n              type: d,\n            },\n            {\n              conditions: s,\n              error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\",\n              type: d,\n            },\n            { endpoint: { url: k, properties: n, headers: n }, type: e },\n          ],\n          type: f,\n        },\n        {\n          conditions: [{ [v]: b, [w]: t }],\n          rules: [\n            {\n              conditions: [{ [v]: \"aws.partition\", [w]: t, assign: g }],\n              rules: [\n                {\n                  conditions: [l, m],\n                  rules: [\n                    {\n                      conditions: [{ [v]: c, [w]: [a, o] }, q],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n                            properties: n,\n                            headers: n,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    {\n                      error:\n                        \"FIPS and DualStack are enabled, but this partition does not support one or both\",\n                      type: d,\n                    },\n                  ],\n                  type: f,\n                },\n                {\n                  conditions: r,\n                  rules: [\n                    {\n                      conditions: [{ [v]: c, [w]: [o, a] }],\n                      rules: [\n                        {\n                          conditions: [\n                            {\n                              [v]: \"stringEquals\",\n                              [w]: [{ [v]: h, [w]: [p, \"name\"] }, \"aws-us-gov\"],\n                            },\n                          ],\n                          endpoint: {\n                            url: \"https://oidc.{Region}.amazonaws.com\",\n                            properties: n,\n                            headers: n,\n                          },\n                          type: e,\n                        },\n                        {\n                          endpoint: {\n                            url: \"https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}\",\n                            properties: n,\n                            headers: n,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    { error: \"FIPS is enabled but this partition does not support FIPS\", type: d },\n                  ],\n                  type: f,\n                },\n                {\n                  conditions: s,\n                  rules: [\n                    {\n                      conditions: [q],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n                            properties: n,\n                            headers: n,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    {\n                      error: \"DualStack is enabled but this partition does not support DualStack\",\n                      type: d,\n                    },\n                  ],\n                  type: f,\n                },\n                {\n                  endpoint: {\n                    url: \"https://oidc.{Region}.{PartitionResult#dnsSuffix}\",\n                    properties: n,\n                    headers: n,\n                  },\n                  type: e,\n                },\n              ],\n              type: f,\n            },\n          ],\n          type: f,\n        },\n        { error: \"Invalid Configuration: Missing Region\", type: d },\n      ],\n    };\n    exports.ruleSet = _data;\n  },\n});\n\n// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js\nvar require_endpointResolver2 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.defaultEndpointResolver = void 0;\n    var util_endpoints_1 = require_dist_cjs7();\n    var util_endpoints_2 = require_dist_cjs6();\n    var ruleset_1 = require_ruleset2();\n    var defaultEndpointResolver = (endpointParams, context = {}) => {\n      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {\n        endpointParams,\n        logger: context.logger,\n      });\n    };\n    exports.defaultEndpointResolver = defaultEndpointResolver;\n    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;\n  },\n});\n\n// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js\nvar require_runtimeConfig_shared2 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getRuntimeConfig = void 0;\n    var core_1 = require_dist_cjs37();\n    var core_2 = require_dist_cjs34();\n    var smithy_client_1 = require_dist_cjs32();\n    var url_parser_1 = require_dist_cjs16();\n    var util_base64_1 = require_dist_cjs25();\n    var util_utf8_1 = require_dist_cjs24();\n    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider3();\n    var endpointResolver_1 = require_endpointResolver2();\n    var getRuntimeConfig = (config) => {\n      return {\n        apiVersion: \"2019-06-10\",\n        base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,\n        base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,\n        disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,\n        endpointProvider:\n          (config == null ? void 0 : config.endpointProvider) ??\n          endpointResolver_1.defaultEndpointResolver,\n        extensions: (config == null ? void 0 : config.extensions) ?? [],\n        httpAuthSchemeProvider:\n          (config == null ? void 0 : config.httpAuthSchemeProvider) ??\n          httpAuthSchemeProvider_1.defaultSSOOIDCHttpAuthSchemeProvider,\n        httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [\n          {\n            schemeId: \"aws.auth#sigv4\",\n            identityProvider: (ipc) => ipc.getIdentityProvider(\"aws.auth#sigv4\"),\n            signer: new core_1.AwsSdkSigV4Signer(),\n          },\n          {\n            schemeId: \"smithy.api#noAuth\",\n            identityProvider: (ipc) =>\n              ipc.getIdentityProvider(\"smithy.api#noAuth\") || (async () => ({})),\n            signer: new core_2.NoAuthSigner(),\n          },\n        ],\n        logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),\n        serviceId: (config == null ? void 0 : config.serviceId) ?? \"SSO OIDC\",\n        urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,\n        utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,\n        utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,\n      };\n    };\n    exports.getRuntimeConfig = getRuntimeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js\nvar require_runtimeConfig2 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getRuntimeConfig = void 0;\n    var tslib_1 = require_tslib();\n    var package_json_1 = tslib_1.__importDefault(require_package3());\n    var core_1 = require_dist_cjs37();\n    var credential_provider_node_1 = require_dist_cjs54();\n    var util_user_agent_node_1 = require_dist_cjs41();\n    var config_resolver_1 = require_dist_cjs11();\n    var hash_node_1 = require_dist_cjs42();\n    var middleware_retry_1 = require_dist_cjs33();\n    var node_config_provider_1 = require_dist_cjs14();\n    var node_http_handler_1 = require_dist_cjs28();\n    var util_body_length_node_1 = require_dist_cjs43();\n    var util_retry_1 = require_dist_cjs20();\n    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();\n    var smithy_client_1 = require_dist_cjs32();\n    var util_defaults_mode_node_1 = require_dist_cjs44();\n    var smithy_client_2 = require_dist_cjs32();\n    var getRuntimeConfig = (config) => {\n      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);\n      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);\n      const defaultConfigProvider = () =>\n        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);\n      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);\n      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);\n      return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker:\n          (config == null ? void 0 : config.bodyLengthChecker) ??\n          util_body_length_node_1.calculateBodyLength,\n        credentialDefaultProvider:\n          (config == null ? void 0 : config.credentialDefaultProvider) ??\n          credential_provider_node_1.defaultProvider,\n        defaultUserAgentProvider:\n          (config == null ? void 0 : config.defaultUserAgentProvider) ??\n          (0, util_user_agent_node_1.defaultUserAgent)({\n            serviceId: clientSharedValues.serviceId,\n            clientVersion: package_json_1.default.version,\n          }),\n        maxAttempts:\n          (config == null ? void 0 : config.maxAttempts) ??\n          (0, node_config_provider_1.loadConfig)(\n            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS\n          ),\n        region:\n          (config == null ? void 0 : config.region) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,\n            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS\n          ),\n        requestHandler: node_http_handler_1.NodeHttpHandler.create(\n          (config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider\n        ),\n        retryMode:\n          (config == null ? void 0 : config.retryMode) ??\n          (0, node_config_provider_1.loadConfig)({\n            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,\n            default: async () =>\n              (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE,\n          }),\n        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, \"sha256\"),\n        streamCollector:\n          (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,\n        useDualstackEndpoint:\n          (config == null ? void 0 : config.useDualstackEndpoint) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS\n          ),\n        useFipsEndpoint:\n          (config == null ? void 0 : config.useFipsEndpoint) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS\n          ),\n      };\n    };\n    exports.getRuntimeConfig = getRuntimeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js\nvar require_dist_cjs47 = __commonJS({\n  \"node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      AccessDeniedException: () => AccessDeniedException,\n      AuthorizationPendingException: () => AuthorizationPendingException,\n      CreateTokenCommand: () => CreateTokenCommand,\n      CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,\n      CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,\n      CreateTokenWithIAMCommand: () => CreateTokenWithIAMCommand,\n      CreateTokenWithIAMRequestFilterSensitiveLog: () =>\n        CreateTokenWithIAMRequestFilterSensitiveLog,\n      CreateTokenWithIAMResponseFilterSensitiveLog: () =>\n        CreateTokenWithIAMResponseFilterSensitiveLog,\n      ExpiredTokenException: () => ExpiredTokenException,\n      InternalServerException: () => InternalServerException,\n      InvalidClientException: () => InvalidClientException,\n      InvalidClientMetadataException: () => InvalidClientMetadataException,\n      InvalidGrantException: () => InvalidGrantException,\n      InvalidRedirectUriException: () => InvalidRedirectUriException,\n      InvalidRequestException: () => InvalidRequestException,\n      InvalidRequestRegionException: () => InvalidRequestRegionException,\n      InvalidScopeException: () => InvalidScopeException,\n      RegisterClientCommand: () => RegisterClientCommand,\n      RegisterClientResponseFilterSensitiveLog: () => RegisterClientResponseFilterSensitiveLog,\n      SSOOIDC: () => SSOOIDC,\n      SSOOIDCClient: () => SSOOIDCClient,\n      SSOOIDCServiceException: () => SSOOIDCServiceException,\n      SlowDownException: () => SlowDownException,\n      StartDeviceAuthorizationCommand: () => StartDeviceAuthorizationCommand,\n      StartDeviceAuthorizationRequestFilterSensitiveLog: () =>\n        StartDeviceAuthorizationRequestFilterSensitiveLog,\n      UnauthorizedClientException: () => UnauthorizedClientException,\n      UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,\n      __Client: () => import_smithy_client.Client,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_middleware_host_header = require_dist_cjs3();\n    var import_middleware_logger = require_dist_cjs4();\n    var import_middleware_recursion_detection = require_dist_cjs5();\n    var import_middleware_user_agent = require_dist_cjs8();\n    var import_config_resolver = require_dist_cjs11();\n    var import_core = require_dist_cjs34();\n    var import_middleware_content_length = require_dist_cjs35();\n    var import_middleware_endpoint = require_dist_cjs18();\n    var import_middleware_retry = require_dist_cjs33();\n    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider3();\n    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {\n      return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"sso-oauth\",\n      };\n    }, \"resolveClientEndpointParameters\");\n    var commonParams = {\n      UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n      Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n      Region: { type: \"builtInParams\", name: \"region\" },\n      UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n    var import_runtimeConfig = require_runtimeConfig2();\n    var import_region_config_resolver = require_dist_cjs45();\n    var import_protocol_http = require_dist_cjs2();\n    var import_smithy_client = require_dist_cjs32();\n    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n      let _credentials = runtimeConfig.credentials;\n      return {\n        setHttpAuthScheme(httpAuthScheme) {\n          const index = _httpAuthSchemes.findIndex(\n            (scheme) => scheme.schemeId === httpAuthScheme.schemeId\n          );\n          if (index === -1) {\n            _httpAuthSchemes.push(httpAuthScheme);\n          } else {\n            _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n          }\n        },\n        httpAuthSchemes() {\n          return _httpAuthSchemes;\n        },\n        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n          _httpAuthSchemeProvider = httpAuthSchemeProvider;\n        },\n        httpAuthSchemeProvider() {\n          return _httpAuthSchemeProvider;\n        },\n        setCredentials(credentials) {\n          _credentials = credentials;\n        },\n        credentials() {\n          return _credentials;\n        },\n      };\n    }, \"getHttpAuthExtensionConfiguration\");\n    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {\n      return {\n        httpAuthSchemes: config.httpAuthSchemes(),\n        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n        credentials: config.credentials(),\n      };\n    }, \"resolveHttpAuthRuntimeConfig\");\n    var asPartial = /* @__PURE__ */ __name((t) => t, \"asPartial\");\n    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {\n      const extensionConfiguration = {\n        ...asPartial(\n          (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)\n        ),\n        ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),\n        ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),\n        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig)),\n      };\n      extensions.forEach((extension) => extension.configure(extensionConfiguration));\n      return {\n        ...runtimeConfig,\n        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(\n          extensionConfiguration\n        ),\n        ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),\n        ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),\n        ...resolveHttpAuthRuntimeConfig(extensionConfiguration),\n      };\n    }, \"resolveRuntimeExtensions\");\n    var _SSOOIDCClient = class _SSOOIDCClient extends import_smithy_client.Client {\n      constructor(...[configuration]) {\n        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);\n        const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);\n        const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);\n        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);\n        const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);\n        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);\n        const _config_8 = resolveRuntimeExtensions(\n          _config_7,\n          (configuration == null ? void 0 : configuration.extensions) || []\n        );\n        super(_config_8);\n        this.config = _config_8;\n        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_middleware_content_length.getContentLengthPlugin)(this.config)\n        );\n        this.middlewareStack.use(\n          (0, import_middleware_host_header.getHostHeaderPlugin)(this.config)\n        );\n        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config)\n        );\n        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {\n            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),\n            identityProviderConfigProvider: this.getIdentityProviderConfigProvider(),\n          })\n        );\n        this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));\n      }\n      destroy() {\n        super.destroy();\n      }\n      getDefaultHttpAuthSchemeParametersProvider() {\n        return import_httpAuthSchemeProvider.defaultSSOOIDCHttpAuthSchemeParametersProvider;\n      }\n      getIdentityProviderConfigProvider() {\n        return async (config) =>\n          new import_core.DefaultIdentityProviderConfig({\n            \"aws.auth#sigv4\": config.credentials,\n          });\n      }\n    };\n    __name(_SSOOIDCClient, \"SSOOIDCClient\");\n    var SSOOIDCClient = _SSOOIDCClient;\n    var import_middleware_serde = require_dist_cjs17();\n    var _SSOOIDCServiceException = class _SSOOIDCServiceException2 extends import_smithy_client.ServiceException {\n      constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, _SSOOIDCServiceException2.prototype);\n      }\n    };\n    __name(_SSOOIDCServiceException, \"SSOOIDCServiceException\");\n    var SSOOIDCServiceException = _SSOOIDCServiceException;\n    var _AccessDeniedException = class _AccessDeniedException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"AccessDeniedException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"AccessDeniedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_AccessDeniedException, \"AccessDeniedException\");\n    var AccessDeniedException = _AccessDeniedException;\n    var _AuthorizationPendingException = class _AuthorizationPendingException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"AuthorizationPendingException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"AuthorizationPendingException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _AuthorizationPendingException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_AuthorizationPendingException, \"AuthorizationPendingException\");\n    var AuthorizationPendingException = _AuthorizationPendingException;\n    var _ExpiredTokenException = class _ExpiredTokenException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"ExpiredTokenException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"ExpiredTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_ExpiredTokenException, \"ExpiredTokenException\");\n    var ExpiredTokenException = _ExpiredTokenException;\n    var _InternalServerException = class _InternalServerException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"InternalServerException\",\n          $fault: \"server\",\n          ...opts,\n        });\n        this.name = \"InternalServerException\";\n        this.$fault = \"server\";\n        Object.setPrototypeOf(this, _InternalServerException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_InternalServerException, \"InternalServerException\");\n    var InternalServerException = _InternalServerException;\n    var _InvalidClientException = class _InvalidClientException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidClientException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidClientException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidClientException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_InvalidClientException, \"InvalidClientException\");\n    var InvalidClientException = _InvalidClientException;\n    var _InvalidGrantException = class _InvalidGrantException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidGrantException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidGrantException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidGrantException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_InvalidGrantException, \"InvalidGrantException\");\n    var InvalidGrantException = _InvalidGrantException;\n    var _InvalidRequestException = class _InvalidRequestException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidRequestException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidRequestException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_InvalidRequestException, \"InvalidRequestException\");\n    var InvalidRequestException = _InvalidRequestException;\n    var _InvalidScopeException = class _InvalidScopeException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidScopeException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidScopeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidScopeException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_InvalidScopeException, \"InvalidScopeException\");\n    var InvalidScopeException = _InvalidScopeException;\n    var _SlowDownException = class _SlowDownException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"SlowDownException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"SlowDownException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _SlowDownException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_SlowDownException, \"SlowDownException\");\n    var SlowDownException = _SlowDownException;\n    var _UnauthorizedClientException = class _UnauthorizedClientException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"UnauthorizedClientException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"UnauthorizedClientException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _UnauthorizedClientException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_UnauthorizedClientException, \"UnauthorizedClientException\");\n    var UnauthorizedClientException = _UnauthorizedClientException;\n    var _UnsupportedGrantTypeException = class _UnsupportedGrantTypeException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"UnsupportedGrantTypeException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"UnsupportedGrantTypeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _UnsupportedGrantTypeException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_UnsupportedGrantTypeException, \"UnsupportedGrantTypeException\");\n    var UnsupportedGrantTypeException = _UnsupportedGrantTypeException;\n    var _InvalidRequestRegionException = class _InvalidRequestRegionException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidRequestRegionException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidRequestRegionException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidRequestRegionException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n        this.endpoint = opts.endpoint;\n        this.region = opts.region;\n      }\n    };\n    __name(_InvalidRequestRegionException, \"InvalidRequestRegionException\");\n    var InvalidRequestRegionException = _InvalidRequestRegionException;\n    var _InvalidClientMetadataException = class _InvalidClientMetadataException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidClientMetadataException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidClientMetadataException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidClientMetadataException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_InvalidClientMetadataException, \"InvalidClientMetadataException\");\n    var InvalidClientMetadataException = _InvalidClientMetadataException;\n    var _InvalidRedirectUriException = class _InvalidRedirectUriException2 extends SSOOIDCServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidRedirectUriException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidRedirectUriException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidRedirectUriException2.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n      }\n    };\n    __name(_InvalidRedirectUriException, \"InvalidRedirectUriException\");\n    var InvalidRedirectUriException = _InvalidRedirectUriException;\n    var CreateTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.clientSecret && { clientSecret: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.refreshToken && { refreshToken: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.codeVerifier && { codeVerifier: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"CreateTokenRequestFilterSensitiveLog\"\n    );\n    var CreateTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.refreshToken && { refreshToken: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.idToken && { idToken: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"CreateTokenResponseFilterSensitiveLog\"\n    );\n    var CreateTokenWithIAMRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.refreshToken && { refreshToken: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.assertion && { assertion: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.subjectToken && { subjectToken: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.codeVerifier && { codeVerifier: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"CreateTokenWithIAMRequestFilterSensitiveLog\"\n    );\n    var CreateTokenWithIAMResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.refreshToken && { refreshToken: import_smithy_client.SENSITIVE_STRING }),\n        ...(obj.idToken && { idToken: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"CreateTokenWithIAMResponseFilterSensitiveLog\"\n    );\n    var RegisterClientResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.clientSecret && { clientSecret: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"RegisterClientResponseFilterSensitiveLog\"\n    );\n    var StartDeviceAuthorizationRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.clientSecret && { clientSecret: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"StartDeviceAuthorizationRequestFilterSensitiveLog\"\n    );\n    var import_core2 = require_dist_cjs37();\n    var se_CreateTokenCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/token\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          clientId: [],\n          clientSecret: [],\n          code: [],\n          codeVerifier: [],\n          deviceCode: [],\n          grantType: [],\n          redirectUri: [],\n          refreshToken: [],\n          scope: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateTokenCommand\");\n    var se_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/token\");\n      const query = (0, import_smithy_client.map)({\n        [_ai]: [, \"t\"],\n      });\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          assertion: [],\n          clientId: [],\n          code: [],\n          codeVerifier: [],\n          grantType: [],\n          redirectUri: [],\n          refreshToken: [],\n          requestedTokenType: [],\n          scope: (_) => (0, import_smithy_client._json)(_),\n          subjectToken: [],\n          subjectTokenType: [],\n        })\n      );\n      b.m(\"POST\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_CreateTokenWithIAMCommand\");\n    var se_RegisterClientCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/client/register\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          clientName: [],\n          clientType: [],\n          entitledApplicationArn: [],\n          grantTypes: (_) => (0, import_smithy_client._json)(_),\n          issuerUrl: [],\n          redirectUris: (_) => (0, import_smithy_client._json)(_),\n          scopes: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_RegisterClientCommand\");\n    var se_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/device_authorization\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          clientId: [],\n          clientSecret: [],\n          startUrl: [],\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_StartDeviceAuthorizationCommand\");\n    var de_CreateTokenCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        accessToken: import_smithy_client.expectString,\n        expiresIn: import_smithy_client.expectInt32,\n        idToken: import_smithy_client.expectString,\n        refreshToken: import_smithy_client.expectString,\n        tokenType: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateTokenCommand\");\n    var de_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        accessToken: import_smithy_client.expectString,\n        expiresIn: import_smithy_client.expectInt32,\n        idToken: import_smithy_client.expectString,\n        issuedTokenType: import_smithy_client.expectString,\n        refreshToken: import_smithy_client.expectString,\n        scope: import_smithy_client._json,\n        tokenType: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateTokenWithIAMCommand\");\n    var de_RegisterClientCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        authorizationEndpoint: import_smithy_client.expectString,\n        clientId: import_smithy_client.expectString,\n        clientIdIssuedAt: import_smithy_client.expectLong,\n        clientSecret: import_smithy_client.expectString,\n        clientSecretExpiresAt: import_smithy_client.expectLong,\n        tokenEndpoint: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_RegisterClientCommand\");\n    var de_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        deviceCode: import_smithy_client.expectString,\n        expiresIn: import_smithy_client.expectInt32,\n        interval: import_smithy_client.expectInt32,\n        userCode: import_smithy_client.expectString,\n        verificationUri: import_smithy_client.expectString,\n        verificationUriComplete: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_StartDeviceAuthorizationCommand\");\n    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {\n      const parsedOutput = {\n        ...output,\n        body: await (0, import_core2.parseJsonErrorBody)(output.body, context),\n      };\n      const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);\n      switch (errorCode) {\n        case \"AccessDeniedException\":\n        case \"com.amazonaws.ssooidc#AccessDeniedException\":\n          throw await de_AccessDeniedExceptionRes(parsedOutput, context);\n        case \"AuthorizationPendingException\":\n        case \"com.amazonaws.ssooidc#AuthorizationPendingException\":\n          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.ssooidc#ExpiredTokenException\":\n          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"InternalServerException\":\n        case \"com.amazonaws.ssooidc#InternalServerException\":\n          throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"InvalidClientException\":\n        case \"com.amazonaws.ssooidc#InvalidClientException\":\n          throw await de_InvalidClientExceptionRes(parsedOutput, context);\n        case \"InvalidGrantException\":\n        case \"com.amazonaws.ssooidc#InvalidGrantException\":\n          throw await de_InvalidGrantExceptionRes(parsedOutput, context);\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.ssooidc#InvalidRequestException\":\n          throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"InvalidScopeException\":\n        case \"com.amazonaws.ssooidc#InvalidScopeException\":\n          throw await de_InvalidScopeExceptionRes(parsedOutput, context);\n        case \"SlowDownException\":\n        case \"com.amazonaws.ssooidc#SlowDownException\":\n          throw await de_SlowDownExceptionRes(parsedOutput, context);\n        case \"UnauthorizedClientException\":\n        case \"com.amazonaws.ssooidc#UnauthorizedClientException\":\n          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);\n        case \"UnsupportedGrantTypeException\":\n        case \"com.amazonaws.ssooidc#UnsupportedGrantTypeException\":\n          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);\n        case \"InvalidRequestRegionException\":\n        case \"com.amazonaws.ssooidc#InvalidRequestRegionException\":\n          throw await de_InvalidRequestRegionExceptionRes(parsedOutput, context);\n        case \"InvalidClientMetadataException\":\n        case \"com.amazonaws.ssooidc#InvalidClientMetadataException\":\n          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);\n        case \"InvalidRedirectUriException\":\n        case \"com.amazonaws.ssooidc#InvalidRedirectUriException\":\n          throw await de_InvalidRedirectUriExceptionRes(parsedOutput, context);\n        default: {\n          const parsedBody = parsedOutput.body;\n          return throwDefaultError({\n            output,\n            parsedBody,\n            errorCode,\n          });\n        }\n      }\n    }, \"de_CommandError\");\n    var throwDefaultError = (0, import_smithy_client.withBaseException)(SSOOIDCServiceException);\n    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        error: import_smithy_client.expectString,\n        error_description: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new AccessDeniedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_AccessDeniedExceptionRes\");\n    var de_AuthorizationPendingExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const contents = (0, import_smithy_client.map)({});\n        const data = parsedOutput.body;\n        const doc = (0, import_smithy_client.take)(data, {\n          error: import_smithy_client.expectString,\n          error_description: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        const exception = new AuthorizationPendingException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...contents,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n      },\n      \"de_AuthorizationPendingExceptionRes\"\n    );\n    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        error: import_smithy_client.expectString,\n        error_description: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_ExpiredTokenExceptionRes\");\n    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        error: import_smithy_client.expectString,\n        error_description: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new InternalServerException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_InternalServerExceptionRes\");\n    var de_InvalidClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        error: import_smithy_client.expectString,\n        error_description: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new InvalidClientException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_InvalidClientExceptionRes\");\n    var de_InvalidClientMetadataExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const contents = (0, import_smithy_client.map)({});\n        const data = parsedOutput.body;\n        const doc = (0, import_smithy_client.take)(data, {\n          error: import_smithy_client.expectString,\n          error_description: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        const exception = new InvalidClientMetadataException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...contents,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n      },\n      \"de_InvalidClientMetadataExceptionRes\"\n    );\n    var de_InvalidGrantExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        error: import_smithy_client.expectString,\n        error_description: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new InvalidGrantException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_InvalidGrantExceptionRes\");\n    var de_InvalidRedirectUriExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const contents = (0, import_smithy_client.map)({});\n        const data = parsedOutput.body;\n        const doc = (0, import_smithy_client.take)(data, {\n          error: import_smithy_client.expectString,\n          error_description: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        const exception = new InvalidRedirectUriException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...contents,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n      },\n      \"de_InvalidRedirectUriExceptionRes\"\n    );\n    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        error: import_smithy_client.expectString,\n        error_description: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new InvalidRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_InvalidRequestExceptionRes\");\n    var de_InvalidRequestRegionExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const contents = (0, import_smithy_client.map)({});\n        const data = parsedOutput.body;\n        const doc = (0, import_smithy_client.take)(data, {\n          endpoint: import_smithy_client.expectString,\n          error: import_smithy_client.expectString,\n          error_description: import_smithy_client.expectString,\n          region: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        const exception = new InvalidRequestRegionException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...contents,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n      },\n      \"de_InvalidRequestRegionExceptionRes\"\n    );\n    var de_InvalidScopeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        error: import_smithy_client.expectString,\n        error_description: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new InvalidScopeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_InvalidScopeExceptionRes\");\n    var de_SlowDownExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        error: import_smithy_client.expectString,\n        error_description: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new SlowDownException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_SlowDownExceptionRes\");\n    var de_UnauthorizedClientExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const contents = (0, import_smithy_client.map)({});\n        const data = parsedOutput.body;\n        const doc = (0, import_smithy_client.take)(data, {\n          error: import_smithy_client.expectString,\n          error_description: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        const exception = new UnauthorizedClientException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...contents,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n      },\n      \"de_UnauthorizedClientExceptionRes\"\n    );\n    var de_UnsupportedGrantTypeExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const contents = (0, import_smithy_client.map)({});\n        const data = parsedOutput.body;\n        const doc = (0, import_smithy_client.take)(data, {\n          error: import_smithy_client.expectString,\n          error_description: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        const exception = new UnsupportedGrantTypeException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...contents,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n      },\n      \"de_UnsupportedGrantTypeExceptionRes\"\n    );\n    var deserializeMetadata = /* @__PURE__ */ __name(\n      (output) => ({\n        httpStatusCode: output.statusCode,\n        requestId:\n          output.headers[\"x-amzn-requestid\"] ??\n          output.headers[\"x-amzn-request-id\"] ??\n          output.headers[\"x-amz-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n      }),\n      \"deserializeMetadata\"\n    );\n    var _ai = \"aws_iam\";\n    var _CreateTokenCommand = class _CreateTokenCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSSOOIDCService\", \"CreateToken\", {})\n      .n(\"SSOOIDCClient\", \"CreateTokenCommand\")\n      .f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog)\n      .ser(se_CreateTokenCommand)\n      .de(de_CreateTokenCommand)\n      .build() {};\n    __name(_CreateTokenCommand, \"CreateTokenCommand\");\n    var CreateTokenCommand = _CreateTokenCommand;\n    var _CreateTokenWithIAMCommand = class _CreateTokenWithIAMCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSSOOIDCService\", \"CreateTokenWithIAM\", {})\n      .n(\"SSOOIDCClient\", \"CreateTokenWithIAMCommand\")\n      .f(CreateTokenWithIAMRequestFilterSensitiveLog, CreateTokenWithIAMResponseFilterSensitiveLog)\n      .ser(se_CreateTokenWithIAMCommand)\n      .de(de_CreateTokenWithIAMCommand)\n      .build() {};\n    __name(_CreateTokenWithIAMCommand, \"CreateTokenWithIAMCommand\");\n    var CreateTokenWithIAMCommand = _CreateTokenWithIAMCommand;\n    var _RegisterClientCommand = class _RegisterClientCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSSOOIDCService\", \"RegisterClient\", {})\n      .n(\"SSOOIDCClient\", \"RegisterClientCommand\")\n      .f(void 0, RegisterClientResponseFilterSensitiveLog)\n      .ser(se_RegisterClientCommand)\n      .de(de_RegisterClientCommand)\n      .build() {};\n    __name(_RegisterClientCommand, \"RegisterClientCommand\");\n    var RegisterClientCommand = _RegisterClientCommand;\n    var _StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSSOOIDCService\", \"StartDeviceAuthorization\", {})\n      .n(\"SSOOIDCClient\", \"StartDeviceAuthorizationCommand\")\n      .f(StartDeviceAuthorizationRequestFilterSensitiveLog, void 0)\n      .ser(se_StartDeviceAuthorizationCommand)\n      .de(de_StartDeviceAuthorizationCommand)\n      .build() {};\n    __name(_StartDeviceAuthorizationCommand, \"StartDeviceAuthorizationCommand\");\n    var StartDeviceAuthorizationCommand = _StartDeviceAuthorizationCommand;\n    var commands = {\n      CreateTokenCommand,\n      CreateTokenWithIAMCommand,\n      RegisterClientCommand,\n      StartDeviceAuthorizationCommand,\n    };\n    var _SSOOIDC = class _SSOOIDC extends SSOOIDCClient {};\n    __name(_SSOOIDC, \"SSOOIDC\");\n    var SSOOIDC = _SSOOIDC;\n    (0, import_smithy_client.createAggregatedClient)(commands, SSOOIDC);\n  },\n});\n\n// node_modules/@aws-sdk/token-providers/dist-cjs/index.js\nvar require_dist_cjs48 = __commonJS({\n  \"node_modules/@aws-sdk/token-providers/dist-cjs/index.js\"(exports, module2) {\n    var __create2 = Object.create;\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __getProtoOf2 = Object.getPrototypeOf;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toESM2 = (mod, isNodeMode, target) => (\n      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),\n      __copyProps2(\n        isNodeMode || !mod || !mod.__esModule\n          ? __defProp2(target, \"default\", { value: mod, enumerable: true })\n          : target,\n        mod\n      )\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      fromSso: () => fromSso,\n      fromStatic: () => fromStatic,\n      nodeProvider: () => nodeProvider,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var EXPIRE_WINDOW_MS = 5 * 60 * 1e3;\n    var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n    var ssoOidcClientsHash = {};\n    var getSsoOidcClient = /* @__PURE__ */ __name(async (ssoRegion) => {\n      const { SSOOIDCClient } = await Promise.resolve().then(() => __toESM2(require_dist_cjs47()));\n      if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n      }\n      const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n      return ssoOidcClient;\n    }, \"getSsoOidcClient\");\n    var getNewSsoOidcToken = /* @__PURE__ */ __name(async (ssoToken, ssoRegion) => {\n      const { CreateTokenCommand } = await Promise.resolve().then(() =>\n        __toESM2(require_dist_cjs47())\n      );\n      const ssoOidcClient = await getSsoOidcClient(ssoRegion);\n      return ssoOidcClient.send(\n        new CreateTokenCommand({\n          clientId: ssoToken.clientId,\n          clientSecret: ssoToken.clientSecret,\n          refreshToken: ssoToken.refreshToken,\n          grantType: \"refresh_token\",\n        })\n      );\n    }, \"getNewSsoOidcToken\");\n    var import_property_provider = require_dist_cjs12();\n    var validateTokenExpiry = /* @__PURE__ */ __name((token) => {\n      if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new import_property_provider.TokenProviderError(\n          `Token is expired. ${REFRESH_MESSAGE}`,\n          false\n        );\n      }\n    }, \"validateTokenExpiry\");\n    var validateTokenKey = /* @__PURE__ */ __name((key, value, forRefresh = false) => {\n      if (typeof value === \"undefined\") {\n        throw new import_property_provider.TokenProviderError(\n          `Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`,\n          false\n        );\n      }\n    }, \"validateTokenKey\");\n    var import_shared_ini_file_loader = require_dist_cjs13();\n    var import_fs = require(\"fs\");\n    var { writeFile } = import_fs.promises;\n    var writeSSOTokenToFile = /* @__PURE__ */ __name((id, ssoToken) => {\n      const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);\n      const tokenString = JSON.stringify(ssoToken, null, 2);\n      return writeFile(tokenFilepath, tokenString);\n    }, \"writeSSOTokenToFile\");\n    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);\n    var fromSso = /* @__PURE__ */ __name(\n      (init = {}) =>\n        async () => {\n          var _a;\n          (_a = init.logger) == null ? void 0 : _a.debug(\"@aws-sdk/token-providers - fromSso\");\n          const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);\n          const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);\n          const profile = profiles[profileName];\n          if (!profile) {\n            throw new import_property_provider.TokenProviderError(\n              `Profile '${profileName}' could not be found in shared credentials file.`,\n              false\n            );\n          } else if (!profile[\"sso_session\"]) {\n            throw new import_property_provider.TokenProviderError(\n              `Profile '${profileName}' is missing required property 'sso_session'.`\n            );\n          }\n          const ssoSessionName = profile[\"sso_session\"];\n          const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);\n          const ssoSession = ssoSessions[ssoSessionName];\n          if (!ssoSession) {\n            throw new import_property_provider.TokenProviderError(\n              `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,\n              false\n            );\n          }\n          for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n            if (!ssoSession[ssoSessionRequiredKey]) {\n              throw new import_property_provider.TokenProviderError(\n                `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,\n                false\n              );\n            }\n          }\n          const ssoStartUrl = ssoSession[\"sso_start_url\"];\n          const ssoRegion = ssoSession[\"sso_region\"];\n          let ssoToken;\n          try {\n            ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);\n          } catch (e) {\n            throw new import_property_provider.TokenProviderError(\n              `The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`,\n              false\n            );\n          }\n          validateTokenKey(\"accessToken\", ssoToken.accessToken);\n          validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n          const { accessToken, expiresAt } = ssoToken;\n          const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n          if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n            return existingToken;\n          }\n          if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {\n            validateTokenExpiry(existingToken);\n            return existingToken;\n          }\n          validateTokenKey(\"clientId\", ssoToken.clientId, true);\n          validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n          validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n          try {\n            lastRefreshAttemptTime.setTime(Date.now());\n            const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n            validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n            validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n            const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);\n            try {\n              await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n              });\n            } catch (error) {}\n            return {\n              token: newSsoOidcToken.accessToken,\n              expiration: newTokenExpiration,\n            };\n          } catch (error) {\n            validateTokenExpiry(existingToken);\n            return existingToken;\n          }\n        },\n      \"fromSso\"\n    );\n    var fromStatic = /* @__PURE__ */ __name(\n      ({ token, logger }) =>\n        async () => {\n          logger == null ? void 0 : logger.debug(\"@aws-sdk/token-providers - fromStatic\");\n          if (!token || !token.token) {\n            throw new import_property_provider.TokenProviderError(\n              `Please pass a valid token to fromStatic`,\n              false\n            );\n          }\n          return token;\n        },\n      \"fromStatic\"\n    );\n    var nodeProvider = /* @__PURE__ */ __name(\n      (init = {}) =>\n        (0, import_property_provider.memoize)(\n          (0, import_property_provider.chain)(fromSso(init), async () => {\n            throw new import_property_provider.TokenProviderError(\n              \"Could not load token from any providers\",\n              false\n            );\n          }),\n          (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5,\n          (token) => token.expiration !== void 0\n        ),\n      \"nodeProvider\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js\nvar require_dist_cjs49 = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __esm = (fn, res) =>\n      function __init() {\n        return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])((fn = 0))), res;\n      };\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var loadSso_exports = {};\n    __export2(loadSso_exports, {\n      GetRoleCredentialsCommand: () => import_client_sso.GetRoleCredentialsCommand,\n      SSOClient: () => import_client_sso.SSOClient,\n    });\n    var import_client_sso;\n    var init_loadSso = __esm({\n      \"src/loadSso.ts\"() {\n        import_client_sso = require_dist_cjs46();\n      },\n    });\n    var src_exports = {};\n    __export2(src_exports, {\n      fromSSO: () => fromSSO,\n      isSsoProfile: () => isSsoProfile,\n      validateSsoProfile: () => validateSsoProfile,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var isSsoProfile = /* @__PURE__ */ __name(\n      (arg) =>\n        arg &&\n        (typeof arg.sso_start_url === \"string\" ||\n          typeof arg.sso_account_id === \"string\" ||\n          typeof arg.sso_session === \"string\" ||\n          typeof arg.sso_region === \"string\" ||\n          typeof arg.sso_role_name === \"string\"),\n      \"isSsoProfile\"\n    );\n    var import_token_providers = require_dist_cjs48();\n    var import_property_provider = require_dist_cjs12();\n    var import_shared_ini_file_loader = require_dist_cjs13();\n    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;\n    var resolveSSOCredentials = /* @__PURE__ */ __name(\n      async ({\n        ssoStartUrl,\n        ssoSession,\n        ssoAccountId,\n        ssoRegion,\n        ssoRoleName,\n        ssoClient,\n        clientConfig,\n        profile,\n        logger,\n      }) => {\n        let token;\n        const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n        if (ssoSession) {\n          try {\n            const _token = await (0, import_token_providers.fromSso)({ profile })();\n            token = {\n              accessToken: _token.token,\n              expiresAt: new Date(_token.expiration).toISOString(),\n            };\n          } catch (e) {\n            throw new import_property_provider.CredentialsProviderError(e.message, {\n              tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n              logger,\n            });\n          }\n        } else {\n          try {\n            token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);\n          } catch (e) {\n            throw new import_property_provider.CredentialsProviderError(\n              `The SSO session associated with this profile is invalid. ${refreshMessage}`,\n              {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n              }\n            );\n          }\n        }\n        if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n          throw new import_property_provider.CredentialsProviderError(\n            `The SSO session associated with this profile has expired. ${refreshMessage}`,\n            {\n              tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n              logger,\n            }\n          );\n        }\n        const { accessToken } = token;\n        const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } =\n          await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));\n        const sso =\n          ssoClient ||\n          new SSOClient2(\n            Object.assign({}, clientConfig ?? {}, {\n              region: (clientConfig == null ? void 0 : clientConfig.region) ?? ssoRegion,\n            })\n          );\n        let ssoResp;\n        try {\n          ssoResp = await sso.send(\n            new GetRoleCredentialsCommand2({\n              accountId: ssoAccountId,\n              roleName: ssoRoleName,\n              accessToken,\n            })\n          );\n        } catch (e) {\n          throw new import_property_provider.CredentialsProviderError(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n          });\n        }\n        const {\n          roleCredentials: {\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            expiration,\n            credentialScope,\n          } = {},\n        } = ssoResp;\n        if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n          throw new import_property_provider.CredentialsProviderError(\n            \"SSO returns an invalid temporary credential.\",\n            {\n              tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n              logger,\n            }\n          );\n        }\n        return {\n          accessKeyId,\n          secretAccessKey,\n          sessionToken,\n          expiration: new Date(expiration),\n          credentialScope,\n        };\n      },\n      \"resolveSSOCredentials\"\n    );\n    var validateSsoProfile = /* @__PURE__ */ __name((profile, logger) => {\n      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new import_property_provider.CredentialsProviderError(\n          `Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", \"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(\n            profile\n          ).join(\", \")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,\n          { tryNextLink: false, logger }\n        );\n      }\n      return profile;\n    }, \"validateSsoProfile\");\n    var fromSSO = /* @__PURE__ */ __name(\n      (init = {}) =>\n        async () => {\n          var _a;\n          (_a = init.logger) == null\n            ? void 0\n            : _a.debug(\"@aws-sdk/credential-provider-sso - fromSSO\");\n          const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n          const { ssoClient } = init;\n          const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);\n          if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n            const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);\n            const profile = profiles[profileName];\n            if (!profile) {\n              throw new import_property_provider.CredentialsProviderError(\n                `Profile ${profileName} was not found.`,\n                { logger: init.logger }\n              );\n            }\n            if (!isSsoProfile(profile)) {\n              throw new import_property_provider.CredentialsProviderError(\n                `Profile ${profileName} is not configured with SSO credentials.`,\n                {\n                  logger: init.logger,\n                }\n              );\n            }\n            if (profile == null ? void 0 : profile.sso_session) {\n              const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);\n              const session = ssoSessions[profile.sso_session];\n              const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n              if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new import_property_provider.CredentialsProviderError(\n                  `Conflicting SSO region` + conflictMsg,\n                  {\n                    tryNextLink: false,\n                    logger: init.logger,\n                  }\n                );\n              }\n              if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new import_property_provider.CredentialsProviderError(\n                  `Conflicting SSO start_url` + conflictMsg,\n                  {\n                    tryNextLink: false,\n                    logger: init.logger,\n                  }\n                );\n              }\n              profile.sso_region = session.sso_region;\n              profile.sso_start_url = session.sso_start_url;\n            }\n            const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } =\n              validateSsoProfile(profile, init.logger);\n            return resolveSSOCredentials({\n              ssoStartUrl: sso_start_url,\n              ssoSession: sso_session,\n              ssoAccountId: sso_account_id,\n              ssoRegion: sso_region,\n              ssoRoleName: sso_role_name,\n              ssoClient,\n              clientConfig: init.clientConfig,\n              profile: profileName,\n            });\n          } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n            throw new import_property_provider.CredentialsProviderError(\n              'Incomplete configuration. The fromSSO() argument hash must include \"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"',\n              { tryNextLink: false, logger: init.logger }\n            );\n          } else {\n            return resolveSSOCredentials({\n              ssoStartUrl,\n              ssoSession,\n              ssoAccountId,\n              ssoRegion,\n              ssoRoleName,\n              ssoClient,\n              clientConfig: init.clientConfig,\n              profile: profileName,\n            });\n          }\n        },\n      \"fromSSO\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js\nvar require_httpAuthSchemeProvider4 = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.resolveHttpAuthSchemeConfig =\n      exports.resolveStsAuthConfig =\n      exports.defaultSTSHttpAuthSchemeProvider =\n      exports.defaultSTSHttpAuthSchemeParametersProvider =\n        void 0;\n    var core_1 = require_dist_cjs37();\n    var util_middleware_1 = require_dist_cjs10();\n    var STSClient_1 = require_STSClient();\n    var defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {\n      return {\n        operation: (0, util_middleware_1.getSmithyContext)(context).operation,\n        region:\n          (await (0, util_middleware_1.normalizeProvider)(config.region)()) ||\n          (() => {\n            throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n          })(),\n      };\n    };\n    exports.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;\n    function createAwsAuthSigv4HttpAuthOption(authParameters) {\n      return {\n        schemeId: \"aws.auth#sigv4\",\n        signingProperties: {\n          name: \"sts\",\n          region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n          signingProperties: {\n            config,\n            context,\n          },\n        }),\n      };\n    }\n    function createSmithyApiNoAuthHttpAuthOption(authParameters) {\n      return {\n        schemeId: \"smithy.api#noAuth\",\n      };\n    }\n    var defaultSTSHttpAuthSchemeProvider = (authParameters) => {\n      const options = [];\n      switch (authParameters.operation) {\n        case \"AssumeRoleWithSAML\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        case \"AssumeRoleWithWebIdentity\": {\n          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));\n          break;\n        }\n        default: {\n          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n        }\n      }\n      return options;\n    };\n    exports.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;\n    var resolveStsAuthConfig = (input) => ({\n      ...input,\n      stsClientCtor: STSClient_1.STSClient,\n    });\n    exports.resolveStsAuthConfig = resolveStsAuthConfig;\n    var resolveHttpAuthSchemeConfig = (config) => {\n      const config_0 = (0, exports.resolveStsAuthConfig)(config);\n      const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);\n      return {\n        ...config_1,\n      };\n    };\n    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js\nvar require_EndpointParameters = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.commonParams = exports.resolveClientEndpointParameters = void 0;\n    var resolveClientEndpointParameters = (options) => {\n      return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        useGlobalEndpoint: options.useGlobalEndpoint ?? false,\n        defaultSigningName: \"sts\",\n      };\n    };\n    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;\n    exports.commonParams = {\n      UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n      UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n      Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n      Region: { type: \"builtInParams\", name: \"region\" },\n      UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/package.json\nvar require_package4 = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/package.json\"(exports, module2) {\n    module2.exports = {\n      name: \"@aws-sdk/client-sts\",\n      description: \"AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native\",\n      version: \"3.600.0\",\n      scripts: {\n        build: \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n        \"build:cjs\": \"node ../../scripts/compilation/inline client-sts\",\n        \"build:es\": \"tsc -p tsconfig.es.json\",\n        \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n        \"build:types\":\n          \"rimraf ./dist-types tsconfig.types.tsbuildinfo && tsc -p tsconfig.types.json\",\n        \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n        clean: \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n        \"extract:docs\": \"api-extractor run --local\",\n        \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo sts\",\n        test: \"yarn test:unit\",\n        \"test:unit\": \"jest\",\n      },\n      main: \"./dist-cjs/index.js\",\n      types: \"./dist-types/index.d.ts\",\n      module: \"./dist-es/index.js\",\n      sideEffects: false,\n      dependencies: {\n        \"@aws-crypto/sha256-browser\": \"5.2.0\",\n        \"@aws-crypto/sha256-js\": \"5.2.0\",\n        \"@aws-sdk/client-sso-oidc\": \"3.600.0\",\n        \"@aws-sdk/core\": \"3.598.0\",\n        \"@aws-sdk/credential-provider-node\": \"3.600.0\",\n        \"@aws-sdk/middleware-host-header\": \"3.598.0\",\n        \"@aws-sdk/middleware-logger\": \"3.598.0\",\n        \"@aws-sdk/middleware-recursion-detection\": \"3.598.0\",\n        \"@aws-sdk/middleware-user-agent\": \"3.598.0\",\n        \"@aws-sdk/region-config-resolver\": \"3.598.0\",\n        \"@aws-sdk/types\": \"3.598.0\",\n        \"@aws-sdk/util-endpoints\": \"3.598.0\",\n        \"@aws-sdk/util-user-agent-browser\": \"3.598.0\",\n        \"@aws-sdk/util-user-agent-node\": \"3.598.0\",\n        \"@smithy/config-resolver\": \"^3.0.2\",\n        \"@smithy/core\": \"^2.2.1\",\n        \"@smithy/fetch-http-handler\": \"^3.0.2\",\n        \"@smithy/hash-node\": \"^3.0.1\",\n        \"@smithy/invalid-dependency\": \"^3.0.1\",\n        \"@smithy/middleware-content-length\": \"^3.0.1\",\n        \"@smithy/middleware-endpoint\": \"^3.0.2\",\n        \"@smithy/middleware-retry\": \"^3.0.4\",\n        \"@smithy/middleware-serde\": \"^3.0.1\",\n        \"@smithy/middleware-stack\": \"^3.0.1\",\n        \"@smithy/node-config-provider\": \"^3.1.1\",\n        \"@smithy/node-http-handler\": \"^3.0.1\",\n        \"@smithy/protocol-http\": \"^4.0.1\",\n        \"@smithy/smithy-client\": \"^3.1.2\",\n        \"@smithy/types\": \"^3.1.0\",\n        \"@smithy/url-parser\": \"^3.0.1\",\n        \"@smithy/util-base64\": \"^3.0.0\",\n        \"@smithy/util-body-length-browser\": \"^3.0.0\",\n        \"@smithy/util-body-length-node\": \"^3.0.0\",\n        \"@smithy/util-defaults-mode-browser\": \"^3.0.4\",\n        \"@smithy/util-defaults-mode-node\": \"^3.0.4\",\n        \"@smithy/util-endpoints\": \"^2.0.2\",\n        \"@smithy/util-middleware\": \"^3.0.1\",\n        \"@smithy/util-retry\": \"^3.0.1\",\n        \"@smithy/util-utf8\": \"^3.0.0\",\n        tslib: \"^2.6.2\",\n      },\n      devDependencies: {\n        \"@tsconfig/node16\": \"16.1.3\",\n        \"@types/node\": \"^16.18.96\",\n        concurrently: \"7.0.0\",\n        \"downlevel-dts\": \"0.10.1\",\n        rimraf: \"3.0.2\",\n        typescript: \"~4.9.5\",\n      },\n      engines: {\n        node: \">=16.0.0\",\n      },\n      typesVersions: {\n        \"<4.0\": {\n          \"dist-types/*\": [\"dist-types/ts3.4/*\"],\n        },\n      },\n      files: [\"dist-*/**\"],\n      author: {\n        name: \"AWS SDK for JavaScript Team\",\n        url: \"https://aws.amazon.com/javascript/\",\n      },\n      license: \"Apache-2.0\",\n      browser: {\n        \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\",\n      },\n      \"react-native\": {\n        \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\",\n      },\n      homepage: \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts\",\n      repository: {\n        type: \"git\",\n        url: \"https://github.com/aws/aws-sdk-js-v3.git\",\n        directory: \"clients/client-sts\",\n      },\n    };\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js\nvar require_ruleset3 = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ruleSet = void 0;\n    var F = \"required\";\n    var G = \"type\";\n    var H = \"fn\";\n    var I = \"argv\";\n    var J = \"ref\";\n    var a = false;\n    var b = true;\n    var c = \"booleanEquals\";\n    var d = \"stringEquals\";\n    var e = \"sigv4\";\n    var f = \"sts\";\n    var g = \"us-east-1\";\n    var h = \"endpoint\";\n    var i = \"https://sts.{Region}.{PartitionResult#dnsSuffix}\";\n    var j = \"tree\";\n    var k = \"error\";\n    var l = \"getAttr\";\n    var m = { [F]: false, [G]: \"String\" };\n    var n = { [F]: true, default: false, [G]: \"Boolean\" };\n    var o = { [J]: \"Endpoint\" };\n    var p = { [H]: \"isSet\", [I]: [{ [J]: \"Region\" }] };\n    var q = { [J]: \"Region\" };\n    var r = { [H]: \"aws.partition\", [I]: [q], assign: \"PartitionResult\" };\n    var s = { [J]: \"UseFIPS\" };\n    var t = { [J]: \"UseDualStack\" };\n    var u = {\n      url: \"https://sts.amazonaws.com\",\n      properties: { authSchemes: [{ name: e, signingName: f, signingRegion: g }] },\n      headers: {},\n    };\n    var v = {};\n    var w = { conditions: [{ [H]: d, [I]: [q, \"aws-global\"] }], [h]: u, [G]: h };\n    var x = { [H]: c, [I]: [s, true] };\n    var y = { [H]: c, [I]: [t, true] };\n    var z = { [H]: l, [I]: [{ [J]: \"PartitionResult\" }, \"supportsFIPS\"] };\n    var A = { [J]: \"PartitionResult\" };\n    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, \"supportsDualStack\"] }] };\n    var C = [{ [H]: \"isSet\", [I]: [o] }];\n    var D = [x];\n    var E = [y];\n    var _data = {\n      version: \"1.0\",\n      parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n },\n      rules: [\n        {\n          conditions: [\n            { [H]: c, [I]: [{ [J]: \"UseGlobalEndpoint\" }, b] },\n            { [H]: \"not\", [I]: C },\n            p,\n            r,\n            { [H]: c, [I]: [s, a] },\n            { [H]: c, [I]: [t, a] },\n          ],\n          rules: [\n            { conditions: [{ [H]: d, [I]: [q, \"ap-northeast-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"ap-south-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"ap-southeast-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"ap-southeast-2\"] }], endpoint: u, [G]: h },\n            w,\n            { conditions: [{ [H]: d, [I]: [q, \"ca-central-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"eu-central-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"eu-north-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"eu-west-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"eu-west-2\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"eu-west-3\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"sa-east-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"us-east-2\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"us-west-1\"] }], endpoint: u, [G]: h },\n            { conditions: [{ [H]: d, [I]: [q, \"us-west-2\"] }], endpoint: u, [G]: h },\n            {\n              endpoint: {\n                url: i,\n                properties: {\n                  authSchemes: [{ name: e, signingName: f, signingRegion: \"{Region}\" }],\n                },\n                headers: v,\n              },\n              [G]: h,\n            },\n          ],\n          [G]: j,\n        },\n        {\n          conditions: C,\n          rules: [\n            {\n              conditions: D,\n              error: \"Invalid Configuration: FIPS and custom endpoint are not supported\",\n              [G]: k,\n            },\n            {\n              conditions: E,\n              error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\",\n              [G]: k,\n            },\n            { endpoint: { url: o, properties: v, headers: v }, [G]: h },\n          ],\n          [G]: j,\n        },\n        {\n          conditions: [p],\n          rules: [\n            {\n              conditions: [r],\n              rules: [\n                {\n                  conditions: [x, y],\n                  rules: [\n                    {\n                      conditions: [{ [H]: c, [I]: [b, z] }, B],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n                            properties: v,\n                            headers: v,\n                          },\n                          [G]: h,\n                        },\n                      ],\n                      [G]: j,\n                    },\n                    {\n                      error:\n                        \"FIPS and DualStack are enabled, but this partition does not support one or both\",\n                      [G]: k,\n                    },\n                  ],\n                  [G]: j,\n                },\n                {\n                  conditions: D,\n                  rules: [\n                    {\n                      conditions: [{ [H]: c, [I]: [z, b] }],\n                      rules: [\n                        {\n                          conditions: [\n                            { [H]: d, [I]: [{ [H]: l, [I]: [A, \"name\"] }, \"aws-us-gov\"] },\n                          ],\n                          endpoint: {\n                            url: \"https://sts.{Region}.amazonaws.com\",\n                            properties: v,\n                            headers: v,\n                          },\n                          [G]: h,\n                        },\n                        {\n                          endpoint: {\n                            url: \"https://sts-fips.{Region}.{PartitionResult#dnsSuffix}\",\n                            properties: v,\n                            headers: v,\n                          },\n                          [G]: h,\n                        },\n                      ],\n                      [G]: j,\n                    },\n                    { error: \"FIPS is enabled but this partition does not support FIPS\", [G]: k },\n                  ],\n                  [G]: j,\n                },\n                {\n                  conditions: E,\n                  rules: [\n                    {\n                      conditions: [B],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n                            properties: v,\n                            headers: v,\n                          },\n                          [G]: h,\n                        },\n                      ],\n                      [G]: j,\n                    },\n                    {\n                      error: \"DualStack is enabled but this partition does not support DualStack\",\n                      [G]: k,\n                    },\n                  ],\n                  [G]: j,\n                },\n                w,\n                { endpoint: { url: i, properties: v, headers: v }, [G]: h },\n              ],\n              [G]: j,\n            },\n          ],\n          [G]: j,\n        },\n        { error: \"Invalid Configuration: Missing Region\", [G]: k },\n      ],\n    };\n    exports.ruleSet = _data;\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js\nvar require_endpointResolver3 = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.defaultEndpointResolver = void 0;\n    var util_endpoints_1 = require_dist_cjs7();\n    var util_endpoints_2 = require_dist_cjs6();\n    var ruleset_1 = require_ruleset3();\n    var defaultEndpointResolver = (endpointParams, context = {}) => {\n      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {\n        endpointParams,\n        logger: context.logger,\n      });\n    };\n    exports.defaultEndpointResolver = defaultEndpointResolver;\n    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js\nvar require_runtimeConfig_shared3 = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getRuntimeConfig = void 0;\n    var core_1 = require_dist_cjs37();\n    var core_2 = require_dist_cjs34();\n    var smithy_client_1 = require_dist_cjs32();\n    var url_parser_1 = require_dist_cjs16();\n    var util_base64_1 = require_dist_cjs25();\n    var util_utf8_1 = require_dist_cjs24();\n    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();\n    var endpointResolver_1 = require_endpointResolver3();\n    var getRuntimeConfig = (config) => {\n      return {\n        apiVersion: \"2011-06-15\",\n        base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,\n        base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,\n        disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,\n        endpointProvider:\n          (config == null ? void 0 : config.endpointProvider) ??\n          endpointResolver_1.defaultEndpointResolver,\n        extensions: (config == null ? void 0 : config.extensions) ?? [],\n        httpAuthSchemeProvider:\n          (config == null ? void 0 : config.httpAuthSchemeProvider) ??\n          httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,\n        httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [\n          {\n            schemeId: \"aws.auth#sigv4\",\n            identityProvider: (ipc) => ipc.getIdentityProvider(\"aws.auth#sigv4\"),\n            signer: new core_1.AwsSdkSigV4Signer(),\n          },\n          {\n            schemeId: \"smithy.api#noAuth\",\n            identityProvider: (ipc) =>\n              ipc.getIdentityProvider(\"smithy.api#noAuth\") || (async () => ({})),\n            signer: new core_2.NoAuthSigner(),\n          },\n        ],\n        logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),\n        serviceId: (config == null ? void 0 : config.serviceId) ?? \"STS\",\n        urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,\n        utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,\n        utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,\n      };\n    };\n    exports.getRuntimeConfig = getRuntimeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js\nvar require_runtimeConfig3 = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getRuntimeConfig = void 0;\n    var tslib_1 = require_tslib();\n    var package_json_1 = tslib_1.__importDefault(require_package4());\n    var core_1 = require_dist_cjs37();\n    var credential_provider_node_1 = require_dist_cjs54();\n    var util_user_agent_node_1 = require_dist_cjs41();\n    var config_resolver_1 = require_dist_cjs11();\n    var core_2 = require_dist_cjs34();\n    var hash_node_1 = require_dist_cjs42();\n    var middleware_retry_1 = require_dist_cjs33();\n    var node_config_provider_1 = require_dist_cjs14();\n    var node_http_handler_1 = require_dist_cjs28();\n    var util_body_length_node_1 = require_dist_cjs43();\n    var util_retry_1 = require_dist_cjs20();\n    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();\n    var smithy_client_1 = require_dist_cjs32();\n    var util_defaults_mode_node_1 = require_dist_cjs44();\n    var smithy_client_2 = require_dist_cjs32();\n    var getRuntimeConfig = (config) => {\n      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);\n      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);\n      const defaultConfigProvider = () =>\n        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);\n      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);\n      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);\n      return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker:\n          (config == null ? void 0 : config.bodyLengthChecker) ??\n          util_body_length_node_1.calculateBodyLength,\n        credentialDefaultProvider:\n          (config == null ? void 0 : config.credentialDefaultProvider) ??\n          credential_provider_node_1.defaultProvider,\n        defaultUserAgentProvider:\n          (config == null ? void 0 : config.defaultUserAgentProvider) ??\n          (0, util_user_agent_node_1.defaultUserAgent)({\n            serviceId: clientSharedValues.serviceId,\n            clientVersion: package_json_1.default.version,\n          }),\n        httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [\n          {\n            schemeId: \"aws.auth#sigv4\",\n            identityProvider: (ipc) =>\n              ipc.getIdentityProvider(\"aws.auth#sigv4\") ||\n              (async (idProps) =>\n                await (0, credential_provider_node_1.defaultProvider)(\n                  (idProps == null ? void 0 : idProps.__config) || {}\n                )()),\n            signer: new core_1.AwsSdkSigV4Signer(),\n          },\n          {\n            schemeId: \"smithy.api#noAuth\",\n            identityProvider: (ipc) =>\n              ipc.getIdentityProvider(\"smithy.api#noAuth\") || (async () => ({})),\n            signer: new core_2.NoAuthSigner(),\n          },\n        ],\n        maxAttempts:\n          (config == null ? void 0 : config.maxAttempts) ??\n          (0, node_config_provider_1.loadConfig)(\n            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS\n          ),\n        region:\n          (config == null ? void 0 : config.region) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,\n            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS\n          ),\n        requestHandler: node_http_handler_1.NodeHttpHandler.create(\n          (config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider\n        ),\n        retryMode:\n          (config == null ? void 0 : config.retryMode) ??\n          (0, node_config_provider_1.loadConfig)({\n            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,\n            default: async () =>\n              (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE,\n          }),\n        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, \"sha256\"),\n        streamCollector:\n          (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,\n        useDualstackEndpoint:\n          (config == null ? void 0 : config.useDualstackEndpoint) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS\n          ),\n        useFipsEndpoint:\n          (config == null ? void 0 : config.useFipsEndpoint) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS\n          ),\n      };\n    };\n    exports.getRuntimeConfig = getRuntimeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js\nvar require_httpAuthExtensionConfiguration = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.resolveHttpAuthRuntimeConfig = exports.getHttpAuthExtensionConfiguration = void 0;\n    var getHttpAuthExtensionConfiguration = (runtimeConfig) => {\n      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n      let _credentials = runtimeConfig.credentials;\n      return {\n        setHttpAuthScheme(httpAuthScheme) {\n          const index = _httpAuthSchemes.findIndex(\n            (scheme) => scheme.schemeId === httpAuthScheme.schemeId\n          );\n          if (index === -1) {\n            _httpAuthSchemes.push(httpAuthScheme);\n          } else {\n            _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n          }\n        },\n        httpAuthSchemes() {\n          return _httpAuthSchemes;\n        },\n        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n          _httpAuthSchemeProvider = httpAuthSchemeProvider;\n        },\n        httpAuthSchemeProvider() {\n          return _httpAuthSchemeProvider;\n        },\n        setCredentials(credentials) {\n          _credentials = credentials;\n        },\n        credentials() {\n          return _credentials;\n        },\n      };\n    };\n    exports.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;\n    var resolveHttpAuthRuntimeConfig = (config) => {\n      return {\n        httpAuthSchemes: config.httpAuthSchemes(),\n        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n        credentials: config.credentials(),\n      };\n    };\n    exports.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js\nvar require_runtimeExtensions = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.resolveRuntimeExtensions = void 0;\n    var region_config_resolver_1 = require_dist_cjs45();\n    var protocol_http_1 = require_dist_cjs2();\n    var smithy_client_1 = require_dist_cjs32();\n    var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration();\n    var asPartial = (t) => t;\n    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {\n      const extensionConfiguration = {\n        ...asPartial(\n          (0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)\n        ),\n        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),\n        ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig)),\n        ...asPartial(\n          (0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig)\n        ),\n      };\n      extensions.forEach((extension) => extension.configure(extensionConfiguration));\n      return {\n        ...runtimeConfig,\n        ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(\n          extensionConfiguration\n        ),\n        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),\n        ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),\n        ...(0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(\n          extensionConfiguration\n        ),\n      };\n    };\n    exports.resolveRuntimeExtensions = resolveRuntimeExtensions;\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js\nvar require_STSClient = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.STSClient = exports.__Client = void 0;\n    var middleware_host_header_1 = require_dist_cjs3();\n    var middleware_logger_1 = require_dist_cjs4();\n    var middleware_recursion_detection_1 = require_dist_cjs5();\n    var middleware_user_agent_1 = require_dist_cjs8();\n    var config_resolver_1 = require_dist_cjs11();\n    var core_1 = require_dist_cjs34();\n    var middleware_content_length_1 = require_dist_cjs35();\n    var middleware_endpoint_1 = require_dist_cjs18();\n    var middleware_retry_1 = require_dist_cjs33();\n    var smithy_client_1 = require_dist_cjs32();\n    Object.defineProperty(exports, \"__Client\", {\n      enumerable: true,\n      get: () => smithy_client_1.Client,\n    });\n    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();\n    var EndpointParameters_1 = require_EndpointParameters();\n    var runtimeConfig_1 = require_runtimeConfig3();\n    var runtimeExtensions_1 = require_runtimeExtensions();\n    var STSClient2 = class extends smithy_client_1.Client {\n      constructor(...[configuration]) {\n        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);\n        const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);\n        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(\n          _config_7,\n          (configuration == null ? void 0 : configuration.extensions) || []\n        );\n        super(_config_8);\n        this.config = _config_8;\n        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)\n        );\n        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config)\n        );\n        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {\n            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),\n            identityProviderConfigProvider: this.getIdentityProviderConfigProvider(),\n          })\n        );\n        this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));\n      }\n      destroy() {\n        super.destroy();\n      }\n      getDefaultHttpAuthSchemeParametersProvider() {\n        return httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider;\n      }\n      getIdentityProviderConfigProvider() {\n        return async (config) =>\n          new core_1.DefaultIdentityProviderConfig({\n            \"aws.auth#sigv4\": config.credentials,\n          });\n      }\n    };\n    exports.STSClient = STSClient2;\n  },\n});\n\n// node_modules/@aws-sdk/client-sts/dist-cjs/index.js\nvar require_dist_cjs50 = __commonJS({\n  \"node_modules/@aws-sdk/client-sts/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __reExport = (target, mod, secondTarget) => (\n      __copyProps2(target, mod, \"default\"),\n      secondTarget && __copyProps2(secondTarget, mod, \"default\")\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      AssumeRoleCommand: () => AssumeRoleCommand,\n      AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,\n      AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,\n      AssumeRoleWithSAMLRequestFilterSensitiveLog: () =>\n        AssumeRoleWithSAMLRequestFilterSensitiveLog,\n      AssumeRoleWithSAMLResponseFilterSensitiveLog: () =>\n        AssumeRoleWithSAMLResponseFilterSensitiveLog,\n      AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,\n      AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () =>\n        AssumeRoleWithWebIdentityRequestFilterSensitiveLog,\n      AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () =>\n        AssumeRoleWithWebIdentityResponseFilterSensitiveLog,\n      ClientInputEndpointParameters: () => import_EndpointParameters9.ClientInputEndpointParameters,\n      CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,\n      DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,\n      ExpiredTokenException: () => ExpiredTokenException,\n      GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,\n      GetCallerIdentityCommand: () => GetCallerIdentityCommand,\n      GetFederationTokenCommand: () => GetFederationTokenCommand,\n      GetFederationTokenResponseFilterSensitiveLog: () =>\n        GetFederationTokenResponseFilterSensitiveLog,\n      GetSessionTokenCommand: () => GetSessionTokenCommand,\n      GetSessionTokenResponseFilterSensitiveLog: () => GetSessionTokenResponseFilterSensitiveLog,\n      IDPCommunicationErrorException: () => IDPCommunicationErrorException,\n      IDPRejectedClaimException: () => IDPRejectedClaimException,\n      InvalidAuthorizationMessageException: () => InvalidAuthorizationMessageException,\n      InvalidIdentityTokenException: () => InvalidIdentityTokenException,\n      MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,\n      PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,\n      RegionDisabledException: () => RegionDisabledException,\n      STS: () => STS,\n      STSServiceException: () => STSServiceException,\n      decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,\n      getDefaultRoleAssumer: () => getDefaultRoleAssumer2,\n      getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    __reExport(src_exports, require_STSClient(), module2.exports);\n    var import_middleware_endpoint = require_dist_cjs18();\n    var import_middleware_serde = require_dist_cjs17();\n    var import_EndpointParameters = require_EndpointParameters();\n    var import_smithy_client = require_dist_cjs32();\n    var _STSServiceException = class _STSServiceException2 extends import_smithy_client.ServiceException {\n      constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, _STSServiceException2.prototype);\n      }\n    };\n    __name(_STSServiceException, \"STSServiceException\");\n    var STSServiceException = _STSServiceException;\n    var _ExpiredTokenException = class _ExpiredTokenException2 extends STSServiceException {\n      constructor(opts) {\n        super({\n          name: \"ExpiredTokenException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"ExpiredTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);\n      }\n    };\n    __name(_ExpiredTokenException, \"ExpiredTokenException\");\n    var ExpiredTokenException = _ExpiredTokenException;\n    var _MalformedPolicyDocumentException = class _MalformedPolicyDocumentException2 extends STSServiceException {\n      constructor(opts) {\n        super({\n          name: \"MalformedPolicyDocumentException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"MalformedPolicyDocumentException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _MalformedPolicyDocumentException2.prototype);\n      }\n    };\n    __name(_MalformedPolicyDocumentException, \"MalformedPolicyDocumentException\");\n    var MalformedPolicyDocumentException = _MalformedPolicyDocumentException;\n    var _PackedPolicyTooLargeException = class _PackedPolicyTooLargeException2 extends STSServiceException {\n      constructor(opts) {\n        super({\n          name: \"PackedPolicyTooLargeException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"PackedPolicyTooLargeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _PackedPolicyTooLargeException2.prototype);\n      }\n    };\n    __name(_PackedPolicyTooLargeException, \"PackedPolicyTooLargeException\");\n    var PackedPolicyTooLargeException = _PackedPolicyTooLargeException;\n    var _RegionDisabledException = class _RegionDisabledException2 extends STSServiceException {\n      constructor(opts) {\n        super({\n          name: \"RegionDisabledException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"RegionDisabledException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _RegionDisabledException2.prototype);\n      }\n    };\n    __name(_RegionDisabledException, \"RegionDisabledException\");\n    var RegionDisabledException = _RegionDisabledException;\n    var _IDPRejectedClaimException = class _IDPRejectedClaimException2 extends STSServiceException {\n      constructor(opts) {\n        super({\n          name: \"IDPRejectedClaimException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"IDPRejectedClaimException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _IDPRejectedClaimException2.prototype);\n      }\n    };\n    __name(_IDPRejectedClaimException, \"IDPRejectedClaimException\");\n    var IDPRejectedClaimException = _IDPRejectedClaimException;\n    var _InvalidIdentityTokenException = class _InvalidIdentityTokenException2 extends STSServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidIdentityTokenException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidIdentityTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidIdentityTokenException2.prototype);\n      }\n    };\n    __name(_InvalidIdentityTokenException, \"InvalidIdentityTokenException\");\n    var InvalidIdentityTokenException = _InvalidIdentityTokenException;\n    var _IDPCommunicationErrorException = class _IDPCommunicationErrorException2 extends STSServiceException {\n      constructor(opts) {\n        super({\n          name: \"IDPCommunicationErrorException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"IDPCommunicationErrorException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _IDPCommunicationErrorException2.prototype);\n      }\n    };\n    __name(_IDPCommunicationErrorException, \"IDPCommunicationErrorException\");\n    var IDPCommunicationErrorException = _IDPCommunicationErrorException;\n    var _InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException2 extends STSServiceException {\n      constructor(opts) {\n        super({\n          name: \"InvalidAuthorizationMessageException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"InvalidAuthorizationMessageException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException2.prototype);\n      }\n    };\n    __name(_InvalidAuthorizationMessageException, \"InvalidAuthorizationMessageException\");\n    var InvalidAuthorizationMessageException = _InvalidAuthorizationMessageException;\n    var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.SecretAccessKey && { SecretAccessKey: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"CredentialsFilterSensitiveLog\"\n    );\n    var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n      }),\n      \"AssumeRoleResponseFilterSensitiveLog\"\n    );\n    var AssumeRoleWithSAMLRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.SAMLAssertion && { SAMLAssertion: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"AssumeRoleWithSAMLRequestFilterSensitiveLog\"\n    );\n    var AssumeRoleWithSAMLResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n      }),\n      \"AssumeRoleWithSAMLResponseFilterSensitiveLog\"\n    );\n    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.WebIdentityToken && { WebIdentityToken: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"AssumeRoleWithWebIdentityRequestFilterSensitiveLog\"\n    );\n    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n      }),\n      \"AssumeRoleWithWebIdentityResponseFilterSensitiveLog\"\n    );\n    var GetFederationTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n      }),\n      \"GetFederationTokenResponseFilterSensitiveLog\"\n    );\n    var GetSessionTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),\n      }),\n      \"GetSessionTokenResponseFilterSensitiveLog\"\n    );\n    var import_core = require_dist_cjs37();\n    var import_protocol_http = require_dist_cjs2();\n    var se_AssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const headers = SHARED_HEADERS;\n      let body;\n      body = buildFormUrlencodedString({\n        ...se_AssumeRoleRequest(input, context),\n        [_A]: _AR,\n        [_V]: _,\n      });\n      return buildHttpRpcRequest(context, headers, \"/\", void 0, body);\n    }, \"se_AssumeRoleCommand\");\n    var se_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const headers = SHARED_HEADERS;\n      let body;\n      body = buildFormUrlencodedString({\n        ...se_AssumeRoleWithSAMLRequest(input, context),\n        [_A]: _ARWSAML,\n        [_V]: _,\n      });\n      return buildHttpRpcRequest(context, headers, \"/\", void 0, body);\n    }, \"se_AssumeRoleWithSAMLCommand\");\n    var se_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const headers = SHARED_HEADERS;\n      let body;\n      body = buildFormUrlencodedString({\n        ...se_AssumeRoleWithWebIdentityRequest(input, context),\n        [_A]: _ARWWI,\n        [_V]: _,\n      });\n      return buildHttpRpcRequest(context, headers, \"/\", void 0, body);\n    }, \"se_AssumeRoleWithWebIdentityCommand\");\n    var se_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const headers = SHARED_HEADERS;\n      let body;\n      body = buildFormUrlencodedString({\n        ...se_DecodeAuthorizationMessageRequest(input, context),\n        [_A]: _DAM,\n        [_V]: _,\n      });\n      return buildHttpRpcRequest(context, headers, \"/\", void 0, body);\n    }, \"se_DecodeAuthorizationMessageCommand\");\n    var se_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const headers = SHARED_HEADERS;\n      let body;\n      body = buildFormUrlencodedString({\n        ...se_GetAccessKeyInfoRequest(input, context),\n        [_A]: _GAKI,\n        [_V]: _,\n      });\n      return buildHttpRpcRequest(context, headers, \"/\", void 0, body);\n    }, \"se_GetAccessKeyInfoCommand\");\n    var se_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const headers = SHARED_HEADERS;\n      let body;\n      body = buildFormUrlencodedString({\n        ...se_GetCallerIdentityRequest(input, context),\n        [_A]: _GCI,\n        [_V]: _,\n      });\n      return buildHttpRpcRequest(context, headers, \"/\", void 0, body);\n    }, \"se_GetCallerIdentityCommand\");\n    var se_GetFederationTokenCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const headers = SHARED_HEADERS;\n      let body;\n      body = buildFormUrlencodedString({\n        ...se_GetFederationTokenRequest(input, context),\n        [_A]: _GFT,\n        [_V]: _,\n      });\n      return buildHttpRpcRequest(context, headers, \"/\", void 0, body);\n    }, \"se_GetFederationTokenCommand\");\n    var se_GetSessionTokenCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const headers = SHARED_HEADERS;\n      let body;\n      body = buildFormUrlencodedString({\n        ...se_GetSessionTokenRequest(input, context),\n        [_A]: _GST,\n        [_V]: _,\n      });\n      return buildHttpRpcRequest(context, headers, \"/\", void 0, body);\n    }, \"se_GetSessionTokenCommand\");\n    var de_AssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const data = await (0, import_core.parseXmlBody)(output.body, context);\n      let contents = {};\n      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);\n      const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n      };\n      return response;\n    }, \"de_AssumeRoleCommand\");\n    var de_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const data = await (0, import_core.parseXmlBody)(output.body, context);\n      let contents = {};\n      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n      const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n      };\n      return response;\n    }, \"de_AssumeRoleWithSAMLCommand\");\n    var de_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const data = await (0, import_core.parseXmlBody)(output.body, context);\n      let contents = {};\n      contents = de_AssumeRoleWithWebIdentityResponse(\n        data.AssumeRoleWithWebIdentityResult,\n        context\n      );\n      const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n      };\n      return response;\n    }, \"de_AssumeRoleWithWebIdentityCommand\");\n    var de_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const data = await (0, import_core.parseXmlBody)(output.body, context);\n      let contents = {};\n      contents = de_DecodeAuthorizationMessageResponse(\n        data.DecodeAuthorizationMessageResult,\n        context\n      );\n      const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n      };\n      return response;\n    }, \"de_DecodeAuthorizationMessageCommand\");\n    var de_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const data = await (0, import_core.parseXmlBody)(output.body, context);\n      let contents = {};\n      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n      const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n      };\n      return response;\n    }, \"de_GetAccessKeyInfoCommand\");\n    var de_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const data = await (0, import_core.parseXmlBody)(output.body, context);\n      let contents = {};\n      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n      const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n      };\n      return response;\n    }, \"de_GetCallerIdentityCommand\");\n    var de_GetFederationTokenCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const data = await (0, import_core.parseXmlBody)(output.body, context);\n      let contents = {};\n      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);\n      const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n      };\n      return response;\n    }, \"de_GetFederationTokenCommand\");\n    var de_GetSessionTokenCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const data = await (0, import_core.parseXmlBody)(output.body, context);\n      let contents = {};\n      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);\n      const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n      };\n      return response;\n    }, \"de_GetSessionTokenCommand\");\n    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {\n      const parsedOutput = {\n        ...output,\n        body: await (0, import_core.parseXmlErrorBody)(output.body, context),\n      };\n      const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n      switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n          throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);\n        case \"IDPCommunicationError\":\n        case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);\n        case \"InvalidAuthorizationMessageException\":\n        case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);\n        default: {\n          const parsedBody = parsedOutput.body;\n          return throwDefaultError({\n            output,\n            parsedBody: parsedBody.Error,\n            errorCode,\n          });\n        }\n      }\n    }, \"de_CommandError\");\n    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const body = parsedOutput.body;\n      const deserialized = de_ExpiredTokenException(body.Error, context);\n      const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, body);\n    }, \"de_ExpiredTokenExceptionRes\");\n    var de_IDPCommunicationErrorExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const body = parsedOutput.body;\n        const deserialized = de_IDPCommunicationErrorException(body.Error, context);\n        const exception = new IDPCommunicationErrorException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...deserialized,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, body);\n      },\n      \"de_IDPCommunicationErrorExceptionRes\"\n    );\n    var de_IDPRejectedClaimExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const body = parsedOutput.body;\n      const deserialized = de_IDPRejectedClaimException(body.Error, context);\n      const exception = new IDPRejectedClaimException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, body);\n    }, \"de_IDPRejectedClaimExceptionRes\");\n    var de_InvalidAuthorizationMessageExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const body = parsedOutput.body;\n        const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);\n        const exception = new InvalidAuthorizationMessageException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...deserialized,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, body);\n      },\n      \"de_InvalidAuthorizationMessageExceptionRes\"\n    );\n    var de_InvalidIdentityTokenExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const body = parsedOutput.body;\n        const deserialized = de_InvalidIdentityTokenException(body.Error, context);\n        const exception = new InvalidIdentityTokenException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...deserialized,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, body);\n      },\n      \"de_InvalidIdentityTokenExceptionRes\"\n    );\n    var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const body = parsedOutput.body;\n        const deserialized = de_MalformedPolicyDocumentException(body.Error, context);\n        const exception = new MalformedPolicyDocumentException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...deserialized,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, body);\n      },\n      \"de_MalformedPolicyDocumentExceptionRes\"\n    );\n    var de_PackedPolicyTooLargeExceptionRes = /* @__PURE__ */ __name(\n      async (parsedOutput, context) => {\n        const body = parsedOutput.body;\n        const deserialized = de_PackedPolicyTooLargeException(body.Error, context);\n        const exception = new PackedPolicyTooLargeException({\n          $metadata: deserializeMetadata(parsedOutput),\n          ...deserialized,\n        });\n        return (0, import_smithy_client.decorateServiceException)(exception, body);\n      },\n      \"de_PackedPolicyTooLargeExceptionRes\"\n    );\n    var de_RegionDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const body = parsedOutput.body;\n      const deserialized = de_RegionDisabledException(body.Error, context);\n      const exception = new RegionDisabledException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, body);\n    }, \"de_RegionDisabledExceptionRes\");\n    var se_AssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {\n      var _a2, _b, _c, _d;\n      const entries = {};\n      if (input[_RA] != null) {\n        entries[_RA] = input[_RA];\n      }\n      if (input[_RSN] != null) {\n        entries[_RSN] = input[_RSN];\n      }\n      if (input[_PA] != null) {\n        const memberEntries = se_policyDescriptorListType(input[_PA], context);\n        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {\n          entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          const loc = `PolicyArns.${key}`;\n          entries[loc] = value;\n        });\n      }\n      if (input[_P] != null) {\n        entries[_P] = input[_P];\n      }\n      if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n      }\n      if (input[_T] != null) {\n        const memberEntries = se_tagListType(input[_T], context);\n        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {\n          entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          const loc = `Tags.${key}`;\n          entries[loc] = value;\n        });\n      }\n      if (input[_TTK] != null) {\n        const memberEntries = se_tagKeyListType(input[_TTK], context);\n        if (((_c = input[_TTK]) == null ? void 0 : _c.length) === 0) {\n          entries.TransitiveTagKeys = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          const loc = `TransitiveTagKeys.${key}`;\n          entries[loc] = value;\n        });\n      }\n      if (input[_EI] != null) {\n        entries[_EI] = input[_EI];\n      }\n      if (input[_SN] != null) {\n        entries[_SN] = input[_SN];\n      }\n      if (input[_TC] != null) {\n        entries[_TC] = input[_TC];\n      }\n      if (input[_SI] != null) {\n        entries[_SI] = input[_SI];\n      }\n      if (input[_PC] != null) {\n        const memberEntries = se_ProvidedContextsListType(input[_PC], context);\n        if (((_d = input[_PC]) == null ? void 0 : _d.length) === 0) {\n          entries.ProvidedContexts = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          const loc = `ProvidedContexts.${key}`;\n          entries[loc] = value;\n        });\n      }\n      return entries;\n    }, \"se_AssumeRoleRequest\");\n    var se_AssumeRoleWithSAMLRequest = /* @__PURE__ */ __name((input, context) => {\n      var _a2;\n      const entries = {};\n      if (input[_RA] != null) {\n        entries[_RA] = input[_RA];\n      }\n      if (input[_PAr] != null) {\n        entries[_PAr] = input[_PAr];\n      }\n      if (input[_SAMLA] != null) {\n        entries[_SAMLA] = input[_SAMLA];\n      }\n      if (input[_PA] != null) {\n        const memberEntries = se_policyDescriptorListType(input[_PA], context);\n        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {\n          entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          const loc = `PolicyArns.${key}`;\n          entries[loc] = value;\n        });\n      }\n      if (input[_P] != null) {\n        entries[_P] = input[_P];\n      }\n      if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n      }\n      return entries;\n    }, \"se_AssumeRoleWithSAMLRequest\");\n    var se_AssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {\n      var _a2;\n      const entries = {};\n      if (input[_RA] != null) {\n        entries[_RA] = input[_RA];\n      }\n      if (input[_RSN] != null) {\n        entries[_RSN] = input[_RSN];\n      }\n      if (input[_WIT] != null) {\n        entries[_WIT] = input[_WIT];\n      }\n      if (input[_PI] != null) {\n        entries[_PI] = input[_PI];\n      }\n      if (input[_PA] != null) {\n        const memberEntries = se_policyDescriptorListType(input[_PA], context);\n        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {\n          entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          const loc = `PolicyArns.${key}`;\n          entries[loc] = value;\n        });\n      }\n      if (input[_P] != null) {\n        entries[_P] = input[_P];\n      }\n      if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n      }\n      return entries;\n    }, \"se_AssumeRoleWithWebIdentityRequest\");\n    var se_DecodeAuthorizationMessageRequest = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      if (input[_EM] != null) {\n        entries[_EM] = input[_EM];\n      }\n      return entries;\n    }, \"se_DecodeAuthorizationMessageRequest\");\n    var se_GetAccessKeyInfoRequest = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      if (input[_AKI] != null) {\n        entries[_AKI] = input[_AKI];\n      }\n      return entries;\n    }, \"se_GetAccessKeyInfoRequest\");\n    var se_GetCallerIdentityRequest = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      return entries;\n    }, \"se_GetCallerIdentityRequest\");\n    var se_GetFederationTokenRequest = /* @__PURE__ */ __name((input, context) => {\n      var _a2, _b;\n      const entries = {};\n      if (input[_N] != null) {\n        entries[_N] = input[_N];\n      }\n      if (input[_P] != null) {\n        entries[_P] = input[_P];\n      }\n      if (input[_PA] != null) {\n        const memberEntries = se_policyDescriptorListType(input[_PA], context);\n        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {\n          entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          const loc = `PolicyArns.${key}`;\n          entries[loc] = value;\n        });\n      }\n      if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n      }\n      if (input[_T] != null) {\n        const memberEntries = se_tagListType(input[_T], context);\n        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {\n          entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          const loc = `Tags.${key}`;\n          entries[loc] = value;\n        });\n      }\n      return entries;\n    }, \"se_GetFederationTokenRequest\");\n    var se_GetSessionTokenRequest = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      if (input[_DS] != null) {\n        entries[_DS] = input[_DS];\n      }\n      if (input[_SN] != null) {\n        entries[_SN] = input[_SN];\n      }\n      if (input[_TC] != null) {\n        entries[_TC] = input[_TC];\n      }\n      return entries;\n    }, \"se_GetSessionTokenRequest\");\n    var se_policyDescriptorListType = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      let counter = 1;\n      for (const entry of input) {\n        if (entry === null) {\n          continue;\n        }\n        const memberEntries = se_PolicyDescriptorType(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n      }\n      return entries;\n    }, \"se_policyDescriptorListType\");\n    var se_PolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      if (input[_a] != null) {\n        entries[_a] = input[_a];\n      }\n      return entries;\n    }, \"se_PolicyDescriptorType\");\n    var se_ProvidedContext = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      if (input[_PAro] != null) {\n        entries[_PAro] = input[_PAro];\n      }\n      if (input[_CA] != null) {\n        entries[_CA] = input[_CA];\n      }\n      return entries;\n    }, \"se_ProvidedContext\");\n    var se_ProvidedContextsListType = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      let counter = 1;\n      for (const entry of input) {\n        if (entry === null) {\n          continue;\n        }\n        const memberEntries = se_ProvidedContext(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n      }\n      return entries;\n    }, \"se_ProvidedContextsListType\");\n    var se_Tag = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      if (input[_K] != null) {\n        entries[_K] = input[_K];\n      }\n      if (input[_Va] != null) {\n        entries[_Va] = input[_Va];\n      }\n      return entries;\n    }, \"se_Tag\");\n    var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      let counter = 1;\n      for (const entry of input) {\n        if (entry === null) {\n          continue;\n        }\n        entries[`member.${counter}`] = entry;\n        counter++;\n      }\n      return entries;\n    }, \"se_tagKeyListType\");\n    var se_tagListType = /* @__PURE__ */ __name((input, context) => {\n      const entries = {};\n      let counter = 1;\n      for (const entry of input) {\n        if (entry === null) {\n          continue;\n        }\n        const memberEntries = se_Tag(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n          entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n      }\n      return entries;\n    }, \"se_tagListType\");\n    var de_AssumedRoleUser = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_ARI] != null) {\n        contents[_ARI] = (0, import_smithy_client.expectString)(output[_ARI]);\n      }\n      if (output[_Ar] != null) {\n        contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);\n      }\n      return contents;\n    }, \"de_AssumedRoleUser\");\n    var de_AssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n      }\n      if (output[_ARU] != null) {\n        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);\n      }\n      if (output[_PPS] != null) {\n        contents[_PPS] = (0, import_smithy_client.strictParseInt32)(output[_PPS]);\n      }\n      if (output[_SI] != null) {\n        contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);\n      }\n      return contents;\n    }, \"de_AssumeRoleResponse\");\n    var de_AssumeRoleWithSAMLResponse = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n      }\n      if (output[_ARU] != null) {\n        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);\n      }\n      if (output[_PPS] != null) {\n        contents[_PPS] = (0, import_smithy_client.strictParseInt32)(output[_PPS]);\n      }\n      if (output[_S] != null) {\n        contents[_S] = (0, import_smithy_client.expectString)(output[_S]);\n      }\n      if (output[_ST] != null) {\n        contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);\n      }\n      if (output[_I] != null) {\n        contents[_I] = (0, import_smithy_client.expectString)(output[_I]);\n      }\n      if (output[_Au] != null) {\n        contents[_Au] = (0, import_smithy_client.expectString)(output[_Au]);\n      }\n      if (output[_NQ] != null) {\n        contents[_NQ] = (0, import_smithy_client.expectString)(output[_NQ]);\n      }\n      if (output[_SI] != null) {\n        contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);\n      }\n      return contents;\n    }, \"de_AssumeRoleWithSAMLResponse\");\n    var de_AssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n      }\n      if (output[_SFWIT] != null) {\n        contents[_SFWIT] = (0, import_smithy_client.expectString)(output[_SFWIT]);\n      }\n      if (output[_ARU] != null) {\n        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);\n      }\n      if (output[_PPS] != null) {\n        contents[_PPS] = (0, import_smithy_client.strictParseInt32)(output[_PPS]);\n      }\n      if (output[_Pr] != null) {\n        contents[_Pr] = (0, import_smithy_client.expectString)(output[_Pr]);\n      }\n      if (output[_Au] != null) {\n        contents[_Au] = (0, import_smithy_client.expectString)(output[_Au]);\n      }\n      if (output[_SI] != null) {\n        contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);\n      }\n      return contents;\n    }, \"de_AssumeRoleWithWebIdentityResponse\");\n    var de_Credentials = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_AKI] != null) {\n        contents[_AKI] = (0, import_smithy_client.expectString)(output[_AKI]);\n      }\n      if (output[_SAK] != null) {\n        contents[_SAK] = (0, import_smithy_client.expectString)(output[_SAK]);\n      }\n      if (output[_STe] != null) {\n        contents[_STe] = (0, import_smithy_client.expectString)(output[_STe]);\n      }\n      if (output[_E] != null) {\n        contents[_E] = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_E])\n        );\n      }\n      return contents;\n    }, \"de_Credentials\");\n    var de_DecodeAuthorizationMessageResponse = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_DM] != null) {\n        contents[_DM] = (0, import_smithy_client.expectString)(output[_DM]);\n      }\n      return contents;\n    }, \"de_DecodeAuthorizationMessageResponse\");\n    var de_ExpiredTokenException = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_m] != null) {\n        contents[_m] = (0, import_smithy_client.expectString)(output[_m]);\n      }\n      return contents;\n    }, \"de_ExpiredTokenException\");\n    var de_FederatedUser = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_FUI] != null) {\n        contents[_FUI] = (0, import_smithy_client.expectString)(output[_FUI]);\n      }\n      if (output[_Ar] != null) {\n        contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);\n      }\n      return contents;\n    }, \"de_FederatedUser\");\n    var de_GetAccessKeyInfoResponse = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_Ac] != null) {\n        contents[_Ac] = (0, import_smithy_client.expectString)(output[_Ac]);\n      }\n      return contents;\n    }, \"de_GetAccessKeyInfoResponse\");\n    var de_GetCallerIdentityResponse = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_UI] != null) {\n        contents[_UI] = (0, import_smithy_client.expectString)(output[_UI]);\n      }\n      if (output[_Ac] != null) {\n        contents[_Ac] = (0, import_smithy_client.expectString)(output[_Ac]);\n      }\n      if (output[_Ar] != null) {\n        contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);\n      }\n      return contents;\n    }, \"de_GetCallerIdentityResponse\");\n    var de_GetFederationTokenResponse = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n      }\n      if (output[_FU] != null) {\n        contents[_FU] = de_FederatedUser(output[_FU], context);\n      }\n      if (output[_PPS] != null) {\n        contents[_PPS] = (0, import_smithy_client.strictParseInt32)(output[_PPS]);\n      }\n      return contents;\n    }, \"de_GetFederationTokenResponse\");\n    var de_GetSessionTokenResponse = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_C] != null) {\n        contents[_C] = de_Credentials(output[_C], context);\n      }\n      return contents;\n    }, \"de_GetSessionTokenResponse\");\n    var de_IDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_m] != null) {\n        contents[_m] = (0, import_smithy_client.expectString)(output[_m]);\n      }\n      return contents;\n    }, \"de_IDPCommunicationErrorException\");\n    var de_IDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_m] != null) {\n        contents[_m] = (0, import_smithy_client.expectString)(output[_m]);\n      }\n      return contents;\n    }, \"de_IDPRejectedClaimException\");\n    var de_InvalidAuthorizationMessageException = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_m] != null) {\n        contents[_m] = (0, import_smithy_client.expectString)(output[_m]);\n      }\n      return contents;\n    }, \"de_InvalidAuthorizationMessageException\");\n    var de_InvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_m] != null) {\n        contents[_m] = (0, import_smithy_client.expectString)(output[_m]);\n      }\n      return contents;\n    }, \"de_InvalidIdentityTokenException\");\n    var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_m] != null) {\n        contents[_m] = (0, import_smithy_client.expectString)(output[_m]);\n      }\n      return contents;\n    }, \"de_MalformedPolicyDocumentException\");\n    var de_PackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_m] != null) {\n        contents[_m] = (0, import_smithy_client.expectString)(output[_m]);\n      }\n      return contents;\n    }, \"de_PackedPolicyTooLargeException\");\n    var de_RegionDisabledException = /* @__PURE__ */ __name((output, context) => {\n      const contents = {};\n      if (output[_m] != null) {\n        contents[_m] = (0, import_smithy_client.expectString)(output[_m]);\n      }\n      return contents;\n    }, \"de_RegionDisabledException\");\n    var deserializeMetadata = /* @__PURE__ */ __name(\n      (output) => ({\n        httpStatusCode: output.statusCode,\n        requestId:\n          output.headers[\"x-amzn-requestid\"] ??\n          output.headers[\"x-amzn-request-id\"] ??\n          output.headers[\"x-amz-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n      }),\n      \"deserializeMetadata\"\n    );\n    var throwDefaultError = (0, import_smithy_client.withBaseException)(STSServiceException);\n    var buildHttpRpcRequest = /* @__PURE__ */ __name(\n      async (context, headers, path, resolvedHostname, body) => {\n        const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n        const contents = {\n          protocol,\n          hostname,\n          port,\n          method: \"POST\",\n          path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n          headers,\n        };\n        if (resolvedHostname !== void 0) {\n          contents.hostname = resolvedHostname;\n        }\n        if (body !== void 0) {\n          contents.body = body;\n        }\n        return new import_protocol_http.HttpRequest(contents);\n      },\n      \"buildHttpRpcRequest\"\n    );\n    var SHARED_HEADERS = {\n      \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    var _ = \"2011-06-15\";\n    var _A = \"Action\";\n    var _AKI = \"AccessKeyId\";\n    var _AR = \"AssumeRole\";\n    var _ARI = \"AssumedRoleId\";\n    var _ARU = \"AssumedRoleUser\";\n    var _ARWSAML = \"AssumeRoleWithSAML\";\n    var _ARWWI = \"AssumeRoleWithWebIdentity\";\n    var _Ac = \"Account\";\n    var _Ar = \"Arn\";\n    var _Au = \"Audience\";\n    var _C = \"Credentials\";\n    var _CA = \"ContextAssertion\";\n    var _DAM = \"DecodeAuthorizationMessage\";\n    var _DM = \"DecodedMessage\";\n    var _DS = \"DurationSeconds\";\n    var _E = \"Expiration\";\n    var _EI = \"ExternalId\";\n    var _EM = \"EncodedMessage\";\n    var _FU = \"FederatedUser\";\n    var _FUI = \"FederatedUserId\";\n    var _GAKI = \"GetAccessKeyInfo\";\n    var _GCI = \"GetCallerIdentity\";\n    var _GFT = \"GetFederationToken\";\n    var _GST = \"GetSessionToken\";\n    var _I = \"Issuer\";\n    var _K = \"Key\";\n    var _N = \"Name\";\n    var _NQ = \"NameQualifier\";\n    var _P = \"Policy\";\n    var _PA = \"PolicyArns\";\n    var _PAr = \"PrincipalArn\";\n    var _PAro = \"ProviderArn\";\n    var _PC = \"ProvidedContexts\";\n    var _PI = \"ProviderId\";\n    var _PPS = \"PackedPolicySize\";\n    var _Pr = \"Provider\";\n    var _RA = \"RoleArn\";\n    var _RSN = \"RoleSessionName\";\n    var _S = \"Subject\";\n    var _SAK = \"SecretAccessKey\";\n    var _SAMLA = \"SAMLAssertion\";\n    var _SFWIT = \"SubjectFromWebIdentityToken\";\n    var _SI = \"SourceIdentity\";\n    var _SN = \"SerialNumber\";\n    var _ST = \"SubjectType\";\n    var _STe = \"SessionToken\";\n    var _T = \"Tags\";\n    var _TC = \"TokenCode\";\n    var _TTK = \"TransitiveTagKeys\";\n    var _UI = \"UserId\";\n    var _V = \"Version\";\n    var _Va = \"Value\";\n    var _WIT = \"WebIdentityToken\";\n    var _a = \"arn\";\n    var _m = \"message\";\n    var buildFormUrlencodedString = /* @__PURE__ */ __name(\n      (formEntries) =>\n        Object.entries(formEntries)\n          .map(\n            ([key, value]) =>\n              (0, import_smithy_client.extendedEncodeURIComponent)(key) +\n              \"=\" +\n              (0, import_smithy_client.extendedEncodeURIComponent)(value)\n          )\n          .join(\"&\"),\n      \"buildFormUrlencodedString\"\n    );\n    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {\n      var _a2;\n      if (((_a2 = data.Error) == null ? void 0 : _a2.Code) !== void 0) {\n        return data.Error.Code;\n      }\n      if (output.statusCode == 404) {\n        return \"NotFound\";\n      }\n    }, \"loadQueryErrorCode\");\n    var _AssumeRoleCommand = class _AssumeRoleCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...import_EndpointParameters.commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRole\", {})\n      .n(\"STSClient\", \"AssumeRoleCommand\")\n      .f(void 0, AssumeRoleResponseFilterSensitiveLog)\n      .ser(se_AssumeRoleCommand)\n      .de(de_AssumeRoleCommand)\n      .build() {};\n    __name(_AssumeRoleCommand, \"AssumeRoleCommand\");\n    var AssumeRoleCommand = _AssumeRoleCommand;\n    var import_EndpointParameters2 = require_EndpointParameters();\n    var _AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...import_EndpointParameters2.commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRoleWithSAML\", {})\n      .n(\"STSClient\", \"AssumeRoleWithSAMLCommand\")\n      .f(AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog)\n      .ser(se_AssumeRoleWithSAMLCommand)\n      .de(de_AssumeRoleWithSAMLCommand)\n      .build() {};\n    __name(_AssumeRoleWithSAMLCommand, \"AssumeRoleWithSAMLCommand\");\n    var AssumeRoleWithSAMLCommand = _AssumeRoleWithSAMLCommand;\n    var import_EndpointParameters3 = require_EndpointParameters();\n    var _AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...import_EndpointParameters3.commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRoleWithWebIdentity\", {})\n      .n(\"STSClient\", \"AssumeRoleWithWebIdentityCommand\")\n      .f(\n        AssumeRoleWithWebIdentityRequestFilterSensitiveLog,\n        AssumeRoleWithWebIdentityResponseFilterSensitiveLog\n      )\n      .ser(se_AssumeRoleWithWebIdentityCommand)\n      .de(de_AssumeRoleWithWebIdentityCommand)\n      .build() {};\n    __name(_AssumeRoleWithWebIdentityCommand, \"AssumeRoleWithWebIdentityCommand\");\n    var AssumeRoleWithWebIdentityCommand = _AssumeRoleWithWebIdentityCommand;\n    var import_EndpointParameters4 = require_EndpointParameters();\n    var _DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...import_EndpointParameters4.commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSecurityTokenServiceV20110615\", \"DecodeAuthorizationMessage\", {})\n      .n(\"STSClient\", \"DecodeAuthorizationMessageCommand\")\n      .f(void 0, void 0)\n      .ser(se_DecodeAuthorizationMessageCommand)\n      .de(de_DecodeAuthorizationMessageCommand)\n      .build() {};\n    __name(_DecodeAuthorizationMessageCommand, \"DecodeAuthorizationMessageCommand\");\n    var DecodeAuthorizationMessageCommand = _DecodeAuthorizationMessageCommand;\n    var import_EndpointParameters5 = require_EndpointParameters();\n    var _GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...import_EndpointParameters5.commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSecurityTokenServiceV20110615\", \"GetAccessKeyInfo\", {})\n      .n(\"STSClient\", \"GetAccessKeyInfoCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetAccessKeyInfoCommand)\n      .de(de_GetAccessKeyInfoCommand)\n      .build() {};\n    __name(_GetAccessKeyInfoCommand, \"GetAccessKeyInfoCommand\");\n    var GetAccessKeyInfoCommand = _GetAccessKeyInfoCommand;\n    var import_EndpointParameters6 = require_EndpointParameters();\n    var _GetCallerIdentityCommand = class _GetCallerIdentityCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...import_EndpointParameters6.commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSecurityTokenServiceV20110615\", \"GetCallerIdentity\", {})\n      .n(\"STSClient\", \"GetCallerIdentityCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetCallerIdentityCommand)\n      .de(de_GetCallerIdentityCommand)\n      .build() {};\n    __name(_GetCallerIdentityCommand, \"GetCallerIdentityCommand\");\n    var GetCallerIdentityCommand = _GetCallerIdentityCommand;\n    var import_EndpointParameters7 = require_EndpointParameters();\n    var _GetFederationTokenCommand = class _GetFederationTokenCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...import_EndpointParameters7.commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSecurityTokenServiceV20110615\", \"GetFederationToken\", {})\n      .n(\"STSClient\", \"GetFederationTokenCommand\")\n      .f(void 0, GetFederationTokenResponseFilterSensitiveLog)\n      .ser(se_GetFederationTokenCommand)\n      .de(de_GetFederationTokenCommand)\n      .build() {};\n    __name(_GetFederationTokenCommand, \"GetFederationTokenCommand\");\n    var GetFederationTokenCommand = _GetFederationTokenCommand;\n    var import_EndpointParameters8 = require_EndpointParameters();\n    var _GetSessionTokenCommand = class _GetSessionTokenCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...import_EndpointParameters8.commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"AWSSecurityTokenServiceV20110615\", \"GetSessionToken\", {})\n      .n(\"STSClient\", \"GetSessionTokenCommand\")\n      .f(void 0, GetSessionTokenResponseFilterSensitiveLog)\n      .ser(se_GetSessionTokenCommand)\n      .de(de_GetSessionTokenCommand)\n      .build() {};\n    __name(_GetSessionTokenCommand, \"GetSessionTokenCommand\");\n    var GetSessionTokenCommand = _GetSessionTokenCommand;\n    var import_STSClient = require_STSClient();\n    var commands = {\n      AssumeRoleCommand,\n      AssumeRoleWithSAMLCommand,\n      AssumeRoleWithWebIdentityCommand,\n      DecodeAuthorizationMessageCommand,\n      GetAccessKeyInfoCommand,\n      GetCallerIdentityCommand,\n      GetFederationTokenCommand,\n      GetSessionTokenCommand,\n    };\n    var _STS = class _STS extends import_STSClient.STSClient {};\n    __name(_STS, \"STS\");\n    var STS = _STS;\n    (0, import_smithy_client.createAggregatedClient)(commands, STS);\n    var import_EndpointParameters9 = require_EndpointParameters();\n    var ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\n    var resolveRegion = /* @__PURE__ */ __name(\n      async (_region, _parentRegion, credentialProviderLogger) => {\n        var _a2;\n        const region = typeof _region === \"function\" ? await _region() : _region;\n        const parentRegion =\n          typeof _parentRegion === \"function\" ? await _parentRegion() : _parentRegion;\n        (_a2 = credentialProviderLogger == null ? void 0 : credentialProviderLogger.debug) == null\n          ? void 0\n          : _a2.call(\n              credentialProviderLogger,\n              \"@aws-sdk/client-sts::resolveRegion\",\n              \"accepting first of:\",\n              `${region} (provider)`,\n              `${parentRegion} (parent client)`,\n              `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`\n            );\n        return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;\n      },\n      \"resolveRegion\"\n    );\n    var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {\n      let stsClient;\n      let closureSourceCreds;\n      return async (sourceCreds, params) => {\n        var _a2, _b, _c;\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n          const {\n            logger = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null\n              ? void 0\n              : _a2.logger,\n            region,\n            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) ==\n            null\n              ? void 0\n              : _b.requestHandler,\n            credentialProviderLogger,\n          } = stsOptions;\n          const resolvedRegion = await resolveRegion(\n            region,\n            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null\n              ? void 0\n              : _c.region,\n            credentialProviderLogger\n          );\n          stsClient = new stsClientCtor({\n            credentialDefaultProvider: () => async () => closureSourceCreds,\n            region: resolvedRegion,\n            requestHandler,\n            logger,\n          });\n        }\n        const { Credentials: Credentials2 } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {\n          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n          accessKeyId: Credentials2.AccessKeyId,\n          secretAccessKey: Credentials2.SecretAccessKey,\n          sessionToken: Credentials2.SessionToken,\n          expiration: Credentials2.Expiration,\n          credentialScope: Credentials2.CredentialScope,\n        };\n      };\n    }, \"getDefaultRoleAssumer\");\n    var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name(\n      (stsOptions, stsClientCtor) => {\n        let stsClient;\n        return async (params) => {\n          var _a2, _b, _c;\n          if (!stsClient) {\n            const {\n              logger = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null\n                ? void 0\n                : _a2.logger,\n              region,\n              requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) ==\n              null\n                ? void 0\n                : _b.requestHandler,\n              credentialProviderLogger,\n            } = stsOptions;\n            const resolvedRegion = await resolveRegion(\n              region,\n              (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null\n                ? void 0\n                : _c.region,\n              credentialProviderLogger\n            );\n            stsClient = new stsClientCtor({\n              region: resolvedRegion,\n              requestHandler,\n              logger,\n            });\n          }\n          const { Credentials: Credentials2 } = await stsClient.send(\n            new AssumeRoleWithWebIdentityCommand(params)\n          );\n          if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {\n            throw new Error(\n              `Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`\n            );\n          }\n          return {\n            accessKeyId: Credentials2.AccessKeyId,\n            secretAccessKey: Credentials2.SecretAccessKey,\n            sessionToken: Credentials2.SessionToken,\n            expiration: Credentials2.Expiration,\n            credentialScope: Credentials2.CredentialScope,\n          };\n        };\n      },\n      \"getDefaultRoleAssumerWithWebIdentity\"\n    );\n    var import_STSClient2 = require_STSClient();\n    var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {\n      var _a2;\n      if (!customizations) return baseCtor;\n      else\n        return (\n          (_a2 = class extends baseCtor {\n            constructor(config) {\n              super(config);\n              for (const customization of customizations) {\n                this.middlewareStack.use(customization);\n              }\n            }\n          }),\n          __name(_a2, \"CustomizableSTSClient\"),\n          _a2\n        );\n    }, \"getCustomizableStsClientCtor\");\n    var getDefaultRoleAssumer2 = /* @__PURE__ */ __name(\n      (stsOptions = {}, stsPlugins) =>\n        getDefaultRoleAssumer(\n          stsOptions,\n          getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)\n        ),\n      \"getDefaultRoleAssumer\"\n    );\n    var getDefaultRoleAssumerWithWebIdentity2 = /* @__PURE__ */ __name(\n      (stsOptions = {}, stsPlugins) =>\n        getDefaultRoleAssumerWithWebIdentity(\n          stsOptions,\n          getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)\n        ),\n      \"getDefaultRoleAssumerWithWebIdentity\"\n    );\n    var decorateDefaultCredentialProvider = /* @__PURE__ */ __name(\n      (provider) => (input) =>\n        provider({\n          roleAssumer: getDefaultRoleAssumer2(input),\n          roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),\n          ...input,\n        }),\n      \"decorateDefaultCredentialProvider\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js\nvar require_dist_cjs51 = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      fromProcess: () => fromProcess,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_shared_ini_file_loader = require_dist_cjs13();\n    var import_property_provider = require_dist_cjs12();\n    var import_child_process = require(\"child_process\");\n    var import_util = require(\"util\");\n    var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName, data) => {\n      if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n      }\n      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n      }\n      if (data.Expiration) {\n        const currentTime = /* @__PURE__ */ new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n      }\n      return {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n      };\n    }, \"getValidatedProcessCredentials\");\n    var resolveProcessCredentials = /* @__PURE__ */ __name(\n      async (profileName, profiles, logger) => {\n        const profile = profiles[profileName];\n        if (profiles[profileName]) {\n          const credentialProcess = profile[\"credential_process\"];\n          if (credentialProcess !== void 0) {\n            const execPromise = (0, import_util.promisify)(import_child_process.exec);\n            try {\n              const { stdout } = await execPromise(credentialProcess);\n              let data;\n              try {\n                data = JSON.parse(stdout.trim());\n              } catch {\n                throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n              }\n              return getValidatedProcessCredentials(profileName, data);\n            } catch (error) {\n              throw new import_property_provider.CredentialsProviderError(error.message, {\n                logger,\n              });\n            }\n          } else {\n            throw new import_property_provider.CredentialsProviderError(\n              `Profile ${profileName} did not contain credential_process.`,\n              { logger }\n            );\n          }\n        } else {\n          throw new import_property_provider.CredentialsProviderError(\n            `Profile ${profileName} could not be found in shared credentials file.`,\n            {\n              logger,\n            }\n          );\n        }\n      },\n      \"resolveProcessCredentials\"\n    );\n    var fromProcess = /* @__PURE__ */ __name(\n      (init = {}) =>\n        async () => {\n          var _a;\n          (_a = init.logger) == null\n            ? void 0\n            : _a.debug(\"@aws-sdk/credential-provider-process - fromProcess\");\n          const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);\n          return resolveProcessCredentials(\n            (0, import_shared_ini_file_loader.getProfileName)(init),\n            profiles,\n            init.logger\n          );\n        },\n      \"fromProcess\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js\nvar require_fromWebToken = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js\"(exports) {\n    var __createBinding =\n      (exports && exports.__createBinding) ||\n      (Object.create\n        ? ((o, m, k, k2) => {\n            if (k2 === void 0) k2 = k;\n            var desc = Object.getOwnPropertyDescriptor(m, k);\n            if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n              desc = {\n                enumerable: true,\n                get: () => m[k],\n              };\n            }\n            Object.defineProperty(o, k2, desc);\n          })\n        : ((o, m, k, k2) => {\n            if (k2 === void 0) k2 = k;\n            o[k2] = m[k];\n          }));\n    var __setModuleDefault =\n      (exports && exports.__setModuleDefault) ||\n      (Object.create\n        ? ((o, v) => {\n            Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n          })\n        : ((o, v) => {\n            o[\"default\"] = v;\n          }));\n    var __importStar =\n      (exports && exports.__importStar) ||\n      ((mod) => {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) {\n          for (var k in mod)\n            if (k !== \"default\" && Object.hasOwn(mod, k))\n              __createBinding(result, mod, k);\n        }\n        __setModuleDefault(result, mod);\n        return result;\n      });\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.fromWebToken = void 0;\n    var fromWebToken2 = (init) => async () => {\n      var _a;\n      (_a = init.logger) == null\n        ? void 0\n        : _a.debug(\"@aws-sdk/credential-provider-web-identity - fromWebToken\");\n      const {\n        roleArn,\n        roleSessionName,\n        webIdentityToken,\n        providerId,\n        policyArns,\n        policy,\n        durationSeconds,\n      } = init;\n      let { roleAssumerWithWebIdentity } = init;\n      if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await Promise.resolve().then(() =>\n          __importStar(require_dist_cjs50())\n        );\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity(\n          {\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: init.parentClientConfig,\n          },\n          init.clientPlugins\n        );\n      }\n      return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n      });\n    };\n    exports.fromWebToken = fromWebToken2;\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js\nvar require_fromTokenFile = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.fromTokenFile = void 0;\n    var property_provider_1 = require_dist_cjs12();\n    var fs_1 = require(\"fs\");\n    var fromWebToken_1 = require_fromWebToken();\n    var ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\n    var ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\n    var ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\n    var fromTokenFile2 =\n      (init = {}) =>\n      async () => {\n        var _a;\n        (_a = init.logger) == null\n          ? void 0\n          : _a.debug(\"@aws-sdk/credential-provider-web-identity - fromTokenFile\");\n        const webIdentityTokenFile =\n          (init == null ? void 0 : init.webIdentityTokenFile) ?? process.env[ENV_TOKEN_FILE];\n        const roleArn = (init == null ? void 0 : init.roleArn) ?? process.env[ENV_ROLE_ARN];\n        const roleSessionName =\n          (init == null ? void 0 : init.roleSessionName) ?? process.env[ENV_ROLE_SESSION_NAME];\n        if (!webIdentityTokenFile || !roleArn) {\n          throw new property_provider_1.CredentialsProviderError(\n            \"Web identity configuration not specified\",\n            {\n              logger: init.logger,\n            }\n          );\n        }\n        return (0, fromWebToken_1.fromWebToken)({\n          ...init,\n          webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: \"ascii\" }),\n          roleArn,\n          roleSessionName,\n        })();\n      };\n    exports.fromTokenFile = fromTokenFile2;\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js\nvar require_dist_cjs52 = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __reExport = (target, mod, secondTarget) => (\n      __copyProps2(target, mod, \"default\"),\n      secondTarget && __copyProps2(secondTarget, mod, \"default\")\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    module2.exports = __toCommonJS2(src_exports);\n    __reExport(src_exports, require_fromTokenFile(), module2.exports);\n    __reExport(src_exports, require_fromWebToken(), module2.exports);\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js\nvar require_dist_cjs53 = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js\"(exports, module2) {\n    var __create2 = Object.create;\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __getProtoOf2 = Object.getPrototypeOf;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toESM2 = (mod, isNodeMode, target) => (\n      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),\n      __copyProps2(\n        isNodeMode || !mod || !mod.__esModule\n          ? __defProp2(target, \"default\", { value: mod, enumerable: true })\n          : target,\n        mod\n      )\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      fromIni: () => fromIni,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_shared_ini_file_loader = require_dist_cjs13();\n    var import_property_provider = require_dist_cjs12();\n    var resolveCredentialSource = /* @__PURE__ */ __name(\n      (credentialSource, profileName, logger) => {\n        const sourceProvidersMap = {\n          EcsContainer: async (options) => {\n            const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs40()));\n            const { fromContainerMetadata } = await Promise.resolve().then(() =>\n              __toESM2(require_dist_cjs39())\n            );\n            logger == null\n              ? void 0\n              : logger.debug(\n                  \"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\"\n                );\n            return (0, import_property_provider.chain)(\n              fromHttp(options ?? {}),\n              fromContainerMetadata(options)\n            );\n          },\n          Ec2InstanceMetadata: async (options) => {\n            logger == null\n              ? void 0\n              : logger.debug(\n                  \"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\"\n                );\n            const { fromInstanceMetadata } = await Promise.resolve().then(() =>\n              __toESM2(require_dist_cjs39())\n            );\n            return fromInstanceMetadata(options);\n          },\n          Environment: async (options) => {\n            logger == null\n              ? void 0\n              : logger.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await Promise.resolve().then(() => __toESM2(require_dist_cjs38()));\n            return fromEnv(options);\n          },\n        };\n        if (credentialSource in sourceProvidersMap) {\n          return sourceProvidersMap[credentialSource];\n        } else {\n          throw new import_property_provider.CredentialsProviderError(\n            `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,\n            { logger }\n          );\n        }\n      },\n      \"resolveCredentialSource\"\n    );\n    var isAssumeRoleProfile = /* @__PURE__ */ __name(\n      (arg, { profile = \"default\", logger } = {}) => {\n        return (\n          Boolean(arg) &&\n          typeof arg === \"object\" &&\n          typeof arg.role_arn === \"string\" &&\n          [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n          [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n          [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n          (isAssumeRoleWithSourceProfile(arg, { profile, logger }) ||\n            isCredentialSourceProfile(arg, { profile, logger }))\n        );\n      },\n      \"isAssumeRoleProfile\"\n    );\n    var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {\n      var _a;\n      const withSourceProfile =\n        typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n      if (withSourceProfile) {\n        (_a = logger == null ? void 0 : logger.debug) == null\n          ? void 0\n          : _a.call(\n              logger,\n              `    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`\n            );\n      }\n      return withSourceProfile;\n    }, \"isAssumeRoleWithSourceProfile\");\n    var isCredentialSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {\n      var _a;\n      const withProviderProfile =\n        typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n      if (withProviderProfile) {\n        (_a = logger == null ? void 0 : logger.debug) == null\n          ? void 0\n          : _a.call(\n              logger,\n              `    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`\n            );\n      }\n      return withProviderProfile;\n    }, \"isCredentialSourceProfile\");\n    var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(\n      async (profileName, profiles, options, visitedProfiles = {}) => {\n        var _a, _b;\n        (_a = options.logger) == null\n          ? void 0\n          : _a.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n        const data = profiles[profileName];\n        if (!options.roleAssumer) {\n          const { getDefaultRoleAssumer } = await Promise.resolve().then(() =>\n            __toESM2(require_dist_cjs50())\n          );\n          options.roleAssumer = getDefaultRoleAssumer(\n            {\n              ...options.clientConfig,\n              credentialProviderLogger: options.logger,\n              parentClientConfig: options == null ? void 0 : options.parentClientConfig,\n            },\n            options.clientPlugins\n          );\n        }\n        const { source_profile } = data;\n        if (source_profile && source_profile in visitedProfiles) {\n          throw new import_property_provider.CredentialsProviderError(\n            `Detected a cycle attempting to resolve credentials for profile ${(0, import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` +\n              Object.keys(visitedProfiles).join(\", \"),\n            { logger: options.logger }\n          );\n        }\n        (_b = options.logger) == null\n          ? void 0\n          : _b.debug(\n              `@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`\n            );\n        const sourceCredsProvider = source_profile\n          ? resolveProfileData(\n              source_profile,\n              {\n                ...profiles,\n                [source_profile]: {\n                  ...profiles[source_profile],\n                  role_arn: data.role_arn ?? profiles[source_profile].role_arn,\n                },\n              },\n              options,\n              {\n                ...visitedProfiles,\n                [source_profile]: true,\n              }\n            )\n          : (\n              await resolveCredentialSource(\n                data.credential_source,\n                profileName,\n                options.logger\n              )(options)\n            )();\n        const params = {\n          RoleArn: data.role_arn,\n          RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n          ExternalId: data.external_id,\n          DurationSeconds: parseInt(data.duration_seconds || \"3600\", 10),\n        };\n        const { mfa_serial } = data;\n        if (mfa_serial) {\n          if (!options.mfaCodeProvider) {\n            throw new import_property_provider.CredentialsProviderError(\n              `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,\n              { logger: options.logger, tryNextLink: false }\n            );\n          }\n          params.SerialNumber = mfa_serial;\n          params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n        }\n        const sourceCreds = await sourceCredsProvider;\n        return options.roleAssumer(sourceCreds, params);\n      },\n      \"resolveAssumeRoleCredentials\"\n    );\n    var isProcessProfile = /* @__PURE__ */ __name(\n      (arg) =>\n        Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\",\n      \"isProcessProfile\"\n    );\n    var resolveProcessCredentials = /* @__PURE__ */ __name(\n      async (options, profile) =>\n        Promise.resolve()\n          .then(() => __toESM2(require_dist_cjs51()))\n          .then(({ fromProcess }) =>\n            fromProcess({\n              ...options,\n              profile,\n            })()\n          ),\n      \"resolveProcessCredentials\"\n    );\n    var resolveSsoCredentials = /* @__PURE__ */ __name(async (profile, options = {}) => {\n      const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs49()));\n      return fromSSO({\n        profile,\n        logger: options.logger,\n      })();\n    }, \"resolveSsoCredentials\");\n    var isSsoProfile = /* @__PURE__ */ __name(\n      (arg) =>\n        arg &&\n        (typeof arg.sso_start_url === \"string\" ||\n          typeof arg.sso_account_id === \"string\" ||\n          typeof arg.sso_session === \"string\" ||\n          typeof arg.sso_region === \"string\" ||\n          typeof arg.sso_role_name === \"string\"),\n      \"isSsoProfile\"\n    );\n    var isStaticCredsProfile = /* @__PURE__ */ __name(\n      (arg) =>\n        Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.aws_access_key_id === \"string\" &&\n        typeof arg.aws_secret_access_key === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1,\n      \"isStaticCredsProfile\"\n    );\n    var resolveStaticCredentials = /* @__PURE__ */ __name((profile, options) => {\n      var _a;\n      (_a = options == null ? void 0 : options.logger) == null\n        ? void 0\n        : _a.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n      return Promise.resolve({\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        credentialScope: profile.aws_credential_scope,\n      });\n    }, \"resolveStaticCredentials\");\n    var isWebIdentityProfile = /* @__PURE__ */ __name(\n      (arg) =>\n        Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.web_identity_token_file === \"string\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1,\n      \"isWebIdentityProfile\"\n    );\n    var resolveWebIdentityCredentials = /* @__PURE__ */ __name(\n      async (profile, options) =>\n        Promise.resolve()\n          .then(() => __toESM2(require_dist_cjs52()))\n          .then(({ fromTokenFile: fromTokenFile2 }) =>\n            fromTokenFile2({\n              webIdentityTokenFile: profile.web_identity_token_file,\n              roleArn: profile.role_arn,\n              roleSessionName: profile.role_session_name,\n              roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n              logger: options.logger,\n              parentClientConfig: options.parentClientConfig,\n            })()\n          ),\n      \"resolveWebIdentityCredentials\"\n    );\n    var resolveProfileData = /* @__PURE__ */ __name(\n      async (profileName, profiles, options, visitedProfiles = {}) => {\n        const data = profiles[profileName];\n        if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n          return resolveStaticCredentials(data, options);\n        }\n        if (isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n          return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n        }\n        if (isStaticCredsProfile(data)) {\n          return resolveStaticCredentials(data, options);\n        }\n        if (isWebIdentityProfile(data)) {\n          return resolveWebIdentityCredentials(data, options);\n        }\n        if (isProcessProfile(data)) {\n          return resolveProcessCredentials(options, profileName);\n        }\n        if (isSsoProfile(data)) {\n          return await resolveSsoCredentials(profileName, options);\n        }\n        throw new import_property_provider.CredentialsProviderError(\n          `Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`,\n          { logger: options.logger }\n        );\n      },\n      \"resolveProfileData\"\n    );\n    var fromIni = /* @__PURE__ */ __name(\n      (init = {}) =>\n        async () => {\n          var _a;\n          (_a = init.logger) == null\n            ? void 0\n            : _a.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n          const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);\n          return resolveProfileData(\n            (0, import_shared_ini_file_loader.getProfileName)(init),\n            profiles,\n            init\n          );\n        },\n      \"fromIni\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js\nvar require_dist_cjs54 = __commonJS({\n  \"node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js\"(exports, module2) {\n    var __create2 = Object.create;\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __getProtoOf2 = Object.getPrototypeOf;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toESM2 = (mod, isNodeMode, target) => (\n      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),\n      __copyProps2(\n        isNodeMode || !mod || !mod.__esModule\n          ? __defProp2(target, \"default\", { value: mod, enumerable: true })\n          : target,\n        mod\n      )\n    );\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,\n      credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,\n      defaultProvider: () => defaultProvider,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_credential_provider_env = require_dist_cjs38();\n    var import_shared_ini_file_loader = require_dist_cjs13();\n    var import_property_provider = require_dist_cjs12();\n    var ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\n    var remoteProvider = /* @__PURE__ */ __name(async (init) => {\n      var _a, _b;\n      const {\n        ENV_CMDS_FULL_URI,\n        ENV_CMDS_RELATIVE_URI,\n        fromContainerMetadata,\n        fromInstanceMetadata,\n      } = await Promise.resolve().then(() => __toESM2(require_dist_cjs39()));\n      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {\n        (_a = init.logger) == null\n          ? void 0\n          : _a.debug(\n              \"@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata\"\n            );\n        const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs40()));\n        return (0, import_property_provider.chain)(fromHttp(init), fromContainerMetadata(init));\n      }\n      if (process.env[ENV_IMDS_DISABLED]) {\n        return async () => {\n          throw new import_property_provider.CredentialsProviderError(\n            \"EC2 Instance Metadata Service access disabled\",\n            { logger: init.logger }\n          );\n        };\n      }\n      (_b = init.logger) == null\n        ? void 0\n        : _b.debug(\"@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata\");\n      return fromInstanceMetadata(init);\n    }, \"remoteProvider\");\n    var defaultProvider = /* @__PURE__ */ __name(\n      (init = {}) =>\n        (0, import_property_provider.memoize)(\n          (0, import_property_provider.chain)(\n            ...(init.profile || process.env[import_shared_ini_file_loader.ENV_PROFILE]\n              ? []\n              : [\n                  async () => {\n                    var _a;\n                    (_a = init.logger) == null\n                      ? void 0\n                      : _a.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromEnv\");\n                    return (0, import_credential_provider_env.fromEnv)(init)();\n                  },\n                ]),\n            async () => {\n              var _a;\n              (_a = init.logger) == null\n                ? void 0\n                : _a.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromSSO\");\n              const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n              if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n                throw new import_property_provider.CredentialsProviderError(\n                  \"Skipping SSO provider in default chain (inputs do not include SSO fields).\",\n                  { logger: init.logger }\n                );\n              }\n              const { fromSSO } = await Promise.resolve().then(() =>\n                __toESM2(require_dist_cjs49())\n              );\n              return fromSSO(init)();\n            },\n            async () => {\n              var _a;\n              (_a = init.logger) == null\n                ? void 0\n                : _a.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromIni\");\n              const { fromIni } = await Promise.resolve().then(() =>\n                __toESM2(require_dist_cjs53())\n              );\n              return fromIni(init)();\n            },\n            async () => {\n              var _a;\n              (_a = init.logger) == null\n                ? void 0\n                : _a.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromProcess\");\n              const { fromProcess } = await Promise.resolve().then(() =>\n                __toESM2(require_dist_cjs51())\n              );\n              return fromProcess(init)();\n            },\n            async () => {\n              var _a;\n              (_a = init.logger) == null\n                ? void 0\n                : _a.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile\");\n              const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() =>\n                __toESM2(require_dist_cjs52())\n              );\n              return fromTokenFile2(init)();\n            },\n            async () => {\n              var _a;\n              (_a = init.logger) == null\n                ? void 0\n                : _a.debug(\"@aws-sdk/credential-provider-node - defaultProvider::remoteProvider\");\n              return (await remoteProvider(init))();\n            },\n            async () => {\n              throw new import_property_provider.CredentialsProviderError(\n                \"Could not load credentials from any providers\",\n                {\n                  tryNextLink: false,\n                  logger: init.logger,\n                }\n              );\n            }\n          ),\n          credentialsTreatedAsExpired,\n          credentialsWillNeedRefresh\n        ),\n      \"defaultProvider\"\n    );\n    var credentialsWillNeedRefresh = /* @__PURE__ */ __name(\n      (credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0,\n      \"credentialsWillNeedRefresh\"\n    );\n    var credentialsTreatedAsExpired = /* @__PURE__ */ __name(\n      (credentials) =>\n        (credentials == null ? void 0 : credentials.expiration) !== void 0 &&\n        credentials.expiration.getTime() - Date.now() < 3e5,\n      \"credentialsTreatedAsExpired\"\n    );\n  },\n});\n\n// node_modules/@aws-sdk/client-iot-wireless/dist-cjs/endpoint/ruleset.js\nvar require_ruleset4 = __commonJS({\n  \"node_modules/@aws-sdk/client-iot-wireless/dist-cjs/endpoint/ruleset.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ruleSet = void 0;\n    var s = \"required\";\n    var t = \"fn\";\n    var u = \"argv\";\n    var v = \"ref\";\n    var a = true;\n    var b = \"isSet\";\n    var c = \"booleanEquals\";\n    var d = \"error\";\n    var e = \"endpoint\";\n    var f = \"tree\";\n    var g = \"PartitionResult\";\n    var h = { [s]: false, type: \"String\" };\n    var i = { [s]: true, default: false, type: \"Boolean\" };\n    var j = { [v]: \"Endpoint\" };\n    var k = { [t]: c, [u]: [{ [v]: \"UseFIPS\" }, true] };\n    var l = { [t]: c, [u]: [{ [v]: \"UseDualStack\" }, true] };\n    var m = {};\n    var n = { [t]: \"getAttr\", [u]: [{ [v]: g }, \"supportsFIPS\"] };\n    var o = { [t]: c, [u]: [true, { [t]: \"getAttr\", [u]: [{ [v]: g }, \"supportsDualStack\"] }] };\n    var p = [k];\n    var q = [l];\n    var r = [{ [v]: \"Region\" }];\n    var _data = {\n      version: \"1.0\",\n      parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h },\n      rules: [\n        {\n          conditions: [{ [t]: b, [u]: [j] }],\n          rules: [\n            {\n              conditions: p,\n              error: \"Invalid Configuration: FIPS and custom endpoint are not supported\",\n              type: d,\n            },\n            {\n              conditions: q,\n              error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\",\n              type: d,\n            },\n            { endpoint: { url: j, properties: m, headers: m }, type: e },\n          ],\n          type: f,\n        },\n        {\n          conditions: [{ [t]: b, [u]: r }],\n          rules: [\n            {\n              conditions: [{ [t]: \"aws.partition\", [u]: r, assign: g }],\n              rules: [\n                {\n                  conditions: [k, l],\n                  rules: [\n                    {\n                      conditions: [{ [t]: c, [u]: [a, n] }, o],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://api.iotwireless-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n                            properties: m,\n                            headers: m,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    {\n                      error:\n                        \"FIPS and DualStack are enabled, but this partition does not support one or both\",\n                      type: d,\n                    },\n                  ],\n                  type: f,\n                },\n                {\n                  conditions: p,\n                  rules: [\n                    {\n                      conditions: [{ [t]: c, [u]: [n, a] }],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://api.iotwireless-fips.{Region}.{PartitionResult#dnsSuffix}\",\n                            properties: m,\n                            headers: m,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    { error: \"FIPS is enabled but this partition does not support FIPS\", type: d },\n                  ],\n                  type: f,\n                },\n                {\n                  conditions: q,\n                  rules: [\n                    {\n                      conditions: [o],\n                      rules: [\n                        {\n                          endpoint: {\n                            url: \"https://api.iotwireless.{Region}.{PartitionResult#dualStackDnsSuffix}\",\n                            properties: m,\n                            headers: m,\n                          },\n                          type: e,\n                        },\n                      ],\n                      type: f,\n                    },\n                    {\n                      error: \"DualStack is enabled but this partition does not support DualStack\",\n                      type: d,\n                    },\n                  ],\n                  type: f,\n                },\n                {\n                  endpoint: {\n                    url: \"https://api.iotwireless.{Region}.{PartitionResult#dnsSuffix}\",\n                    properties: m,\n                    headers: m,\n                  },\n                  type: e,\n                },\n              ],\n              type: f,\n            },\n          ],\n          type: f,\n        },\n        { error: \"Invalid Configuration: Missing Region\", type: d },\n      ],\n    };\n    exports.ruleSet = _data;\n  },\n});\n\n// node_modules/@aws-sdk/client-iot-wireless/dist-cjs/endpoint/endpointResolver.js\nvar require_endpointResolver4 = __commonJS({\n  \"node_modules/@aws-sdk/client-iot-wireless/dist-cjs/endpoint/endpointResolver.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.defaultEndpointResolver = void 0;\n    var util_endpoints_1 = require_dist_cjs7();\n    var util_endpoints_2 = require_dist_cjs6();\n    var ruleset_1 = require_ruleset4();\n    var defaultEndpointResolver = (endpointParams, context = {}) => {\n      return (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {\n        endpointParams,\n        logger: context.logger,\n      });\n    };\n    exports.defaultEndpointResolver = defaultEndpointResolver;\n    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;\n  },\n});\n\n// node_modules/@aws-sdk/client-iot-wireless/dist-cjs/runtimeConfig.shared.js\nvar require_runtimeConfig_shared4 = __commonJS({\n  \"node_modules/@aws-sdk/client-iot-wireless/dist-cjs/runtimeConfig.shared.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getRuntimeConfig = void 0;\n    var core_1 = require_dist_cjs37();\n    var smithy_client_1 = require_dist_cjs32();\n    var url_parser_1 = require_dist_cjs16();\n    var util_base64_1 = require_dist_cjs25();\n    var util_utf8_1 = require_dist_cjs24();\n    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();\n    var endpointResolver_1 = require_endpointResolver4();\n    var getRuntimeConfig = (config) => {\n      return {\n        apiVersion: \"2020-11-22\",\n        base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,\n        base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,\n        disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,\n        endpointProvider:\n          (config == null ? void 0 : config.endpointProvider) ??\n          endpointResolver_1.defaultEndpointResolver,\n        extensions: (config == null ? void 0 : config.extensions) ?? [],\n        httpAuthSchemeProvider:\n          (config == null ? void 0 : config.httpAuthSchemeProvider) ??\n          httpAuthSchemeProvider_1.defaultIoTWirelessHttpAuthSchemeProvider,\n        httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [\n          {\n            schemeId: \"aws.auth#sigv4\",\n            identityProvider: (ipc) => ipc.getIdentityProvider(\"aws.auth#sigv4\"),\n            signer: new core_1.AwsSdkSigV4Signer(),\n          },\n        ],\n        logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),\n        serviceId: (config == null ? void 0 : config.serviceId) ?? \"IoT Wireless\",\n        urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,\n        utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,\n        utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,\n      };\n    };\n    exports.getRuntimeConfig = getRuntimeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-iot-wireless/dist-cjs/runtimeConfig.js\nvar require_runtimeConfig4 = __commonJS({\n  \"node_modules/@aws-sdk/client-iot-wireless/dist-cjs/runtimeConfig.js\"(exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getRuntimeConfig = void 0;\n    var tslib_1 = require_tslib();\n    var package_json_1 = tslib_1.__importDefault(require_package());\n    var core_1 = require_dist_cjs37();\n    var credential_provider_node_1 = require_dist_cjs54();\n    var util_user_agent_node_1 = require_dist_cjs41();\n    var config_resolver_1 = require_dist_cjs11();\n    var hash_node_1 = require_dist_cjs42();\n    var middleware_retry_1 = require_dist_cjs33();\n    var node_config_provider_1 = require_dist_cjs14();\n    var node_http_handler_1 = require_dist_cjs28();\n    var util_body_length_node_1 = require_dist_cjs43();\n    var util_retry_1 = require_dist_cjs20();\n    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();\n    var smithy_client_1 = require_dist_cjs32();\n    var util_defaults_mode_node_1 = require_dist_cjs44();\n    var smithy_client_2 = require_dist_cjs32();\n    var getRuntimeConfig = (config) => {\n      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);\n      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);\n      const defaultConfigProvider = () =>\n        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);\n      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);\n      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);\n      return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker:\n          (config == null ? void 0 : config.bodyLengthChecker) ??\n          util_body_length_node_1.calculateBodyLength,\n        credentialDefaultProvider:\n          (config == null ? void 0 : config.credentialDefaultProvider) ??\n          credential_provider_node_1.defaultProvider,\n        defaultUserAgentProvider:\n          (config == null ? void 0 : config.defaultUserAgentProvider) ??\n          (0, util_user_agent_node_1.defaultUserAgent)({\n            serviceId: clientSharedValues.serviceId,\n            clientVersion: package_json_1.default.version,\n          }),\n        maxAttempts:\n          (config == null ? void 0 : config.maxAttempts) ??\n          (0, node_config_provider_1.loadConfig)(\n            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS\n          ),\n        region:\n          (config == null ? void 0 : config.region) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,\n            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS\n          ),\n        requestHandler: node_http_handler_1.NodeHttpHandler.create(\n          (config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider\n        ),\n        retryMode:\n          (config == null ? void 0 : config.retryMode) ??\n          (0, node_config_provider_1.loadConfig)({\n            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,\n            default: async () =>\n              (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE,\n          }),\n        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, \"sha256\"),\n        streamCollector:\n          (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,\n        useDualstackEndpoint:\n          (config == null ? void 0 : config.useDualstackEndpoint) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS\n          ),\n        useFipsEndpoint:\n          (config == null ? void 0 : config.useFipsEndpoint) ??\n          (0, node_config_provider_1.loadConfig)(\n            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS\n          ),\n      };\n    };\n    exports.getRuntimeConfig = getRuntimeConfig;\n  },\n});\n\n// node_modules/@aws-sdk/client-iot-wireless/dist-cjs/index.js\nvar require_dist_cjs55 = __commonJS({\n  \"node_modules/@aws-sdk/client-iot-wireless/dist-cjs/index.js\"(exports, module2) {\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __name = (target, value) => __defProp2(target, \"name\", { value, configurable: true });\n    var __export2 = (target, all) => {\n      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps2 = (to, from, except, desc) => {\n      if ((from && typeof from === \"object\") || typeof from === \"function\") {\n        for (const key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, {\n              get: () => from[key],\n              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,\n            });\n      }\n      return to;\n    };\n    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, \"__esModule\", { value: true }), mod);\n    var src_exports = {};\n    __export2(src_exports, {\n      AccessDeniedException: () => AccessDeniedException,\n      AggregationPeriod: () => AggregationPeriod,\n      ApplicationConfigType: () => ApplicationConfigType,\n      AssociateAwsAccountWithPartnerAccountCommand: () =>\n        AssociateAwsAccountWithPartnerAccountCommand,\n      AssociateAwsAccountWithPartnerAccountRequestFilterSensitiveLog: () =>\n        AssociateAwsAccountWithPartnerAccountRequestFilterSensitiveLog,\n      AssociateAwsAccountWithPartnerAccountResponseFilterSensitiveLog: () =>\n        AssociateAwsAccountWithPartnerAccountResponseFilterSensitiveLog,\n      AssociateMulticastGroupWithFuotaTaskCommand: () =>\n        AssociateMulticastGroupWithFuotaTaskCommand,\n      AssociateWirelessDeviceWithFuotaTaskCommand: () =>\n        AssociateWirelessDeviceWithFuotaTaskCommand,\n      AssociateWirelessDeviceWithMulticastGroupCommand: () =>\n        AssociateWirelessDeviceWithMulticastGroupCommand,\n      AssociateWirelessDeviceWithThingCommand: () => AssociateWirelessDeviceWithThingCommand,\n      AssociateWirelessGatewayWithCertificateCommand: () =>\n        AssociateWirelessGatewayWithCertificateCommand,\n      AssociateWirelessGatewayWithThingCommand: () => AssociateWirelessGatewayWithThingCommand,\n      BatteryLevel: () => BatteryLevel,\n      CancelMulticastGroupSessionCommand: () => CancelMulticastGroupSessionCommand,\n      ConflictException: () => ConflictException,\n      ConnectionStatus: () => ConnectionStatus,\n      CreateDestinationCommand: () => CreateDestinationCommand,\n      CreateDeviceProfileCommand: () => CreateDeviceProfileCommand,\n      CreateFuotaTaskCommand: () => CreateFuotaTaskCommand,\n      CreateMulticastGroupCommand: () => CreateMulticastGroupCommand,\n      CreateNetworkAnalyzerConfigurationCommand: () => CreateNetworkAnalyzerConfigurationCommand,\n      CreateServiceProfileCommand: () => CreateServiceProfileCommand,\n      CreateWirelessDeviceCommand: () => CreateWirelessDeviceCommand,\n      CreateWirelessGatewayCommand: () => CreateWirelessGatewayCommand,\n      CreateWirelessGatewayTaskCommand: () => CreateWirelessGatewayTaskCommand,\n      CreateWirelessGatewayTaskDefinitionCommand: () => CreateWirelessGatewayTaskDefinitionCommand,\n      DeleteDestinationCommand: () => DeleteDestinationCommand,\n      DeleteDeviceProfileCommand: () => DeleteDeviceProfileCommand,\n      DeleteFuotaTaskCommand: () => DeleteFuotaTaskCommand,\n      DeleteMulticastGroupCommand: () => DeleteMulticastGroupCommand,\n      DeleteNetworkAnalyzerConfigurationCommand: () => DeleteNetworkAnalyzerConfigurationCommand,\n      DeleteQueuedMessagesCommand: () => DeleteQueuedMessagesCommand,\n      DeleteServiceProfileCommand: () => DeleteServiceProfileCommand,\n      DeleteWirelessDeviceCommand: () => DeleteWirelessDeviceCommand,\n      DeleteWirelessDeviceImportTaskCommand: () => DeleteWirelessDeviceImportTaskCommand,\n      DeleteWirelessGatewayCommand: () => DeleteWirelessGatewayCommand,\n      DeleteWirelessGatewayTaskCommand: () => DeleteWirelessGatewayTaskCommand,\n      DeleteWirelessGatewayTaskDefinitionCommand: () => DeleteWirelessGatewayTaskDefinitionCommand,\n      DeregisterWirelessDeviceCommand: () => DeregisterWirelessDeviceCommand,\n      DeviceProfileType: () => DeviceProfileType,\n      DeviceState: () => DeviceState,\n      DimensionName: () => DimensionName,\n      DisassociateAwsAccountFromPartnerAccountCommand: () =>\n        DisassociateAwsAccountFromPartnerAccountCommand,\n      DisassociateMulticastGroupFromFuotaTaskCommand: () =>\n        DisassociateMulticastGroupFromFuotaTaskCommand,\n      DisassociateWirelessDeviceFromFuotaTaskCommand: () =>\n        DisassociateWirelessDeviceFromFuotaTaskCommand,\n      DisassociateWirelessDeviceFromMulticastGroupCommand: () =>\n        DisassociateWirelessDeviceFromMulticastGroupCommand,\n      DisassociateWirelessDeviceFromThingCommand: () => DisassociateWirelessDeviceFromThingCommand,\n      DisassociateWirelessGatewayFromCertificateCommand: () =>\n        DisassociateWirelessGatewayFromCertificateCommand,\n      DisassociateWirelessGatewayFromThingCommand: () =>\n        DisassociateWirelessGatewayFromThingCommand,\n      DlClass: () => DlClass,\n      DownlinkMode: () => DownlinkMode,\n      Event: () => Event,\n      EventNotificationPartnerType: () => EventNotificationPartnerType,\n      EventNotificationResourceType: () => EventNotificationResourceType,\n      EventNotificationTopicStatus: () => EventNotificationTopicStatus,\n      ExpressionType: () => ExpressionType,\n      FuotaDeviceStatus: () => FuotaDeviceStatus,\n      FuotaTaskStatus: () => FuotaTaskStatus,\n      GetDestinationCommand: () => GetDestinationCommand,\n      GetDeviceProfileCommand: () => GetDeviceProfileCommand,\n      GetDeviceProfileResponseFilterSensitiveLog: () => GetDeviceProfileResponseFilterSensitiveLog,\n      GetEventConfigurationByResourceTypesCommand: () =>\n        GetEventConfigurationByResourceTypesCommand,\n      GetFuotaTaskCommand: () => GetFuotaTaskCommand,\n      GetLogLevelsByResourceTypesCommand: () => GetLogLevelsByResourceTypesCommand,\n      GetMetricConfigurationCommand: () => GetMetricConfigurationCommand,\n      GetMetricsCommand: () => GetMetricsCommand,\n      GetMulticastGroupCommand: () => GetMulticastGroupCommand,\n      GetMulticastGroupSessionCommand: () => GetMulticastGroupSessionCommand,\n      GetNetworkAnalyzerConfigurationCommand: () => GetNetworkAnalyzerConfigurationCommand,\n      GetPartnerAccountCommand: () => GetPartnerAccountCommand,\n      GetPartnerAccountResponseFilterSensitiveLog: () =>\n        GetPartnerAccountResponseFilterSensitiveLog,\n      GetPositionCommand: () => GetPositionCommand,\n      GetPositionConfigurationCommand: () => GetPositionConfigurationCommand,\n      GetPositionEstimateCommand: () => GetPositionEstimateCommand2,\n      GetResourceEventConfigurationCommand: () => GetResourceEventConfigurationCommand,\n      GetResourceLogLevelCommand: () => GetResourceLogLevelCommand,\n      GetResourcePositionCommand: () => GetResourcePositionCommand,\n      GetServiceEndpointCommand: () => GetServiceEndpointCommand,\n      GetServiceProfileCommand: () => GetServiceProfileCommand,\n      GetWirelessDeviceCommand: () => GetWirelessDeviceCommand,\n      GetWirelessDeviceImportTaskCommand: () => GetWirelessDeviceImportTaskCommand,\n      GetWirelessDeviceStatisticsCommand: () => GetWirelessDeviceStatisticsCommand,\n      GetWirelessGatewayCertificateCommand: () => GetWirelessGatewayCertificateCommand,\n      GetWirelessGatewayCommand: () => GetWirelessGatewayCommand,\n      GetWirelessGatewayFirmwareInformationCommand: () =>\n        GetWirelessGatewayFirmwareInformationCommand,\n      GetWirelessGatewayStatisticsCommand: () => GetWirelessGatewayStatisticsCommand,\n      GetWirelessGatewayTaskCommand: () => GetWirelessGatewayTaskCommand,\n      GetWirelessGatewayTaskDefinitionCommand: () => GetWirelessGatewayTaskDefinitionCommand,\n      IdentifierType: () => IdentifierType,\n      ImportTaskStatus: () => ImportTaskStatus,\n      InternalServerException: () => InternalServerException,\n      IoTWireless: () => IoTWireless,\n      IoTWirelessClient: () => IoTWirelessClient2,\n      IoTWirelessServiceException: () => IoTWirelessServiceException,\n      ListDestinationsCommand: () => ListDestinationsCommand,\n      ListDeviceProfilesCommand: () => ListDeviceProfilesCommand,\n      ListDevicesForWirelessDeviceImportTaskCommand: () =>\n        ListDevicesForWirelessDeviceImportTaskCommand,\n      ListEventConfigurationsCommand: () => ListEventConfigurationsCommand,\n      ListFuotaTasksCommand: () => ListFuotaTasksCommand,\n      ListMulticastGroupsByFuotaTaskCommand: () => ListMulticastGroupsByFuotaTaskCommand,\n      ListMulticastGroupsCommand: () => ListMulticastGroupsCommand,\n      ListNetworkAnalyzerConfigurationsCommand: () => ListNetworkAnalyzerConfigurationsCommand,\n      ListPartnerAccountsCommand: () => ListPartnerAccountsCommand,\n      ListPartnerAccountsResponseFilterSensitiveLog: () =>\n        ListPartnerAccountsResponseFilterSensitiveLog,\n      ListPositionConfigurationsCommand: () => ListPositionConfigurationsCommand,\n      ListQueuedMessagesCommand: () => ListQueuedMessagesCommand,\n      ListServiceProfilesCommand: () => ListServiceProfilesCommand,\n      ListTagsForResourceCommand: () => ListTagsForResourceCommand,\n      ListWirelessDeviceImportTasksCommand: () => ListWirelessDeviceImportTasksCommand,\n      ListWirelessDevicesCommand: () => ListWirelessDevicesCommand,\n      ListWirelessGatewayTaskDefinitionsCommand: () => ListWirelessGatewayTaskDefinitionsCommand,\n      ListWirelessGatewaysCommand: () => ListWirelessGatewaysCommand,\n      LogLevel: () => LogLevel,\n      MessageType: () => MessageType,\n      MetricName: () => MetricName,\n      MetricQueryStatus: () => MetricQueryStatus,\n      MulticastFrameInfo: () => MulticastFrameInfo,\n      OnboardStatus: () => OnboardStatus,\n      PartnerType: () => PartnerType,\n      PositionConfigurationFec: () => PositionConfigurationFec,\n      PositionConfigurationStatus: () => PositionConfigurationStatus,\n      PositionResourceType: () => PositionResourceType,\n      PositionSolverProvider: () => PositionSolverProvider,\n      PositionSolverType: () => PositionSolverType,\n      PositioningConfigStatus: () => PositioningConfigStatus,\n      PutPositionConfigurationCommand: () => PutPositionConfigurationCommand,\n      PutResourceLogLevelCommand: () => PutResourceLogLevelCommand,\n      ResetAllResourceLogLevelsCommand: () => ResetAllResourceLogLevelsCommand,\n      ResetResourceLogLevelCommand: () => ResetResourceLogLevelCommand,\n      ResourceNotFoundException: () => ResourceNotFoundException,\n      SendDataToMulticastGroupCommand: () => SendDataToMulticastGroupCommand,\n      SendDataToWirelessDeviceCommand: () => SendDataToWirelessDeviceCommand,\n      SidewalkAccountInfoFilterSensitiveLog: () => SidewalkAccountInfoFilterSensitiveLog,\n      SidewalkAccountInfoWithFingerprintFilterSensitiveLog: () =>\n        SidewalkAccountInfoWithFingerprintFilterSensitiveLog,\n      SidewalkGetDeviceProfileFilterSensitiveLog: () => SidewalkGetDeviceProfileFilterSensitiveLog,\n      SidewalkUpdateAccountFilterSensitiveLog: () => SidewalkUpdateAccountFilterSensitiveLog,\n      SigningAlg: () => SigningAlg,\n      StartBulkAssociateWirelessDeviceWithMulticastGroupCommand: () =>\n        StartBulkAssociateWirelessDeviceWithMulticastGroupCommand,\n      StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand: () =>\n        StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand,\n      StartFuotaTaskCommand: () => StartFuotaTaskCommand,\n      StartMulticastGroupSessionCommand: () => StartMulticastGroupSessionCommand,\n      StartSingleWirelessDeviceImportTaskCommand: () => StartSingleWirelessDeviceImportTaskCommand,\n      StartWirelessDeviceImportTaskCommand: () => StartWirelessDeviceImportTaskCommand,\n      SummaryMetricConfigurationStatus: () => SummaryMetricConfigurationStatus,\n      SupportedRfRegion: () => SupportedRfRegion,\n      TagResourceCommand: () => TagResourceCommand,\n      TestWirelessDeviceCommand: () => TestWirelessDeviceCommand,\n      ThrottlingException: () => ThrottlingException,\n      TooManyTagsException: () => TooManyTagsException,\n      UntagResourceCommand: () => UntagResourceCommand,\n      UpdateDestinationCommand: () => UpdateDestinationCommand,\n      UpdateEventConfigurationByResourceTypesCommand: () =>\n        UpdateEventConfigurationByResourceTypesCommand,\n      UpdateFuotaTaskCommand: () => UpdateFuotaTaskCommand,\n      UpdateLogLevelsByResourceTypesCommand: () => UpdateLogLevelsByResourceTypesCommand,\n      UpdateMetricConfigurationCommand: () => UpdateMetricConfigurationCommand,\n      UpdateMulticastGroupCommand: () => UpdateMulticastGroupCommand,\n      UpdateNetworkAnalyzerConfigurationCommand: () => UpdateNetworkAnalyzerConfigurationCommand,\n      UpdatePartnerAccountCommand: () => UpdatePartnerAccountCommand,\n      UpdatePartnerAccountRequestFilterSensitiveLog: () =>\n        UpdatePartnerAccountRequestFilterSensitiveLog,\n      UpdatePositionCommand: () => UpdatePositionCommand,\n      UpdateResourceEventConfigurationCommand: () => UpdateResourceEventConfigurationCommand,\n      UpdateResourcePositionCommand: () => UpdateResourcePositionCommand,\n      UpdateWirelessDeviceCommand: () => UpdateWirelessDeviceCommand,\n      UpdateWirelessDeviceImportTaskCommand: () => UpdateWirelessDeviceImportTaskCommand,\n      UpdateWirelessGatewayCommand: () => UpdateWirelessGatewayCommand,\n      ValidationException: () => ValidationException,\n      WirelessDeviceEvent: () => WirelessDeviceEvent,\n      WirelessDeviceFrameInfo: () => WirelessDeviceFrameInfo,\n      WirelessDeviceIdType: () => WirelessDeviceIdType,\n      WirelessDeviceSidewalkStatus: () => WirelessDeviceSidewalkStatus,\n      WirelessDeviceType: () => WirelessDeviceType,\n      WirelessGatewayEvent: () => WirelessGatewayEvent,\n      WirelessGatewayIdType: () => WirelessGatewayIdType,\n      WirelessGatewayServiceType: () => WirelessGatewayServiceType,\n      WirelessGatewayTaskDefinitionType: () => WirelessGatewayTaskDefinitionType,\n      WirelessGatewayTaskStatus: () => WirelessGatewayTaskStatus,\n      WirelessGatewayType: () => WirelessGatewayType,\n      __Client: () => import_smithy_client.Client,\n      paginateListDestinations: () => paginateListDestinations,\n      paginateListDeviceProfiles: () => paginateListDeviceProfiles,\n      paginateListFuotaTasks: () => paginateListFuotaTasks,\n      paginateListMulticastGroups: () => paginateListMulticastGroups,\n      paginateListMulticastGroupsByFuotaTask: () => paginateListMulticastGroupsByFuotaTask,\n      paginateListNetworkAnalyzerConfigurations: () => paginateListNetworkAnalyzerConfigurations,\n      paginateListPositionConfigurations: () => paginateListPositionConfigurations,\n      paginateListQueuedMessages: () => paginateListQueuedMessages,\n      paginateListServiceProfiles: () => paginateListServiceProfiles,\n      paginateListWirelessDevices: () => paginateListWirelessDevices,\n      paginateListWirelessGateways: () => paginateListWirelessGateways,\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var import_middleware_host_header = require_dist_cjs3();\n    var import_middleware_logger = require_dist_cjs4();\n    var import_middleware_recursion_detection = require_dist_cjs5();\n    var import_middleware_user_agent = require_dist_cjs8();\n    var import_config_resolver = require_dist_cjs11();\n    var import_core = require_dist_cjs34();\n    var import_middleware_content_length = require_dist_cjs35();\n    var import_middleware_endpoint = require_dist_cjs18();\n    var import_middleware_retry = require_dist_cjs33();\n    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider();\n    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {\n      return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"iotwireless\",\n      };\n    }, \"resolveClientEndpointParameters\");\n    var commonParams = {\n      UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n      Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n      Region: { type: \"builtInParams\", name: \"region\" },\n      UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n    var import_runtimeConfig = require_runtimeConfig4();\n    var import_region_config_resolver = require_dist_cjs45();\n    var import_protocol_http = require_dist_cjs2();\n    var import_smithy_client = require_dist_cjs32();\n    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {\n      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n      let _credentials = runtimeConfig.credentials;\n      return {\n        setHttpAuthScheme(httpAuthScheme) {\n          const index = _httpAuthSchemes.findIndex(\n            (scheme) => scheme.schemeId === httpAuthScheme.schemeId\n          );\n          if (index === -1) {\n            _httpAuthSchemes.push(httpAuthScheme);\n          } else {\n            _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n          }\n        },\n        httpAuthSchemes() {\n          return _httpAuthSchemes;\n        },\n        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n          _httpAuthSchemeProvider = httpAuthSchemeProvider;\n        },\n        httpAuthSchemeProvider() {\n          return _httpAuthSchemeProvider;\n        },\n        setCredentials(credentials) {\n          _credentials = credentials;\n        },\n        credentials() {\n          return _credentials;\n        },\n      };\n    }, \"getHttpAuthExtensionConfiguration\");\n    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {\n      return {\n        httpAuthSchemes: config.httpAuthSchemes(),\n        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n        credentials: config.credentials(),\n      };\n    }, \"resolveHttpAuthRuntimeConfig\");\n    var asPartial = /* @__PURE__ */ __name((t) => t, \"asPartial\");\n    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {\n      const extensionConfiguration = {\n        ...asPartial(\n          (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)\n        ),\n        ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),\n        ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),\n        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig)),\n      };\n      extensions.forEach((extension) => extension.configure(extensionConfiguration));\n      return {\n        ...runtimeConfig,\n        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(\n          extensionConfiguration\n        ),\n        ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),\n        ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),\n        ...resolveHttpAuthRuntimeConfig(extensionConfiguration),\n      };\n    }, \"resolveRuntimeExtensions\");\n    var _IoTWirelessClient = class _IoTWirelessClient extends import_smithy_client.Client {\n      constructor(...[configuration]) {\n        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);\n        const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);\n        const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);\n        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);\n        const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);\n        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);\n        const _config_8 = resolveRuntimeExtensions(\n          _config_7,\n          (configuration == null ? void 0 : configuration.extensions) || []\n        );\n        super(_config_8);\n        this.config = _config_8;\n        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_middleware_content_length.getContentLengthPlugin)(this.config)\n        );\n        this.middlewareStack.use(\n          (0, import_middleware_host_header.getHostHeaderPlugin)(this.config)\n        );\n        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config)\n        );\n        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));\n        this.middlewareStack.use(\n          (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {\n            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),\n            identityProviderConfigProvider: this.getIdentityProviderConfigProvider(),\n          })\n        );\n        this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));\n      }\n      destroy() {\n        super.destroy();\n      }\n      getDefaultHttpAuthSchemeParametersProvider() {\n        return import_httpAuthSchemeProvider.defaultIoTWirelessHttpAuthSchemeParametersProvider;\n      }\n      getIdentityProviderConfigProvider() {\n        return async (config) =>\n          new import_core.DefaultIdentityProviderConfig({\n            \"aws.auth#sigv4\": config.credentials,\n          });\n      }\n    };\n    __name(_IoTWirelessClient, \"IoTWirelessClient\");\n    var IoTWirelessClient2 = _IoTWirelessClient;\n    var import_middleware_serde = require_dist_cjs17();\n    var _IoTWirelessServiceException = class _IoTWirelessServiceException2 extends import_smithy_client.ServiceException {\n      constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, _IoTWirelessServiceException2.prototype);\n      }\n    };\n    __name(_IoTWirelessServiceException, \"IoTWirelessServiceException\");\n    var IoTWirelessServiceException = _IoTWirelessServiceException;\n    var _AccessDeniedException = class _AccessDeniedException2 extends IoTWirelessServiceException {\n      constructor(opts) {\n        super({\n          name: \"AccessDeniedException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"AccessDeniedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);\n        this.Message = opts.Message;\n      }\n    };\n    __name(_AccessDeniedException, \"AccessDeniedException\");\n    var AccessDeniedException = _AccessDeniedException;\n    var AggregationPeriod = {\n      OneDay: \"OneDay\",\n      OneHour: \"OneHour\",\n      OneWeek: \"OneWeek\",\n    };\n    var ApplicationConfigType = {\n      SemtechGeoLocation: \"SemtechGeolocation\",\n    };\n    var _ConflictException = class _ConflictException2 extends IoTWirelessServiceException {\n      constructor(opts) {\n        super({\n          name: \"ConflictException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"ConflictException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _ConflictException2.prototype);\n        this.Message = opts.Message;\n        this.ResourceId = opts.ResourceId;\n        this.ResourceType = opts.ResourceType;\n      }\n    };\n    __name(_ConflictException, \"ConflictException\");\n    var ConflictException = _ConflictException;\n    var _InternalServerException = class _InternalServerException2 extends IoTWirelessServiceException {\n      constructor(opts) {\n        super({\n          name: \"InternalServerException\",\n          $fault: \"server\",\n          ...opts,\n        });\n        this.name = \"InternalServerException\";\n        this.$fault = \"server\";\n        Object.setPrototypeOf(this, _InternalServerException2.prototype);\n        this.Message = opts.Message;\n      }\n    };\n    __name(_InternalServerException, \"InternalServerException\");\n    var InternalServerException = _InternalServerException;\n    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends IoTWirelessServiceException {\n      constructor(opts) {\n        super({\n          name: \"ResourceNotFoundException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"ResourceNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);\n        this.Message = opts.Message;\n        this.ResourceId = opts.ResourceId;\n        this.ResourceType = opts.ResourceType;\n      }\n    };\n    __name(_ResourceNotFoundException, \"ResourceNotFoundException\");\n    var ResourceNotFoundException = _ResourceNotFoundException;\n    var _ThrottlingException = class _ThrottlingException2 extends IoTWirelessServiceException {\n      constructor(opts) {\n        super({\n          name: \"ThrottlingException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"ThrottlingException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _ThrottlingException2.prototype);\n        this.Message = opts.Message;\n      }\n    };\n    __name(_ThrottlingException, \"ThrottlingException\");\n    var ThrottlingException = _ThrottlingException;\n    var _ValidationException = class _ValidationException2 extends IoTWirelessServiceException {\n      constructor(opts) {\n        super({\n          name: \"ValidationException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"ValidationException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _ValidationException2.prototype);\n        this.Message = opts.Message;\n      }\n    };\n    __name(_ValidationException, \"ValidationException\");\n    var ValidationException = _ValidationException;\n    var BatteryLevel = {\n      CRITICAL: \"critical\",\n      LOW: \"low\",\n      NORMAL: \"normal\",\n    };\n    var SigningAlg = {\n      Ed25519: \"Ed25519\",\n      P256r1: \"P256r1\",\n    };\n    var ConnectionStatus = {\n      CONNECTED: \"Connected\",\n      DISCONNECTED: \"Disconnected\",\n    };\n    var EventNotificationTopicStatus = {\n      Disabled: \"Disabled\",\n      Enabled: \"Enabled\",\n    };\n    var ExpressionType = {\n      MqttTopic: \"MqttTopic\",\n      RuleName: \"RuleName\",\n    };\n    var SupportedRfRegion = {\n      AS923_1: \"AS923-1\",\n      AS923_2: \"AS923-2\",\n      AS923_3: \"AS923-3\",\n      AS923_4: \"AS923-4\",\n      AU915: \"AU915\",\n      CN470: \"CN470\",\n      CN779: \"CN779\",\n      EU433: \"EU433\",\n      EU868: \"EU868\",\n      IN865: \"IN865\",\n      KR920: \"KR920\",\n      RU864: \"RU864\",\n      US915: \"US915\",\n    };\n    var DlClass = {\n      ClassB: \"ClassB\",\n      ClassC: \"ClassC\",\n    };\n    var LogLevel = {\n      DISABLED: \"DISABLED\",\n      ERROR: \"ERROR\",\n      INFO: \"INFO\",\n    };\n    var MulticastFrameInfo = {\n      DISABLED: \"DISABLED\",\n      ENABLED: \"ENABLED\",\n    };\n    var WirelessDeviceFrameInfo = {\n      DISABLED: \"DISABLED\",\n      ENABLED: \"ENABLED\",\n    };\n    var PositioningConfigStatus = {\n      Disabled: \"Disabled\",\n      Enabled: \"Enabled\",\n    };\n    var WirelessDeviceType = {\n      LoRaWAN: \"LoRaWAN\",\n      Sidewalk: \"Sidewalk\",\n    };\n    var WirelessGatewayTaskStatus = {\n      COMPLETED: \"COMPLETED\",\n      FAILED: \"FAILED\",\n      FIRST_RETRY: \"FIRST_RETRY\",\n      IN_PROGRESS: \"IN_PROGRESS\",\n      PENDING: \"PENDING\",\n      SECOND_RETRY: \"SECOND_RETRY\",\n    };\n    var DeviceProfileType = {\n      LoRaWAN: \"LoRaWAN\",\n      Sidewalk: \"Sidewalk\",\n    };\n    var DeviceState = {\n      PROVISIONED: \"Provisioned\",\n      REGISTEREDNOTSEEN: \"RegisteredNotSeen\",\n      REGISTEREDREACHABLE: \"RegisteredReachable\",\n      REGISTEREDUNREACHABLE: \"RegisteredUnreachable\",\n    };\n    var DimensionName = {\n      DeviceId: \"DeviceId\",\n      GatewayId: \"GatewayId\",\n    };\n    var PartnerType = {\n      Sidewalk: \"Sidewalk\",\n    };\n    var DownlinkMode = {\n      CONCURRENT: \"CONCURRENT\",\n      SEQUENTIAL: \"SEQUENTIAL\",\n      USING_UPLINK_GATEWAY: \"USING_UPLINK_GATEWAY\",\n    };\n    var Event = {\n      ACK: \"ack\",\n      DISCOVERED: \"discovered\",\n      LOST: \"lost\",\n      NACK: \"nack\",\n      PASSTHROUGH: \"passthrough\",\n    };\n    var IdentifierType = {\n      DevEui: \"DevEui\",\n      GatewayEui: \"GatewayEui\",\n      PartnerAccountId: \"PartnerAccountId\",\n      WirelessDeviceId: \"WirelessDeviceId\",\n      WirelessGatewayId: \"WirelessGatewayId\",\n    };\n    var EventNotificationPartnerType = {\n      Sidewalk: \"Sidewalk\",\n    };\n    var EventNotificationResourceType = {\n      SidewalkAccount: \"SidewalkAccount\",\n      WirelessDevice: \"WirelessDevice\",\n      WirelessGateway: \"WirelessGateway\",\n    };\n    var FuotaDeviceStatus = {\n      Device_exist_in_conflict_fuota_task: \"Device_exist_in_conflict_fuota_task\",\n      FragAlgo_unsupported: \"FragAlgo_unsupported\",\n      FragIndex_unsupported: \"FragIndex_unsupported\",\n      Initial: \"Initial\",\n      MICError: \"MICError\",\n      MemoryError: \"MemoryError\",\n      MissingFrag: \"MissingFrag\",\n      Not_enough_memory: \"Not_enough_memory\",\n      Package_Not_Supported: \"Package_Not_Supported\",\n      SessionCnt_replay: \"SessionCnt_replay\",\n      Successful: \"Successful\",\n      Wrong_descriptor: \"Wrong_descriptor\",\n    };\n    var FuotaTaskStatus = {\n      Delete_Waiting: \"Delete_Waiting\",\n      FuotaDone: \"FuotaDone\",\n      FuotaSession_Waiting: \"FuotaSession_Waiting\",\n      In_FuotaSession: \"In_FuotaSession\",\n      Pending: \"Pending\",\n    };\n    var WirelessDeviceEvent = {\n      Downlink_Data: \"Downlink_Data\",\n      Join: \"Join\",\n      Registration: \"Registration\",\n      Rejoin: \"Rejoin\",\n      Uplink_Data: \"Uplink_Data\",\n    };\n    var WirelessGatewayEvent = {\n      CUPS_Request: \"CUPS_Request\",\n      Certificate: \"Certificate\",\n    };\n    var WirelessGatewayType = {\n      LoRaWAN: \"LoRaWAN\",\n    };\n    var SummaryMetricConfigurationStatus = {\n      Disabled: \"Disabled\",\n      Enabled: \"Enabled\",\n    };\n    var MetricName = {\n      AwsAccountActiveDeviceCount: \"AwsAccountActiveDeviceCount\",\n      AwsAccountActiveGatewayCount: \"AwsAccountActiveGatewayCount\",\n      AwsAccountDeviceCount: \"AwsAccountDeviceCount\",\n      AwsAccountDownlinkCount: \"AwsAccountDownlinkCount\",\n      AwsAccountGatewayCount: \"AwsAccountGatewayCount\",\n      AwsAccountJoinAcceptCount: \"AwsAccountJoinAcceptCount\",\n      AwsAccountJoinRequestCount: \"AwsAccountJoinRequestCount\",\n      AwsAccountRoamingDownlinkCount: \"AwsAccountRoamingDownlinkCount\",\n      AwsAccountRoamingUplinkCount: \"AwsAccountRoamingUplinkCount\",\n      AwsAccountUplinkCount: \"AwsAccountUplinkCount\",\n      AwsAccountUplinkLostCount: \"AwsAccountUplinkLostCount\",\n      AwsAccountUplinkLostRate: \"AwsAccountUplinkLostRate\",\n      DeviceDownlinkCount: \"DeviceDownlinkCount\",\n      DeviceJoinAcceptCount: \"DeviceJoinAcceptCount\",\n      DeviceJoinRequestCount: \"DeviceJoinRequestCount\",\n      DeviceRSSI: \"DeviceRSSI\",\n      DeviceRoamingDownlinkCount: \"DeviceRoamingDownlinkCount\",\n      DeviceRoamingRSSI: \"DeviceRoamingRSSI\",\n      DeviceRoamingSNR: \"DeviceRoamingSNR\",\n      DeviceRoamingUplinkCount: \"DeviceRoamingUplinkCount\",\n      DeviceSNR: \"DeviceSNR\",\n      DeviceUplinkCount: \"DeviceUplinkCount\",\n      DeviceUplinkLostCount: \"DeviceUplinkLostCount\",\n      DeviceUplinkLostRate: \"DeviceUplinkLostRate\",\n      GatewayDownTime: \"GatewayDownTime\",\n      GatewayDownlinkCount: \"GatewayDownlinkCount\",\n      GatewayJoinAcceptCount: \"GatewayJoinAcceptCount\",\n      GatewayJoinRequestCount: \"GatewayJoinRequestCount\",\n      GatewayRSSI: \"GatewayRSSI\",\n      GatewaySNR: \"GatewaySNR\",\n      GatewayUpTime: \"GatewayUpTime\",\n      GatewayUplinkCount: \"GatewayUplinkCount\",\n    };\n    var MetricQueryStatus = {\n      Failed: \"Failed\",\n      Succeeded: \"Succeeded\",\n    };\n    var PositionResourceType = {\n      WirelessDevice: \"WirelessDevice\",\n      WirelessGateway: \"WirelessGateway\",\n    };\n    var PositionSolverProvider = {\n      SEMTECH: \"Semtech\",\n    };\n    var PositionSolverType = {\n      GNSS: \"GNSS\",\n    };\n    var PositionConfigurationFec = {\n      NONE: \"NONE\",\n      ROSE: \"ROSE\",\n    };\n    var PositionConfigurationStatus = {\n      Disabled: \"Disabled\",\n      Enabled: \"Enabled\",\n    };\n    var WirelessGatewayServiceType = {\n      CUPS: \"CUPS\",\n      LNS: \"LNS\",\n    };\n    var WirelessDeviceIdType = {\n      DevEui: \"DevEui\",\n      SidewalkManufacturingSn: \"SidewalkManufacturingSn\",\n      ThingName: \"ThingName\",\n      WirelessDeviceId: \"WirelessDeviceId\",\n    };\n    var WirelessDeviceSidewalkStatus = {\n      ACTIVATED: \"ACTIVATED\",\n      PROVISIONED: \"PROVISIONED\",\n      REGISTERED: \"REGISTERED\",\n      UNKNOWN: \"UNKNOWN\",\n    };\n    var ImportTaskStatus = {\n      COMPLETE: \"COMPLETE\",\n      DELETING: \"DELETING\",\n      FAILED: \"FAILED\",\n      INITIALIZED: \"INITIALIZED\",\n      INITIALIZING: \"INITIALIZING\",\n      PENDING: \"PENDING\",\n    };\n    var WirelessGatewayIdType = {\n      GatewayEui: \"GatewayEui\",\n      ThingName: \"ThingName\",\n      WirelessGatewayId: \"WirelessGatewayId\",\n    };\n    var OnboardStatus = {\n      FAILED: \"FAILED\",\n      INITIALIZED: \"INITIALIZED\",\n      ONBOARDED: \"ONBOARDED\",\n      PENDING: \"PENDING\",\n    };\n    var SidewalkAccountInfoFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.AppServerPrivateKey && {\n          AppServerPrivateKey: import_smithy_client.SENSITIVE_STRING,\n        }),\n      }),\n      \"SidewalkAccountInfoFilterSensitiveLog\"\n    );\n    var AssociateAwsAccountWithPartnerAccountRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Sidewalk && { Sidewalk: SidewalkAccountInfoFilterSensitiveLog(obj.Sidewalk) }),\n      }),\n      \"AssociateAwsAccountWithPartnerAccountRequestFilterSensitiveLog\"\n    );\n    var AssociateAwsAccountWithPartnerAccountResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Sidewalk && { Sidewalk: SidewalkAccountInfoFilterSensitiveLog(obj.Sidewalk) }),\n      }),\n      \"AssociateAwsAccountWithPartnerAccountResponseFilterSensitiveLog\"\n    );\n    var SidewalkGetDeviceProfileFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.ApplicationServerPublicKey && {\n          ApplicationServerPublicKey: import_smithy_client.SENSITIVE_STRING,\n        }),\n      }),\n      \"SidewalkGetDeviceProfileFilterSensitiveLog\"\n    );\n    var GetDeviceProfileResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Sidewalk && { Sidewalk: SidewalkGetDeviceProfileFilterSensitiveLog(obj.Sidewalk) }),\n      }),\n      \"GetDeviceProfileResponseFilterSensitiveLog\"\n    );\n    var SidewalkAccountInfoWithFingerprintFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Fingerprint && { Fingerprint: import_smithy_client.SENSITIVE_STRING }),\n      }),\n      \"SidewalkAccountInfoWithFingerprintFilterSensitiveLog\"\n    );\n    var GetPartnerAccountResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Sidewalk && {\n          Sidewalk: SidewalkAccountInfoWithFingerprintFilterSensitiveLog(obj.Sidewalk),\n        }),\n      }),\n      \"GetPartnerAccountResponseFilterSensitiveLog\"\n    );\n    var ListPartnerAccountsResponseFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Sidewalk && {\n          Sidewalk: obj.Sidewalk.map((item) =>\n            SidewalkAccountInfoWithFingerprintFilterSensitiveLog(item)\n          ),\n        }),\n      }),\n      \"ListPartnerAccountsResponseFilterSensitiveLog\"\n    );\n    var import_core2 = require_dist_cjs37();\n    var import_uuid = require_dist();\n    var WirelessGatewayTaskDefinitionType = {\n      UPDATE: \"UPDATE\",\n    };\n    var MessageType = {\n      CUSTOM_COMMAND_ID_GET: \"CUSTOM_COMMAND_ID_GET\",\n      CUSTOM_COMMAND_ID_NOTIFY: \"CUSTOM_COMMAND_ID_NOTIFY\",\n      CUSTOM_COMMAND_ID_RESP: \"CUSTOM_COMMAND_ID_RESP\",\n      CUSTOM_COMMAND_ID_SET: \"CUSTOM_COMMAND_ID_SET\",\n    };\n    var _TooManyTagsException = class _TooManyTagsException2 extends IoTWirelessServiceException {\n      constructor(opts) {\n        super({\n          name: \"TooManyTagsException\",\n          $fault: \"client\",\n          ...opts,\n        });\n        this.name = \"TooManyTagsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, _TooManyTagsException2.prototype);\n        this.Message = opts.Message;\n        this.ResourceName = opts.ResourceName;\n      }\n    };\n    __name(_TooManyTagsException, \"TooManyTagsException\");\n    var TooManyTagsException = _TooManyTagsException;\n    var SidewalkUpdateAccountFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.AppServerPrivateKey && {\n          AppServerPrivateKey: import_smithy_client.SENSITIVE_STRING,\n        }),\n      }),\n      \"SidewalkUpdateAccountFilterSensitiveLog\"\n    );\n    var UpdatePartnerAccountRequestFilterSensitiveLog = /* @__PURE__ */ __name(\n      (obj) => ({\n        ...obj,\n        ...(obj.Sidewalk && { Sidewalk: SidewalkUpdateAccountFilterSensitiveLog(obj.Sidewalk) }),\n      }),\n      \"UpdatePartnerAccountRequestFilterSensitiveLog\"\n    );\n    var se_AssociateAwsAccountWithPartnerAccountCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/partner-accounts\");\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n            Sidewalk: (_) => (0, import_smithy_client._json)(_),\n            Tags: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"POST\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_AssociateAwsAccountWithPartnerAccountCommand\"\n    );\n    var se_AssociateMulticastGroupWithFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/fuota-tasks/{Id}/multicast-group\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            MulticastGroupId: [],\n          })\n        );\n        b.m(\"PUT\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_AssociateMulticastGroupWithFuotaTaskCommand\"\n    );\n    var se_AssociateWirelessDeviceWithFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/fuota-tasks/{Id}/wireless-device\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            WirelessDeviceId: [],\n          })\n        );\n        b.m(\"PUT\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_AssociateWirelessDeviceWithFuotaTaskCommand\"\n    );\n    var se_AssociateWirelessDeviceWithMulticastGroupCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/multicast-groups/{Id}/wireless-device\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            WirelessDeviceId: [],\n          })\n        );\n        b.m(\"PUT\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_AssociateWirelessDeviceWithMulticastGroupCommand\"\n    );\n    var se_AssociateWirelessDeviceWithThingCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/wireless-devices/{Id}/thing\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            ThingArn: [],\n          })\n        );\n        b.m(\"PUT\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_AssociateWirelessDeviceWithThingCommand\"\n    );\n    var se_AssociateWirelessGatewayWithCertificateCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/wireless-gateways/{Id}/certificate\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            IotCertificateId: [],\n          })\n        );\n        b.m(\"PUT\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_AssociateWirelessGatewayWithCertificateCommand\"\n    );\n    var se_AssociateWirelessGatewayWithThingCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/wireless-gateways/{Id}/thing\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            ThingArn: [],\n          })\n        );\n        b.m(\"PUT\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_AssociateWirelessGatewayWithThingCommand\"\n    );\n    var se_CancelMulticastGroupSessionCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/multicast-groups/{Id}/session\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_CancelMulticastGroupSessionCommand\");\n    var se_CreateDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/destinations\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n          Description: [],\n          Expression: [],\n          ExpressionType: [],\n          Name: [],\n          RoleArn: [],\n          Tags: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateDestinationCommand\");\n    var se_CreateDeviceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/device-profiles\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n          LoRaWAN: (_) => (0, import_smithy_client._json)(_),\n          Name: [],\n          Sidewalk: (_) => (0, import_smithy_client._json)(_),\n          Tags: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateDeviceProfileCommand\");\n    var se_CreateFuotaTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/fuota-tasks\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n          Description: [],\n          FirmwareUpdateImage: [],\n          FirmwareUpdateRole: [],\n          FragmentIntervalMS: [],\n          FragmentSizeBytes: [],\n          LoRaWAN: (_) => (0, import_smithy_client._json)(_),\n          Name: [],\n          RedundancyPercent: [],\n          Tags: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateFuotaTaskCommand\");\n    var se_CreateMulticastGroupCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/multicast-groups\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n          Description: [],\n          LoRaWAN: (_) => (0, import_smithy_client._json)(_),\n          Name: [],\n          Tags: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateMulticastGroupCommand\");\n    var se_CreateNetworkAnalyzerConfigurationCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/network-analyzer-configurations\");\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n            Description: [],\n            MulticastGroups: (_) => (0, import_smithy_client._json)(_),\n            Name: [],\n            Tags: (_) => (0, import_smithy_client._json)(_),\n            TraceContent: (_) => (0, import_smithy_client._json)(_),\n            WirelessDevices: (_) => (0, import_smithy_client._json)(_),\n            WirelessGateways: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"POST\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_CreateNetworkAnalyzerConfigurationCommand\"\n    );\n    var se_CreateServiceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/service-profiles\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n          LoRaWAN: (_) => (0, import_smithy_client._json)(_),\n          Name: [],\n          Tags: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateServiceProfileCommand\");\n    var se_CreateWirelessDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/wireless-devices\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n          Description: [],\n          DestinationName: [],\n          LoRaWAN: (_) => (0, import_smithy_client._json)(_),\n          Name: [],\n          Positioning: [],\n          Sidewalk: (_) => (0, import_smithy_client._json)(_),\n          Tags: (_) => (0, import_smithy_client._json)(_),\n          Type: [],\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateWirelessDeviceCommand\");\n    var se_CreateWirelessGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/wireless-gateways\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n          Description: [],\n          LoRaWAN: (_) => se_LoRaWANGateway(_, context),\n          Name: [],\n          Tags: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateWirelessGatewayCommand\");\n    var se_CreateWirelessGatewayTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/wireless-gateways/{Id}/tasks\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          WirelessGatewayTaskDefinitionId: [],\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_CreateWirelessGatewayTaskCommand\");\n    var se_CreateWirelessGatewayTaskDefinitionCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/wireless-gateway-task-definitions\");\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            AutoCreateTasks: [],\n            ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n            Name: [],\n            Tags: (_) => (0, import_smithy_client._json)(_),\n            Update: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"POST\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_CreateWirelessGatewayTaskDefinitionCommand\"\n    );\n    var se_DeleteDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/destinations/{Name}\");\n      b.p(\"Name\", () => input.Name, \"{Name}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_DeleteDestinationCommand\");\n    var se_DeleteDeviceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/device-profiles/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_DeleteDeviceProfileCommand\");\n    var se_DeleteFuotaTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/fuota-tasks/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_DeleteFuotaTaskCommand\");\n    var se_DeleteMulticastGroupCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/multicast-groups/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_DeleteMulticastGroupCommand\");\n    var se_DeleteNetworkAnalyzerConfigurationCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/network-analyzer-configurations/{ConfigurationName}\");\n        b.p(\"ConfigurationName\", () => input.ConfigurationName, \"{ConfigurationName}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DeleteNetworkAnalyzerConfigurationCommand\"\n    );\n    var se_DeleteQueuedMessagesCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-devices/{Id}/data\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_mI]: [, (0, import_smithy_client.expectNonNull)(input[_MI], `MessageId`)],\n        [_WDT]: [, input[_WDT]],\n      });\n      let body;\n      b.m(\"DELETE\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_DeleteQueuedMessagesCommand\");\n    var se_DeleteServiceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/service-profiles/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_DeleteServiceProfileCommand\");\n    var se_DeleteWirelessDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-devices/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_DeleteWirelessDeviceCommand\");\n    var se_DeleteWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless_device_import_task/{Id}\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DeleteWirelessDeviceImportTaskCommand\"\n    );\n    var se_DeleteWirelessGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-gateways/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_DeleteWirelessGatewayCommand\");\n    var se_DeleteWirelessGatewayTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-gateways/{Id}/tasks\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_DeleteWirelessGatewayTaskCommand\");\n    var se_DeleteWirelessGatewayTaskDefinitionCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless-gateway-task-definitions/{Id}\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DeleteWirelessGatewayTaskDefinitionCommand\"\n    );\n    var se_DeregisterWirelessDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-devices/{Identifier}/deregister\");\n      b.p(\"Identifier\", () => input.Identifier, \"{Identifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_WDT]: [, input[_WDT]],\n      });\n      let body;\n      b.m(\"PATCH\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_DeregisterWirelessDeviceCommand\");\n    var se_DisassociateAwsAccountFromPartnerAccountCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/partner-accounts/{PartnerAccountId}\");\n        b.p(\"PartnerAccountId\", () => input.PartnerAccountId, \"{PartnerAccountId}\", false);\n        const query = (0, import_smithy_client.map)({\n          [_pT]: [, (0, import_smithy_client.expectNonNull)(input[_PT], `PartnerType`)],\n        });\n        let body;\n        b.m(\"DELETE\").h(headers).q(query).b(body);\n        return b.build();\n      },\n      \"se_DisassociateAwsAccountFromPartnerAccountCommand\"\n    );\n    var se_DisassociateMulticastGroupFromFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/fuota-tasks/{Id}/multicast-groups/{MulticastGroupId}\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        b.p(\"MulticastGroupId\", () => input.MulticastGroupId, \"{MulticastGroupId}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DisassociateMulticastGroupFromFuotaTaskCommand\"\n    );\n    var se_DisassociateWirelessDeviceFromFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/fuota-tasks/{Id}/wireless-devices/{WirelessDeviceId}\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        b.p(\"WirelessDeviceId\", () => input.WirelessDeviceId, \"{WirelessDeviceId}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DisassociateWirelessDeviceFromFuotaTaskCommand\"\n    );\n    var se_DisassociateWirelessDeviceFromMulticastGroupCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/multicast-groups/{Id}/wireless-devices/{WirelessDeviceId}\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        b.p(\"WirelessDeviceId\", () => input.WirelessDeviceId, \"{WirelessDeviceId}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DisassociateWirelessDeviceFromMulticastGroupCommand\"\n    );\n    var se_DisassociateWirelessDeviceFromThingCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless-devices/{Id}/thing\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DisassociateWirelessDeviceFromThingCommand\"\n    );\n    var se_DisassociateWirelessGatewayFromCertificateCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless-gateways/{Id}/certificate\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DisassociateWirelessGatewayFromCertificateCommand\"\n    );\n    var se_DisassociateWirelessGatewayFromThingCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless-gateways/{Id}/thing\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        b.m(\"DELETE\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_DisassociateWirelessGatewayFromThingCommand\"\n    );\n    var se_GetDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/destinations/{Name}\");\n      b.p(\"Name\", () => input.Name, \"{Name}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetDestinationCommand\");\n    var se_GetDeviceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/device-profiles/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetDeviceProfileCommand\");\n    var se_GetEventConfigurationByResourceTypesCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/event-configurations-resource-types\");\n        let body;\n        body = \"\";\n        b.m(\"GET\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_GetEventConfigurationByResourceTypesCommand\"\n    );\n    var se_GetFuotaTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/fuota-tasks/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetFuotaTaskCommand\");\n    var se_GetLogLevelsByResourceTypesCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/log-levels\");\n      let body;\n      body = \"\";\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetLogLevelsByResourceTypesCommand\");\n    var se_GetMetricConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/metric-configuration\");\n      let body;\n      body = \"\";\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetMetricConfigurationCommand\");\n    var se_GetMetricsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/metrics\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          SummaryMetricQueries: (_) => se_SummaryMetricQueries(_, context),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetMetricsCommand\");\n    var se_GetMulticastGroupCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/multicast-groups/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetMulticastGroupCommand\");\n    var se_GetMulticastGroupSessionCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/multicast-groups/{Id}/session\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetMulticastGroupSessionCommand\");\n    var se_GetNetworkAnalyzerConfigurationCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/network-analyzer-configurations/{ConfigurationName}\");\n        b.p(\"ConfigurationName\", () => input.ConfigurationName, \"{ConfigurationName}\", false);\n        let body;\n        b.m(\"GET\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_GetNetworkAnalyzerConfigurationCommand\"\n    );\n    var se_GetPartnerAccountCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/partner-accounts/{PartnerAccountId}\");\n      b.p(\"PartnerAccountId\", () => input.PartnerAccountId, \"{PartnerAccountId}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_pT]: [, (0, import_smithy_client.expectNonNull)(input[_PT], `PartnerType`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetPartnerAccountCommand\");\n    var se_GetPositionCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/positions/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetPositionCommand\");\n    var se_GetPositionConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/position-configurations/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetPositionConfigurationCommand\");\n    var se_GetPositionEstimateCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/position-estimate\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          CellTowers: (_) => se_CellTowers(_, context),\n          Gnss: (_) => se_Gnss(_, context),\n          Ip: (_) => (0, import_smithy_client._json)(_),\n          Timestamp: (_) => _.getTime() / 1e3,\n          WiFiAccessPoints: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetPositionEstimateCommand\");\n    var se_GetResourceEventConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/event-configurations/{Identifier}\");\n      b.p(\"Identifier\", () => input.Identifier, \"{Identifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_iT]: [, (0, import_smithy_client.expectNonNull)(input[_IT], `IdentifierType`)],\n        [_pT]: [, input[_PT]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetResourceEventConfigurationCommand\");\n    var se_GetResourceLogLevelCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/log-levels/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetResourceLogLevelCommand\");\n    var se_GetResourcePositionCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/resource-positions/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetResourcePositionCommand\");\n    var se_GetServiceEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/service-endpoint\");\n      const query = (0, import_smithy_client.map)({\n        [_sT]: [, input[_ST]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetServiceEndpointCommand\");\n    var se_GetServiceProfileCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/service-profiles/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetServiceProfileCommand\");\n    var se_GetWirelessDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-devices/{Identifier}\");\n      b.p(\"Identifier\", () => input.Identifier, \"{Identifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_iT]: [, (0, import_smithy_client.expectNonNull)(input[_IT], `IdentifierType`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetWirelessDeviceCommand\");\n    var se_GetWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless_device_import_task/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetWirelessDeviceImportTaskCommand\");\n    var se_GetWirelessDeviceStatisticsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-devices/{WirelessDeviceId}/statistics\");\n      b.p(\"WirelessDeviceId\", () => input.WirelessDeviceId, \"{WirelessDeviceId}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetWirelessDeviceStatisticsCommand\");\n    var se_GetWirelessGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-gateways/{Identifier}\");\n      b.p(\"Identifier\", () => input.Identifier, \"{Identifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_iT]: [, (0, import_smithy_client.expectNonNull)(input[_IT], `IdentifierType`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_GetWirelessGatewayCommand\");\n    var se_GetWirelessGatewayCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-gateways/{Id}/certificate\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetWirelessGatewayCertificateCommand\");\n    var se_GetWirelessGatewayFirmwareInformationCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless-gateways/{Id}/firmware-information\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        b.m(\"GET\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_GetWirelessGatewayFirmwareInformationCommand\"\n    );\n    var se_GetWirelessGatewayStatisticsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-gateways/{WirelessGatewayId}/statistics\");\n      b.p(\"WirelessGatewayId\", () => input.WirelessGatewayId, \"{WirelessGatewayId}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetWirelessGatewayStatisticsCommand\");\n    var se_GetWirelessGatewayTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-gateways/{Id}/tasks\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"GET\").h(headers).b(body);\n      return b.build();\n    }, \"se_GetWirelessGatewayTaskCommand\");\n    var se_GetWirelessGatewayTaskDefinitionCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless-gateway-task-definitions/{Id}\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        b.m(\"GET\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_GetWirelessGatewayTaskDefinitionCommand\"\n    );\n    var se_ListDestinationsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/destinations\");\n      const query = (0, import_smithy_client.map)({\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n        [_nT]: [, input[_NT]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListDestinationsCommand\");\n    var se_ListDeviceProfilesCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/device-profiles\");\n      const query = (0, import_smithy_client.map)({\n        [_nT]: [, input[_NT]],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n        [_dPT]: [, input[_DPT]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListDeviceProfilesCommand\");\n    var se_ListDevicesForWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless_device_import_task\");\n        const query = (0, import_smithy_client.map)({\n          [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)],\n          [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n          [_nT]: [, input[_NT]],\n          [_s]: [, input[_S]],\n        });\n        let body;\n        b.m(\"GET\").h(headers).q(query).b(body);\n        return b.build();\n      },\n      \"se_ListDevicesForWirelessDeviceImportTaskCommand\"\n    );\n    var se_ListEventConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/event-configurations\");\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n        [_nT]: [, input[_NT]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListEventConfigurationsCommand\");\n    var se_ListFuotaTasksCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/fuota-tasks\");\n      const query = (0, import_smithy_client.map)({\n        [_nT]: [, input[_NT]],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListFuotaTasksCommand\");\n    var se_ListMulticastGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/multicast-groups\");\n      const query = (0, import_smithy_client.map)({\n        [_nT]: [, input[_NT]],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListMulticastGroupsCommand\");\n    var se_ListMulticastGroupsByFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/fuota-tasks/{Id}/multicast-groups\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        const query = (0, import_smithy_client.map)({\n          [_nT]: [, input[_NT]],\n          [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n        });\n        let body;\n        b.m(\"GET\").h(headers).q(query).b(body);\n        return b.build();\n      },\n      \"se_ListMulticastGroupsByFuotaTaskCommand\"\n    );\n    var se_ListNetworkAnalyzerConfigurationsCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/network-analyzer-configurations\");\n        const query = (0, import_smithy_client.map)({\n          [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n          [_nT]: [, input[_NT]],\n        });\n        let body;\n        b.m(\"GET\").h(headers).q(query).b(body);\n        return b.build();\n      },\n      \"se_ListNetworkAnalyzerConfigurationsCommand\"\n    );\n    var se_ListPartnerAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/partner-accounts\");\n      const query = (0, import_smithy_client.map)({\n        [_nT]: [, input[_NT]],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListPartnerAccountsCommand\");\n    var se_ListPositionConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/position-configurations\");\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, input[_RT]],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n        [_nT]: [, input[_NT]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListPositionConfigurationsCommand\");\n    var se_ListQueuedMessagesCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-devices/{Id}/data\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_nT]: [, input[_NT]],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n        [_WDT]: [, input[_WDT]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListQueuedMessagesCommand\");\n    var se_ListServiceProfilesCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/service-profiles\");\n      const query = (0, import_smithy_client.map)({\n        [_nT]: [, input[_NT]],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListServiceProfilesCommand\");\n    var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/tags\");\n      const query = (0, import_smithy_client.map)({\n        [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_RA], `ResourceArn`)],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListTagsForResourceCommand\");\n    var se_ListWirelessDeviceImportTasksCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless_device_import_tasks\");\n      const query = (0, import_smithy_client.map)({\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n        [_nT]: [, input[_NT]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListWirelessDeviceImportTasksCommand\");\n    var se_ListWirelessDevicesCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-devices\");\n      const query = (0, import_smithy_client.map)({\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n        [_nT]: [, input[_NT]],\n        [_dN]: [, input[_DN]],\n        [_dPI]: [, input[_DPI]],\n        [_sPI]: [, input[_SPI]],\n        [_wDT]: [, input[_WDT]],\n        [_fTI]: [, input[_FTI]],\n        [_mGI]: [, input[_MGI]],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListWirelessDevicesCommand\");\n    var se_ListWirelessGatewaysCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-gateways\");\n      const query = (0, import_smithy_client.map)({\n        [_nT]: [, input[_NT]],\n        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n      });\n      let body;\n      b.m(\"GET\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ListWirelessGatewaysCommand\");\n    var se_ListWirelessGatewayTaskDefinitionsCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {};\n        b.bp(\"/wireless-gateway-task-definitions\");\n        const query = (0, import_smithy_client.map)({\n          [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],\n          [_nT]: [, input[_NT]],\n          [_tDT]: [, input[_TDT]],\n        });\n        let body;\n        b.m(\"GET\").h(headers).q(query).b(body);\n        return b.build();\n      },\n      \"se_ListWirelessGatewayTaskDefinitionsCommand\"\n    );\n    var se_PutPositionConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/position-configurations/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Destination: [],\n          Solvers: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"PUT\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_PutPositionConfigurationCommand\");\n    var se_PutResourceLogLevelCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/log-levels/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          LogLevel: [],\n        })\n      );\n      b.m(\"PUT\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_PutResourceLogLevelCommand\");\n    var se_ResetAllResourceLogLevelsCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/log-levels\");\n      let body;\n      body = \"\";\n      b.m(\"DELETE\").h(headers).b(body);\n      return b.build();\n    }, \"se_ResetAllResourceLogLevelsCommand\");\n    var se_ResetResourceLogLevelCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/log-levels/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      b.m(\"DELETE\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_ResetResourceLogLevelCommand\");\n    var se_SendDataToMulticastGroupCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/multicast-groups/{Id}/data\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          PayloadData: [],\n          WirelessMetadata: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_SendDataToMulticastGroupCommand\");\n    var se_SendDataToWirelessDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/wireless-devices/{Id}/data\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          PayloadData: [],\n          TransmitMode: [],\n          WirelessMetadata: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_SendDataToWirelessDeviceCommand\");\n    var se_StartBulkAssociateWirelessDeviceWithMulticastGroupCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/multicast-groups/{Id}/bulk\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            QueryString: [],\n            Tags: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"PATCH\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_StartBulkAssociateWirelessDeviceWithMulticastGroupCommand\"\n    );\n    var se_StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/multicast-groups/{Id}/bulk\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            QueryString: [],\n            Tags: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"POST\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand\"\n    );\n    var se_StartFuotaTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/fuota-tasks/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          LoRaWAN: (_) => se_LoRaWANStartFuotaTask(_, context),\n        })\n      );\n      b.m(\"PUT\").h(headers).b(body);\n      return b.build();\n    }, \"se_StartFuotaTaskCommand\");\n    var se_StartMulticastGroupSessionCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/multicast-groups/{Id}/session\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          LoRaWAN: (_) => se_LoRaWANMulticastSession(_, context),\n        })\n      );\n      b.m(\"PUT\").h(headers).b(body);\n      return b.build();\n    }, \"se_StartMulticastGroupSessionCommand\");\n    var se_StartSingleWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/wireless_single_device_import_task\");\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n            DestinationName: [],\n            DeviceName: [],\n            Sidewalk: (_) => (0, import_smithy_client._json)(_),\n            Tags: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"POST\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_StartSingleWirelessDeviceImportTaskCommand\"\n    );\n    var se_StartWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/wireless_device_import_task\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          ClientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],\n          DestinationName: [],\n          Sidewalk: (_) => (0, import_smithy_client._json)(_),\n          Tags: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_StartWirelessDeviceImportTaskCommand\");\n    var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/tags\");\n      const query = (0, import_smithy_client.map)({\n        [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_RA], `ResourceArn`)],\n      });\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Tags: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"POST\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_TagResourceCommand\");\n    var se_TestWirelessDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/wireless-devices/{Id}/test\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      b.m(\"POST\").h(headers).b(body);\n      return b.build();\n    }, \"se_TestWirelessDeviceCommand\");\n    var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {};\n      b.bp(\"/tags\");\n      const query = (0, import_smithy_client.map)({\n        [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_RA], `ResourceArn`)],\n        [_tK]: [\n          (0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null,\n          () => (input[_TK] || []).map((_entry) => _entry),\n        ],\n      });\n      let body;\n      b.m(\"DELETE\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_UntagResourceCommand\");\n    var se_UpdateDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/destinations/{Name}\");\n      b.p(\"Name\", () => input.Name, \"{Name}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Description: [],\n          Expression: [],\n          ExpressionType: [],\n          RoleArn: [],\n        })\n      );\n      b.m(\"PATCH\").h(headers).b(body);\n      return b.build();\n    }, \"se_UpdateDestinationCommand\");\n    var se_UpdateEventConfigurationByResourceTypesCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/event-configurations-resource-types\");\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            ConnectionStatus: (_) => (0, import_smithy_client._json)(_),\n            DeviceRegistrationState: (_) => (0, import_smithy_client._json)(_),\n            Join: (_) => (0, import_smithy_client._json)(_),\n            MessageDeliveryStatus: (_) => (0, import_smithy_client._json)(_),\n            Proximity: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"PATCH\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_UpdateEventConfigurationByResourceTypesCommand\"\n    );\n    var se_UpdateFuotaTaskCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/fuota-tasks/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Description: [],\n          FirmwareUpdateImage: [],\n          FirmwareUpdateRole: [],\n          FragmentIntervalMS: [],\n          FragmentSizeBytes: [],\n          LoRaWAN: (_) => (0, import_smithy_client._json)(_),\n          Name: [],\n          RedundancyPercent: [],\n        })\n      );\n      b.m(\"PATCH\").h(headers).b(body);\n      return b.build();\n    }, \"se_UpdateFuotaTaskCommand\");\n    var se_UpdateLogLevelsByResourceTypesCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/log-levels\");\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            DefaultLogLevel: [],\n            WirelessDeviceLogOptions: (_) => (0, import_smithy_client._json)(_),\n            WirelessGatewayLogOptions: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"POST\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_UpdateLogLevelsByResourceTypesCommand\"\n    );\n    var se_UpdateMetricConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/metric-configuration\");\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          SummaryMetric: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"PUT\").h(headers).b(body);\n      return b.build();\n    }, \"se_UpdateMetricConfigurationCommand\");\n    var se_UpdateMulticastGroupCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/multicast-groups/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Description: [],\n          LoRaWAN: (_) => (0, import_smithy_client._json)(_),\n          Name: [],\n        })\n      );\n      b.m(\"PATCH\").h(headers).b(body);\n      return b.build();\n    }, \"se_UpdateMulticastGroupCommand\");\n    var se_UpdateNetworkAnalyzerConfigurationCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/network-analyzer-configurations/{ConfigurationName}\");\n        b.p(\"ConfigurationName\", () => input.ConfigurationName, \"{ConfigurationName}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            Description: [],\n            MulticastGroupsToAdd: (_) => (0, import_smithy_client._json)(_),\n            MulticastGroupsToRemove: (_) => (0, import_smithy_client._json)(_),\n            TraceContent: (_) => (0, import_smithy_client._json)(_),\n            WirelessDevicesToAdd: (_) => (0, import_smithy_client._json)(_),\n            WirelessDevicesToRemove: (_) => (0, import_smithy_client._json)(_),\n            WirelessGatewaysToAdd: (_) => (0, import_smithy_client._json)(_),\n            WirelessGatewaysToRemove: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"PATCH\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_UpdateNetworkAnalyzerConfigurationCommand\"\n    );\n    var se_UpdatePartnerAccountCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/partner-accounts/{PartnerAccountId}\");\n      b.p(\"PartnerAccountId\", () => input.PartnerAccountId, \"{PartnerAccountId}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_pT]: [, (0, import_smithy_client.expectNonNull)(input[_PT], `PartnerType`)],\n      });\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Sidewalk: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"PATCH\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_UpdatePartnerAccountCommand\");\n    var se_UpdatePositionCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/positions/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Position: (_) => se_PositionCoordinate(_, context),\n        })\n      );\n      b.m(\"PATCH\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_UpdatePositionCommand\");\n    var se_UpdateResourceEventConfigurationCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/event-configurations/{Identifier}\");\n        b.p(\"Identifier\", () => input.Identifier, \"{Identifier}\", false);\n        const query = (0, import_smithy_client.map)({\n          [_iT]: [, (0, import_smithy_client.expectNonNull)(input[_IT], `IdentifierType`)],\n          [_pT]: [, input[_PT]],\n        });\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            ConnectionStatus: (_) => (0, import_smithy_client._json)(_),\n            DeviceRegistrationState: (_) => (0, import_smithy_client._json)(_),\n            Join: (_) => (0, import_smithy_client._json)(_),\n            MessageDeliveryStatus: (_) => (0, import_smithy_client._json)(_),\n            Proximity: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"PATCH\").h(headers).q(query).b(body);\n        return b.build();\n      },\n      \"se_UpdateResourceEventConfigurationCommand\"\n    );\n    var se_UpdateResourcePositionCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/octet-stream\",\n      };\n      b.bp(\"/resource-positions/{ResourceIdentifier}\");\n      b.p(\"ResourceIdentifier\", () => input.ResourceIdentifier, \"{ResourceIdentifier}\", false);\n      const query = (0, import_smithy_client.map)({\n        [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_RT], `ResourceType`)],\n      });\n      let body;\n      if (input.GeoJsonPayload !== void 0) {\n        body = input.GeoJsonPayload;\n      }\n      b.m(\"PATCH\").h(headers).q(query).b(body);\n      return b.build();\n    }, \"se_UpdateResourcePositionCommand\");\n    var se_UpdateWirelessDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/wireless-devices/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Description: [],\n          DestinationName: [],\n          LoRaWAN: (_) => (0, import_smithy_client._json)(_),\n          Name: [],\n          Positioning: [],\n        })\n      );\n      b.m(\"PATCH\").h(headers).b(body);\n      return b.build();\n    }, \"se_UpdateWirelessDeviceCommand\");\n    var se_UpdateWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (input, context) => {\n        const b = (0, import_core.requestBuilder)(input, context);\n        const headers = {\n          \"content-type\": \"application/json\",\n        };\n        b.bp(\"/wireless_device_import_task/{Id}\");\n        b.p(\"Id\", () => input.Id, \"{Id}\", false);\n        let body;\n        body = JSON.stringify(\n          (0, import_smithy_client.take)(input, {\n            Sidewalk: (_) => (0, import_smithy_client._json)(_),\n          })\n        );\n        b.m(\"PATCH\").h(headers).b(body);\n        return b.build();\n      },\n      \"se_UpdateWirelessDeviceImportTaskCommand\"\n    );\n    var se_UpdateWirelessGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {\n      const b = (0, import_core.requestBuilder)(input, context);\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      b.bp(\"/wireless-gateways/{Id}\");\n      b.p(\"Id\", () => input.Id, \"{Id}\", false);\n      let body;\n      body = JSON.stringify(\n        (0, import_smithy_client.take)(input, {\n          Description: [],\n          JoinEuiFilters: (_) => (0, import_smithy_client._json)(_),\n          MaxEirp: (_) => (0, import_smithy_client.serializeFloat)(_),\n          Name: [],\n          NetIdFilters: (_) => (0, import_smithy_client._json)(_),\n        })\n      );\n      b.m(\"PATCH\").h(headers).b(body);\n      return b.build();\n    }, \"se_UpdateWirelessGatewayCommand\");\n    var de_AssociateAwsAccountWithPartnerAccountCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          Arn: import_smithy_client.expectString,\n          Sidewalk: import_smithy_client._json,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_AssociateAwsAccountWithPartnerAccountCommand\"\n    );\n    var de_AssociateMulticastGroupWithFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_AssociateMulticastGroupWithFuotaTaskCommand\"\n    );\n    var de_AssociateWirelessDeviceWithFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_AssociateWirelessDeviceWithFuotaTaskCommand\"\n    );\n    var de_AssociateWirelessDeviceWithMulticastGroupCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_AssociateWirelessDeviceWithMulticastGroupCommand\"\n    );\n    var de_AssociateWirelessDeviceWithThingCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_AssociateWirelessDeviceWithThingCommand\"\n    );\n    var de_AssociateWirelessGatewayWithCertificateCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          IotCertificateId: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_AssociateWirelessGatewayWithCertificateCommand\"\n    );\n    var de_AssociateWirelessGatewayWithThingCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_AssociateWirelessGatewayWithThingCommand\"\n    );\n    var de_CancelMulticastGroupSessionCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_CancelMulticastGroupSessionCommand\");\n    var de_CreateDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Name: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateDestinationCommand\");\n    var de_CreateDeviceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateDeviceProfileCommand\");\n    var de_CreateFuotaTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateFuotaTaskCommand\");\n    var de_CreateMulticastGroupCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateMulticastGroupCommand\");\n    var de_CreateNetworkAnalyzerConfigurationCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 201 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          Arn: import_smithy_client.expectString,\n          Name: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_CreateNetworkAnalyzerConfigurationCommand\"\n    );\n    var de_CreateServiceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateServiceProfileCommand\");\n    var de_CreateWirelessDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateWirelessDeviceCommand\");\n    var de_CreateWirelessGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateWirelessGatewayCommand\");\n    var de_CreateWirelessGatewayTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Status: import_smithy_client.expectString,\n        WirelessGatewayTaskDefinitionId: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_CreateWirelessGatewayTaskCommand\");\n    var de_CreateWirelessGatewayTaskDefinitionCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 201 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          Arn: import_smithy_client.expectString,\n          Id: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_CreateWirelessGatewayTaskDefinitionCommand\"\n    );\n    var de_DeleteDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteDestinationCommand\");\n    var de_DeleteDeviceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteDeviceProfileCommand\");\n    var de_DeleteFuotaTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteFuotaTaskCommand\");\n    var de_DeleteMulticastGroupCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteMulticastGroupCommand\");\n    var de_DeleteNetworkAnalyzerConfigurationCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DeleteNetworkAnalyzerConfigurationCommand\"\n    );\n    var de_DeleteQueuedMessagesCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteQueuedMessagesCommand\");\n    var de_DeleteServiceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteServiceProfileCommand\");\n    var de_DeleteWirelessDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteWirelessDeviceCommand\");\n    var de_DeleteWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DeleteWirelessDeviceImportTaskCommand\"\n    );\n    var de_DeleteWirelessGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteWirelessGatewayCommand\");\n    var de_DeleteWirelessGatewayTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeleteWirelessGatewayTaskCommand\");\n    var de_DeleteWirelessGatewayTaskDefinitionCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DeleteWirelessGatewayTaskDefinitionCommand\"\n    );\n    var de_DeregisterWirelessDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_DeregisterWirelessDeviceCommand\");\n    var de_DisassociateAwsAccountFromPartnerAccountCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DisassociateAwsAccountFromPartnerAccountCommand\"\n    );\n    var de_DisassociateMulticastGroupFromFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DisassociateMulticastGroupFromFuotaTaskCommand\"\n    );\n    var de_DisassociateWirelessDeviceFromFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DisassociateWirelessDeviceFromFuotaTaskCommand\"\n    );\n    var de_DisassociateWirelessDeviceFromMulticastGroupCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DisassociateWirelessDeviceFromMulticastGroupCommand\"\n    );\n    var de_DisassociateWirelessDeviceFromThingCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DisassociateWirelessDeviceFromThingCommand\"\n    );\n    var de_DisassociateWirelessGatewayFromCertificateCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DisassociateWirelessGatewayFromCertificateCommand\"\n    );\n    var de_DisassociateWirelessGatewayFromThingCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_DisassociateWirelessGatewayFromThingCommand\"\n    );\n    var de_GetDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Description: import_smithy_client.expectString,\n        Expression: import_smithy_client.expectString,\n        ExpressionType: import_smithy_client.expectString,\n        Name: import_smithy_client.expectString,\n        RoleArn: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetDestinationCommand\");\n    var de_GetDeviceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n        LoRaWAN: import_smithy_client._json,\n        Name: import_smithy_client.expectString,\n        Sidewalk: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetDeviceProfileCommand\");\n    var de_GetEventConfigurationByResourceTypesCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          ConnectionStatus: import_smithy_client._json,\n          DeviceRegistrationState: import_smithy_client._json,\n          Join: import_smithy_client._json,\n          MessageDeliveryStatus: import_smithy_client._json,\n          Proximity: import_smithy_client._json,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_GetEventConfigurationByResourceTypesCommand\"\n    );\n    var de_GetFuotaTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        CreatedAt: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))\n          ),\n        Description: import_smithy_client.expectString,\n        FirmwareUpdateImage: import_smithy_client.expectString,\n        FirmwareUpdateRole: import_smithy_client.expectString,\n        FragmentIntervalMS: import_smithy_client.expectInt32,\n        FragmentSizeBytes: import_smithy_client.expectInt32,\n        Id: import_smithy_client.expectString,\n        LoRaWAN: (_) => de_LoRaWANFuotaTaskGetInfo(_, context),\n        Name: import_smithy_client.expectString,\n        RedundancyPercent: import_smithy_client.expectInt32,\n        Status: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetFuotaTaskCommand\");\n    var de_GetLogLevelsByResourceTypesCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        DefaultLogLevel: import_smithy_client.expectString,\n        WirelessDeviceLogOptions: import_smithy_client._json,\n        WirelessGatewayLogOptions: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetLogLevelsByResourceTypesCommand\");\n    var de_GetMetricConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        SummaryMetric: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetMetricConfigurationCommand\");\n    var de_GetMetricsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        SummaryMetricQueryResults: (_) => de_SummaryMetricQueryResults(_, context),\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetMetricsCommand\");\n    var de_GetMulticastGroupCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        CreatedAt: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))\n          ),\n        Description: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n        LoRaWAN: import_smithy_client._json,\n        Name: import_smithy_client.expectString,\n        Status: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetMulticastGroupCommand\");\n    var de_GetMulticastGroupSessionCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        LoRaWAN: (_) => de_LoRaWANMulticastSession(_, context),\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetMulticastGroupSessionCommand\");\n    var de_GetNetworkAnalyzerConfigurationCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          Arn: import_smithy_client.expectString,\n          Description: import_smithy_client.expectString,\n          MulticastGroups: import_smithy_client._json,\n          Name: import_smithy_client.expectString,\n          TraceContent: import_smithy_client._json,\n          WirelessDevices: import_smithy_client._json,\n          WirelessGateways: import_smithy_client._json,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_GetNetworkAnalyzerConfigurationCommand\"\n    );\n    var de_GetPartnerAccountCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        AccountLinked: import_smithy_client.expectBoolean,\n        Sidewalk: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetPartnerAccountCommand\");\n    var de_GetPositionCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Accuracy: (_) => de_Accuracy(_, context),\n        Position: (_) => de_PositionCoordinate(_, context),\n        SolverProvider: import_smithy_client.expectString,\n        SolverType: import_smithy_client.expectString,\n        SolverVersion: import_smithy_client.expectString,\n        Timestamp: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetPositionCommand\");\n    var de_GetPositionConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Destination: import_smithy_client.expectString,\n        Solvers: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetPositionConfigurationCommand\");\n    var de_GetPositionEstimateCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = await (0, import_smithy_client.collectBody)(output.body, context);\n      contents.GeoJsonPayload = data;\n      return contents;\n    }, \"de_GetPositionEstimateCommand\");\n    var de_GetResourceEventConfigurationCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          ConnectionStatus: import_smithy_client._json,\n          DeviceRegistrationState: import_smithy_client._json,\n          Join: import_smithy_client._json,\n          MessageDeliveryStatus: import_smithy_client._json,\n          Proximity: import_smithy_client._json,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_GetResourceEventConfigurationCommand\"\n    );\n    var de_GetResourceLogLevelCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        LogLevel: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetResourceLogLevelCommand\");\n    var de_GetResourcePositionCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = await (0, import_smithy_client.collectBody)(output.body, context);\n      contents.GeoJsonPayload = data;\n      return contents;\n    }, \"de_GetResourcePositionCommand\");\n    var de_GetServiceEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        ServerTrust: import_smithy_client.expectString,\n        ServiceEndpoint: import_smithy_client.expectString,\n        ServiceType: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetServiceEndpointCommand\");\n    var de_GetServiceProfileCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n        LoRaWAN: import_smithy_client._json,\n        Name: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetServiceProfileCommand\");\n    var de_GetWirelessDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Description: import_smithy_client.expectString,\n        DestinationName: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n        LoRaWAN: import_smithy_client._json,\n        Name: import_smithy_client.expectString,\n        Positioning: import_smithy_client.expectString,\n        Sidewalk: import_smithy_client._json,\n        ThingArn: import_smithy_client.expectString,\n        ThingName: import_smithy_client.expectString,\n        Type: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetWirelessDeviceCommand\");\n    var de_GetWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        CreationTime: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)\n          ),\n        DestinationName: import_smithy_client.expectString,\n        FailedImportedDeviceCount: import_smithy_client.expectLong,\n        Id: import_smithy_client.expectString,\n        InitializedImportedDeviceCount: import_smithy_client.expectLong,\n        OnboardedImportedDeviceCount: import_smithy_client.expectLong,\n        PendingImportedDeviceCount: import_smithy_client.expectLong,\n        Sidewalk: import_smithy_client._json,\n        Status: import_smithy_client.expectString,\n        StatusReason: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetWirelessDeviceImportTaskCommand\");\n    var de_GetWirelessDeviceStatisticsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        LastUplinkReceivedAt: import_smithy_client.expectString,\n        LoRaWAN: (_) => de_LoRaWANDeviceMetadata(_, context),\n        Sidewalk: import_smithy_client._json,\n        WirelessDeviceId: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetWirelessDeviceStatisticsCommand\");\n    var de_GetWirelessGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Arn: import_smithy_client.expectString,\n        Description: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n        LoRaWAN: (_) => de_LoRaWANGateway(_, context),\n        Name: import_smithy_client.expectString,\n        ThingArn: import_smithy_client.expectString,\n        ThingName: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetWirelessGatewayCommand\");\n    var de_GetWirelessGatewayCertificateCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          IotCertificateId: import_smithy_client.expectString,\n          LoRaWANNetworkServerCertificateId: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_GetWirelessGatewayCertificateCommand\"\n    );\n    var de_GetWirelessGatewayFirmwareInformationCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          LoRaWAN: import_smithy_client._json,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_GetWirelessGatewayFirmwareInformationCommand\"\n    );\n    var de_GetWirelessGatewayStatisticsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        ConnectionStatus: import_smithy_client.expectString,\n        LastUplinkReceivedAt: import_smithy_client.expectString,\n        WirelessGatewayId: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetWirelessGatewayStatisticsCommand\");\n    var de_GetWirelessGatewayTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        LastUplinkReceivedAt: import_smithy_client.expectString,\n        Status: import_smithy_client.expectString,\n        TaskCreatedAt: import_smithy_client.expectString,\n        WirelessGatewayId: import_smithy_client.expectString,\n        WirelessGatewayTaskDefinitionId: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_GetWirelessGatewayTaskCommand\");\n    var de_GetWirelessGatewayTaskDefinitionCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          Arn: import_smithy_client.expectString,\n          AutoCreateTasks: import_smithy_client.expectBoolean,\n          Name: import_smithy_client.expectString,\n          Update: import_smithy_client._json,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_GetWirelessGatewayTaskDefinitionCommand\"\n    );\n    var de_ListDestinationsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        DestinationList: import_smithy_client._json,\n        NextToken: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListDestinationsCommand\");\n    var de_ListDeviceProfilesCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        DeviceProfileList: import_smithy_client._json,\n        NextToken: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListDeviceProfilesCommand\");\n    var de_ListDevicesForWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          DestinationName: import_smithy_client.expectString,\n          ImportedWirelessDeviceList: (_) => de_ImportedWirelessDeviceList(_, context),\n          NextToken: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_ListDevicesForWirelessDeviceImportTaskCommand\"\n    );\n    var de_ListEventConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        EventConfigurationsList: import_smithy_client._json,\n        NextToken: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListEventConfigurationsCommand\");\n    var de_ListFuotaTasksCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        FuotaTaskList: import_smithy_client._json,\n        NextToken: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListFuotaTasksCommand\");\n    var de_ListMulticastGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        MulticastGroupList: import_smithy_client._json,\n        NextToken: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListMulticastGroupsCommand\");\n    var de_ListMulticastGroupsByFuotaTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          MulticastGroupList: import_smithy_client._json,\n          NextToken: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_ListMulticastGroupsByFuotaTaskCommand\"\n    );\n    var de_ListNetworkAnalyzerConfigurationsCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          NetworkAnalyzerConfigurationList: import_smithy_client._json,\n          NextToken: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_ListNetworkAnalyzerConfigurationsCommand\"\n    );\n    var de_ListPartnerAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        NextToken: import_smithy_client.expectString,\n        Sidewalk: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListPartnerAccountsCommand\");\n    var de_ListPositionConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        NextToken: import_smithy_client.expectString,\n        PositionConfigurationList: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListPositionConfigurationsCommand\");\n    var de_ListQueuedMessagesCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        DownlinkQueueMessagesList: import_smithy_client._json,\n        NextToken: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListQueuedMessagesCommand\");\n    var de_ListServiceProfilesCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        NextToken: import_smithy_client.expectString,\n        ServiceProfileList: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListServiceProfilesCommand\");\n    var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Tags: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListTagsForResourceCommand\");\n    var de_ListWirelessDeviceImportTasksCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          NextToken: import_smithy_client.expectString,\n          WirelessDeviceImportTaskList: (_) => de_WirelessDeviceImportTaskList(_, context),\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_ListWirelessDeviceImportTasksCommand\"\n    );\n    var de_ListWirelessDevicesCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        NextToken: import_smithy_client.expectString,\n        WirelessDeviceList: import_smithy_client._json,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListWirelessDevicesCommand\");\n    var de_ListWirelessGatewaysCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        NextToken: import_smithy_client.expectString,\n        WirelessGatewayList: (_) => de_WirelessGatewayStatisticsList(_, context),\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_ListWirelessGatewaysCommand\");\n    var de_ListWirelessGatewayTaskDefinitionsCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          NextToken: import_smithy_client.expectString,\n          TaskDefinitions: import_smithy_client._json,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_ListWirelessGatewayTaskDefinitionsCommand\"\n    );\n    var de_PutPositionConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_PutPositionConfigurationCommand\");\n    var de_PutResourceLogLevelCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_PutResourceLogLevelCommand\");\n    var de_ResetAllResourceLogLevelsCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_ResetAllResourceLogLevelsCommand\");\n    var de_ResetResourceLogLevelCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_ResetResourceLogLevelCommand\");\n    var de_SendDataToMulticastGroupCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        MessageId: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_SendDataToMulticastGroupCommand\");\n    var de_SendDataToWirelessDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 202 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        MessageId: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_SendDataToWirelessDeviceCommand\");\n    var de_StartBulkAssociateWirelessDeviceWithMulticastGroupCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_StartBulkAssociateWirelessDeviceWithMulticastGroupCommand\"\n    );\n    var de_StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand\"\n    );\n    var de_StartFuotaTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_StartFuotaTaskCommand\");\n    var de_StartMulticastGroupSessionCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_StartMulticastGroupSessionCommand\");\n    var de_StartSingleWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 201 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          Arn: import_smithy_client.expectString,\n          Id: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_StartSingleWirelessDeviceImportTaskCommand\"\n    );\n    var de_StartWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 201 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        const data = (0, import_smithy_client.expectNonNull)(\n          (0, import_smithy_client.expectObject)(\n            await (0, import_core2.parseJsonBody)(output.body, context)\n          ),\n          \"body\"\n        );\n        const doc = (0, import_smithy_client.take)(data, {\n          Arn: import_smithy_client.expectString,\n          Id: import_smithy_client.expectString,\n        });\n        Object.assign(contents, doc);\n        return contents;\n      },\n      \"de_StartWirelessDeviceImportTaskCommand\"\n    );\n    var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_TagResourceCommand\");\n    var de_TestWirelessDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      const data = (0, import_smithy_client.expectNonNull)(\n        (0, import_smithy_client.expectObject)(\n          await (0, import_core2.parseJsonBody)(output.body, context)\n        ),\n        \"body\"\n      );\n      const doc = (0, import_smithy_client.take)(data, {\n        Result: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      return contents;\n    }, \"de_TestWirelessDeviceCommand\");\n    var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UntagResourceCommand\");\n    var de_UpdateDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdateDestinationCommand\");\n    var de_UpdateEventConfigurationByResourceTypesCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_UpdateEventConfigurationByResourceTypesCommand\"\n    );\n    var de_UpdateFuotaTaskCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdateFuotaTaskCommand\");\n    var de_UpdateLogLevelsByResourceTypesCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_UpdateLogLevelsByResourceTypesCommand\"\n    );\n    var de_UpdateMetricConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdateMetricConfigurationCommand\");\n    var de_UpdateMulticastGroupCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdateMulticastGroupCommand\");\n    var de_UpdateNetworkAnalyzerConfigurationCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_UpdateNetworkAnalyzerConfigurationCommand\"\n    );\n    var de_UpdatePartnerAccountCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdatePartnerAccountCommand\");\n    var de_UpdatePositionCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdatePositionCommand\");\n    var de_UpdateResourceEventConfigurationCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_UpdateResourceEventConfigurationCommand\"\n    );\n    var de_UpdateResourcePositionCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdateResourcePositionCommand\");\n    var de_UpdateWirelessDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdateWirelessDeviceCommand\");\n    var de_UpdateWirelessDeviceImportTaskCommand = /* @__PURE__ */ __name(\n      async (output, context) => {\n        if (output.statusCode !== 204 && output.statusCode >= 300) {\n          return de_CommandError(output, context);\n        }\n        const contents = (0, import_smithy_client.map)({\n          $metadata: deserializeMetadata(output),\n        });\n        await (0, import_smithy_client.collectBody)(output.body, context);\n        return contents;\n      },\n      \"de_UpdateWirelessDeviceImportTaskCommand\"\n    );\n    var de_UpdateWirelessGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {\n      if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n      }\n      const contents = (0, import_smithy_client.map)({\n        $metadata: deserializeMetadata(output),\n      });\n      await (0, import_smithy_client.collectBody)(output.body, context);\n      return contents;\n    }, \"de_UpdateWirelessGatewayCommand\");\n    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {\n      const parsedOutput = {\n        ...output,\n        body: await (0, import_core2.parseJsonErrorBody)(output.body, context),\n      };\n      const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);\n      switch (errorCode) {\n        case \"AccessDeniedException\":\n        case \"com.amazonaws.iotwireless#AccessDeniedException\":\n          throw await de_AccessDeniedExceptionRes(parsedOutput, context);\n        case \"ConflictException\":\n        case \"com.amazonaws.iotwireless#ConflictException\":\n          throw await de_ConflictExceptionRes(parsedOutput, context);\n        case \"InternalServerException\":\n        case \"com.amazonaws.iotwireless#InternalServerException\":\n          throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.iotwireless#ResourceNotFoundException\":\n          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ThrottlingException\":\n        case \"com.amazonaws.iotwireless#ThrottlingException\":\n          throw await de_ThrottlingExceptionRes(parsedOutput, context);\n        case \"ValidationException\":\n        case \"com.amazonaws.iotwireless#ValidationException\":\n          throw await de_ValidationExceptionRes(parsedOutput, context);\n        case \"TooManyTagsException\":\n        case \"com.amazonaws.iotwireless#TooManyTagsException\":\n          throw await de_TooManyTagsExceptionRes(parsedOutput, context);\n        default: {\n          const parsedBody = parsedOutput.body;\n          return throwDefaultError({\n            output,\n            parsedBody,\n            errorCode,\n          });\n        }\n      }\n    }, \"de_CommandError\");\n    var throwDefaultError = (0, import_smithy_client.withBaseException)(\n      IoTWirelessServiceException\n    );\n    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        Message: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new AccessDeniedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_AccessDeniedExceptionRes\");\n    var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        Message: import_smithy_client.expectString,\n        ResourceId: import_smithy_client.expectString,\n        ResourceType: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new ConflictException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_ConflictExceptionRes\");\n    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        Message: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new InternalServerException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_InternalServerExceptionRes\");\n    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        Message: import_smithy_client.expectString,\n        ResourceId: import_smithy_client.expectString,\n        ResourceType: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new ResourceNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_ResourceNotFoundExceptionRes\");\n    var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        Message: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new ThrottlingException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_ThrottlingExceptionRes\");\n    var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        Message: import_smithy_client.expectString,\n        ResourceName: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new TooManyTagsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_TooManyTagsExceptionRes\");\n    var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {\n      const contents = (0, import_smithy_client.map)({});\n      const data = parsedOutput.body;\n      const doc = (0, import_smithy_client.take)(data, {\n        Message: import_smithy_client.expectString,\n      });\n      Object.assign(contents, doc);\n      const exception = new ValidationException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n      });\n      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);\n    }, \"de_ValidationExceptionRes\");\n    var se_AssistPosition = /* @__PURE__ */ __name((input, context) => {\n      return input\n        .filter((e) => e != null)\n        .map((entry) => {\n          return (0, import_smithy_client.serializeFloat)(entry);\n        });\n    }, \"se_AssistPosition\");\n    var se_CdmaList = /* @__PURE__ */ __name((input, context) => {\n      return input\n        .filter((e) => e != null)\n        .map((entry) => {\n          return se_CdmaObj(entry, context);\n        });\n    }, \"se_CdmaList\");\n    var se_CdmaObj = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        BaseLat: import_smithy_client.serializeFloat,\n        BaseLng: import_smithy_client.serializeFloat,\n        BaseStationId: [],\n        CdmaLocalId: import_smithy_client._json,\n        CdmaNmr: import_smithy_client._json,\n        NetworkId: [],\n        PilotPower: [],\n        RegistrationZone: [],\n        SystemId: [],\n      });\n    }, \"se_CdmaObj\");\n    var se_CellTowers = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        Cdma: (_) => se_CdmaList(_, context),\n        Gsm: import_smithy_client._json,\n        Lte: (_) => se_LteList(_, context),\n        Tdscdma: import_smithy_client._json,\n        Wcdma: import_smithy_client._json,\n      });\n    }, \"se_CellTowers\");\n    var se_Gnss = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        AssistAltitude: import_smithy_client.serializeFloat,\n        AssistPosition: (_) => se_AssistPosition(_, context),\n        CaptureTime: import_smithy_client.serializeFloat,\n        CaptureTimeAccuracy: import_smithy_client.serializeFloat,\n        Payload: [],\n        Use2DSolver: [],\n      });\n    }, \"se_Gnss\");\n    var se_LoRaWANGateway = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        Beaconing: import_smithy_client._json,\n        GatewayEui: [],\n        JoinEuiFilters: import_smithy_client._json,\n        MaxEirp: import_smithy_client.serializeFloat,\n        NetIdFilters: import_smithy_client._json,\n        RfRegion: [],\n        SubBands: import_smithy_client._json,\n      });\n    }, \"se_LoRaWANGateway\");\n    var se_LoRaWANMulticastSession = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        DlDr: [],\n        DlFreq: [],\n        PingSlotPeriod: [],\n        SessionStartTime: import_smithy_client.serializeDateTime,\n        SessionTimeout: [],\n      });\n    }, \"se_LoRaWANMulticastSession\");\n    var se_LoRaWANStartFuotaTask = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        StartTime: import_smithy_client.serializeDateTime,\n      });\n    }, \"se_LoRaWANStartFuotaTask\");\n    var se_LteList = /* @__PURE__ */ __name((input, context) => {\n      return input\n        .filter((e) => e != null)\n        .map((entry) => {\n          return se_LteObj(entry, context);\n        });\n    }, \"se_LteList\");\n    var se_LteNmrList = /* @__PURE__ */ __name((input, context) => {\n      return input\n        .filter((e) => e != null)\n        .map((entry) => {\n          return se_LteNmrObj(entry, context);\n        });\n    }, \"se_LteNmrList\");\n    var se_LteNmrObj = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        Earfcn: [],\n        EutranCid: [],\n        Pci: [],\n        Rsrp: [],\n        Rsrq: import_smithy_client.serializeFloat,\n      });\n    }, \"se_LteNmrObj\");\n    var se_LteObj = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        EutranCid: [],\n        LteLocalId: import_smithy_client._json,\n        LteNmr: (_) => se_LteNmrList(_, context),\n        LteTimingAdvance: [],\n        Mcc: [],\n        Mnc: [],\n        NrCapable: [],\n        Rsrp: [],\n        Rsrq: import_smithy_client.serializeFloat,\n        Tac: [],\n      });\n    }, \"se_LteObj\");\n    var se_PositionCoordinate = /* @__PURE__ */ __name((input, context) => {\n      return input\n        .filter((e) => e != null)\n        .map((entry) => {\n          return (0, import_smithy_client.serializeFloat)(entry);\n        });\n    }, \"se_PositionCoordinate\");\n    var se_SummaryMetricQueries = /* @__PURE__ */ __name((input, context) => {\n      return input\n        .filter((e) => e != null)\n        .map((entry) => {\n          return se_SummaryMetricQuery(entry, context);\n        });\n    }, \"se_SummaryMetricQueries\");\n    var se_SummaryMetricQuery = /* @__PURE__ */ __name((input, context) => {\n      return (0, import_smithy_client.take)(input, {\n        AggregationPeriod: [],\n        Dimensions: import_smithy_client._json,\n        EndTimestamp: (_) => _.getTime() / 1e3,\n        MetricName: [],\n        QueryId: [],\n        StartTimestamp: (_) => _.getTime() / 1e3,\n      });\n    }, \"se_SummaryMetricQuery\");\n    var de_Accuracy = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        HorizontalAccuracy: import_smithy_client.limitedParseFloat32,\n        VerticalAccuracy: import_smithy_client.limitedParseFloat32,\n      });\n    }, \"de_Accuracy\");\n    var de_ImportedSidewalkDevice = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        LastUpdateTime: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)\n          ),\n        OnboardingStatus: import_smithy_client.expectString,\n        OnboardingStatusReason: import_smithy_client.expectString,\n        SidewalkManufacturingSn: import_smithy_client.expectString,\n      });\n    }, \"de_ImportedSidewalkDevice\");\n    var de_ImportedWirelessDevice = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        Sidewalk: (_) => de_ImportedSidewalkDevice(_, context),\n      });\n    }, \"de_ImportedWirelessDevice\");\n    var de_ImportedWirelessDeviceList = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return de_ImportedWirelessDevice(entry, context);\n        });\n      return retVal;\n    }, \"de_ImportedWirelessDeviceList\");\n    var de_LoRaWANDeviceMetadata = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        DataRate: import_smithy_client.expectInt32,\n        DevEui: import_smithy_client.expectString,\n        FPort: import_smithy_client.expectInt32,\n        Frequency: import_smithy_client.expectInt32,\n        Gateways: (_) => de_LoRaWANGatewayMetadataList(_, context),\n        PublicGateways: (_) => de_LoRaWANPublicGatewayMetadataList(_, context),\n        Timestamp: import_smithy_client.expectString,\n      });\n    }, \"de_LoRaWANDeviceMetadata\");\n    var de_LoRaWANFuotaTaskGetInfo = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        RfRegion: import_smithy_client.expectString,\n        StartTime: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)\n          ),\n      });\n    }, \"de_LoRaWANFuotaTaskGetInfo\");\n    var de_LoRaWANGateway = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        Beaconing: import_smithy_client._json,\n        GatewayEui: import_smithy_client.expectString,\n        JoinEuiFilters: import_smithy_client._json,\n        MaxEirp: import_smithy_client.limitedParseFloat32,\n        NetIdFilters: import_smithy_client._json,\n        RfRegion: import_smithy_client.expectString,\n        SubBands: import_smithy_client._json,\n      });\n    }, \"de_LoRaWANGateway\");\n    var de_LoRaWANGatewayMetadata = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        GatewayEui: import_smithy_client.expectString,\n        Rssi: import_smithy_client.limitedParseDouble,\n        Snr: import_smithy_client.limitedParseDouble,\n      });\n    }, \"de_LoRaWANGatewayMetadata\");\n    var de_LoRaWANGatewayMetadataList = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return de_LoRaWANGatewayMetadata(entry, context);\n        });\n      return retVal;\n    }, \"de_LoRaWANGatewayMetadataList\");\n    var de_LoRaWANMulticastSession = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        DlDr: import_smithy_client.expectInt32,\n        DlFreq: import_smithy_client.expectInt32,\n        PingSlotPeriod: import_smithy_client.expectInt32,\n        SessionStartTime: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)\n          ),\n        SessionTimeout: import_smithy_client.expectInt32,\n      });\n    }, \"de_LoRaWANMulticastSession\");\n    var de_LoRaWANPublicGatewayMetadata = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        DlAllowed: import_smithy_client.expectBoolean,\n        Id: import_smithy_client.expectString,\n        ProviderNetId: import_smithy_client.expectString,\n        RfRegion: import_smithy_client.expectString,\n        Rssi: import_smithy_client.limitedParseDouble,\n        Snr: import_smithy_client.limitedParseDouble,\n      });\n    }, \"de_LoRaWANPublicGatewayMetadata\");\n    var de_LoRaWANPublicGatewayMetadataList = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return de_LoRaWANPublicGatewayMetadata(entry, context);\n        });\n      return retVal;\n    }, \"de_LoRaWANPublicGatewayMetadataList\");\n    var de_MetricQueryTimestamps = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseEpochTimestamp)(\n              (0, import_smithy_client.expectNumber)(entry)\n            )\n          );\n        });\n      return retVal;\n    }, \"de_MetricQueryTimestamps\");\n    var de_MetricQueryValue = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        Avg: import_smithy_client.limitedParseDouble,\n        Max: import_smithy_client.limitedParseDouble,\n        Min: import_smithy_client.limitedParseDouble,\n        P90: import_smithy_client.limitedParseDouble,\n        Std: import_smithy_client.limitedParseDouble,\n        Sum: import_smithy_client.limitedParseDouble,\n      });\n    }, \"de_MetricQueryValue\");\n    var de_MetricQueryValues = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return de_MetricQueryValue(entry, context);\n        });\n      return retVal;\n    }, \"de_MetricQueryValues\");\n    var de_PositionCoordinate = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return (0, import_smithy_client.limitedParseFloat32)(entry);\n        });\n      return retVal;\n    }, \"de_PositionCoordinate\");\n    var de_SummaryMetricQueryResult = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        AggregationPeriod: import_smithy_client.expectString,\n        Dimensions: import_smithy_client._json,\n        EndTimestamp: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))\n          ),\n        Error: import_smithy_client.expectString,\n        MetricName: import_smithy_client.expectString,\n        QueryId: import_smithy_client.expectString,\n        QueryStatus: import_smithy_client.expectString,\n        StartTimestamp: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))\n          ),\n        Timestamps: (_) => de_MetricQueryTimestamps(_, context),\n        Unit: import_smithy_client.expectString,\n        Values: (_) => de_MetricQueryValues(_, context),\n      });\n    }, \"de_SummaryMetricQueryResult\");\n    var de_SummaryMetricQueryResults = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return de_SummaryMetricQueryResult(entry, context);\n        });\n      return retVal;\n    }, \"de_SummaryMetricQueryResults\");\n    var de_WirelessDeviceImportTask = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        Arn: import_smithy_client.expectString,\n        CreationTime: (_) =>\n          (0, import_smithy_client.expectNonNull)(\n            (0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)\n          ),\n        DestinationName: import_smithy_client.expectString,\n        FailedImportedDeviceCount: import_smithy_client.expectLong,\n        Id: import_smithy_client.expectString,\n        InitializedImportedDeviceCount: import_smithy_client.expectLong,\n        OnboardedImportedDeviceCount: import_smithy_client.expectLong,\n        PendingImportedDeviceCount: import_smithy_client.expectLong,\n        Sidewalk: import_smithy_client._json,\n        Status: import_smithy_client.expectString,\n        StatusReason: import_smithy_client.expectString,\n      });\n    }, \"de_WirelessDeviceImportTask\");\n    var de_WirelessDeviceImportTaskList = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return de_WirelessDeviceImportTask(entry, context);\n        });\n      return retVal;\n    }, \"de_WirelessDeviceImportTaskList\");\n    var de_WirelessGatewayStatistics = /* @__PURE__ */ __name((output, context) => {\n      return (0, import_smithy_client.take)(output, {\n        Arn: import_smithy_client.expectString,\n        Description: import_smithy_client.expectString,\n        Id: import_smithy_client.expectString,\n        LastUplinkReceivedAt: import_smithy_client.expectString,\n        LoRaWAN: (_) => de_LoRaWANGateway(_, context),\n        Name: import_smithy_client.expectString,\n      });\n    }, \"de_WirelessGatewayStatistics\");\n    var de_WirelessGatewayStatisticsList = /* @__PURE__ */ __name((output, context) => {\n      const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n          return de_WirelessGatewayStatistics(entry, context);\n        });\n      return retVal;\n    }, \"de_WirelessGatewayStatisticsList\");\n    var deserializeMetadata = /* @__PURE__ */ __name(\n      (output) => ({\n        httpStatusCode: output.statusCode,\n        requestId:\n          output.headers[\"x-amzn-requestid\"] ??\n          output.headers[\"x-amzn-request-id\"] ??\n          output.headers[\"x-amz-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n      }),\n      \"deserializeMetadata\"\n    );\n    var _DN = \"DestinationName\";\n    var _DPI = \"DeviceProfileId\";\n    var _DPT = \"DeviceProfileType\";\n    var _FTI = \"FuotaTaskId\";\n    var _I = \"Id\";\n    var _IT = \"IdentifierType\";\n    var _MGI = \"MulticastGroupId\";\n    var _MI = \"MessageId\";\n    var _MR = \"MaxResults\";\n    var _NT = \"NextToken\";\n    var _PT = \"PartnerType\";\n    var _RA = \"ResourceArn\";\n    var _RT = \"ResourceType\";\n    var _S = \"Status\";\n    var _SPI = \"ServiceProfileId\";\n    var _ST = \"ServiceType\";\n    var _TDT = \"TaskDefinitionType\";\n    var _TK = \"TagKeys\";\n    var _WDT = \"WirelessDeviceType\";\n    var _dN = \"destinationName\";\n    var _dPI = \"deviceProfileId\";\n    var _dPT = \"deviceProfileType\";\n    var _fTI = \"fuotaTaskId\";\n    var _i = \"id\";\n    var _iT = \"identifierType\";\n    var _mGI = \"multicastGroupId\";\n    var _mI = \"messageId\";\n    var _mR = \"maxResults\";\n    var _nT = \"nextToken\";\n    var _pT = \"partnerType\";\n    var _rA = \"resourceArn\";\n    var _rT = \"resourceType\";\n    var _s = \"status\";\n    var _sPI = \"serviceProfileId\";\n    var _sT = \"serviceType\";\n    var _tDT = \"taskDefinitionType\";\n    var _tK = \"tagKeys\";\n    var _wDT = \"wirelessDeviceType\";\n    var _AssociateAwsAccountWithPartnerAccountCommand = class _AssociateAwsAccountWithPartnerAccountCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"AssociateAwsAccountWithPartnerAccount\", {})\n      .n(\"IoTWirelessClient\", \"AssociateAwsAccountWithPartnerAccountCommand\")\n      .f(\n        AssociateAwsAccountWithPartnerAccountRequestFilterSensitiveLog,\n        AssociateAwsAccountWithPartnerAccountResponseFilterSensitiveLog\n      )\n      .ser(se_AssociateAwsAccountWithPartnerAccountCommand)\n      .de(de_AssociateAwsAccountWithPartnerAccountCommand)\n      .build() {};\n    __name(\n      _AssociateAwsAccountWithPartnerAccountCommand,\n      \"AssociateAwsAccountWithPartnerAccountCommand\"\n    );\n    var AssociateAwsAccountWithPartnerAccountCommand =\n      _AssociateAwsAccountWithPartnerAccountCommand;\n    var _AssociateMulticastGroupWithFuotaTaskCommand = class _AssociateMulticastGroupWithFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"AssociateMulticastGroupWithFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"AssociateMulticastGroupWithFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_AssociateMulticastGroupWithFuotaTaskCommand)\n      .de(de_AssociateMulticastGroupWithFuotaTaskCommand)\n      .build() {};\n    __name(\n      _AssociateMulticastGroupWithFuotaTaskCommand,\n      \"AssociateMulticastGroupWithFuotaTaskCommand\"\n    );\n    var AssociateMulticastGroupWithFuotaTaskCommand = _AssociateMulticastGroupWithFuotaTaskCommand;\n    var _AssociateWirelessDeviceWithFuotaTaskCommand = class _AssociateWirelessDeviceWithFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"AssociateWirelessDeviceWithFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"AssociateWirelessDeviceWithFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_AssociateWirelessDeviceWithFuotaTaskCommand)\n      .de(de_AssociateWirelessDeviceWithFuotaTaskCommand)\n      .build() {};\n    __name(\n      _AssociateWirelessDeviceWithFuotaTaskCommand,\n      \"AssociateWirelessDeviceWithFuotaTaskCommand\"\n    );\n    var AssociateWirelessDeviceWithFuotaTaskCommand = _AssociateWirelessDeviceWithFuotaTaskCommand;\n    var _AssociateWirelessDeviceWithMulticastGroupCommand = class _AssociateWirelessDeviceWithMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"AssociateWirelessDeviceWithMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"AssociateWirelessDeviceWithMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_AssociateWirelessDeviceWithMulticastGroupCommand)\n      .de(de_AssociateWirelessDeviceWithMulticastGroupCommand)\n      .build() {};\n    __name(\n      _AssociateWirelessDeviceWithMulticastGroupCommand,\n      \"AssociateWirelessDeviceWithMulticastGroupCommand\"\n    );\n    var AssociateWirelessDeviceWithMulticastGroupCommand =\n      _AssociateWirelessDeviceWithMulticastGroupCommand;\n    var _AssociateWirelessDeviceWithThingCommand = class _AssociateWirelessDeviceWithThingCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"AssociateWirelessDeviceWithThing\", {})\n      .n(\"IoTWirelessClient\", \"AssociateWirelessDeviceWithThingCommand\")\n      .f(void 0, void 0)\n      .ser(se_AssociateWirelessDeviceWithThingCommand)\n      .de(de_AssociateWirelessDeviceWithThingCommand)\n      .build() {};\n    __name(_AssociateWirelessDeviceWithThingCommand, \"AssociateWirelessDeviceWithThingCommand\");\n    var AssociateWirelessDeviceWithThingCommand = _AssociateWirelessDeviceWithThingCommand;\n    var _AssociateWirelessGatewayWithCertificateCommand = class _AssociateWirelessGatewayWithCertificateCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"AssociateWirelessGatewayWithCertificate\", {})\n      .n(\"IoTWirelessClient\", \"AssociateWirelessGatewayWithCertificateCommand\")\n      .f(void 0, void 0)\n      .ser(se_AssociateWirelessGatewayWithCertificateCommand)\n      .de(de_AssociateWirelessGatewayWithCertificateCommand)\n      .build() {};\n    __name(\n      _AssociateWirelessGatewayWithCertificateCommand,\n      \"AssociateWirelessGatewayWithCertificateCommand\"\n    );\n    var AssociateWirelessGatewayWithCertificateCommand =\n      _AssociateWirelessGatewayWithCertificateCommand;\n    var _AssociateWirelessGatewayWithThingCommand = class _AssociateWirelessGatewayWithThingCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"AssociateWirelessGatewayWithThing\", {})\n      .n(\"IoTWirelessClient\", \"AssociateWirelessGatewayWithThingCommand\")\n      .f(void 0, void 0)\n      .ser(se_AssociateWirelessGatewayWithThingCommand)\n      .de(de_AssociateWirelessGatewayWithThingCommand)\n      .build() {};\n    __name(_AssociateWirelessGatewayWithThingCommand, \"AssociateWirelessGatewayWithThingCommand\");\n    var AssociateWirelessGatewayWithThingCommand = _AssociateWirelessGatewayWithThingCommand;\n    var _CancelMulticastGroupSessionCommand = class _CancelMulticastGroupSessionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CancelMulticastGroupSession\", {})\n      .n(\"IoTWirelessClient\", \"CancelMulticastGroupSessionCommand\")\n      .f(void 0, void 0)\n      .ser(se_CancelMulticastGroupSessionCommand)\n      .de(de_CancelMulticastGroupSessionCommand)\n      .build() {};\n    __name(_CancelMulticastGroupSessionCommand, \"CancelMulticastGroupSessionCommand\");\n    var CancelMulticastGroupSessionCommand = _CancelMulticastGroupSessionCommand;\n    var _CreateDestinationCommand = class _CreateDestinationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateDestination\", {})\n      .n(\"IoTWirelessClient\", \"CreateDestinationCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateDestinationCommand)\n      .de(de_CreateDestinationCommand)\n      .build() {};\n    __name(_CreateDestinationCommand, \"CreateDestinationCommand\");\n    var CreateDestinationCommand = _CreateDestinationCommand;\n    var _CreateDeviceProfileCommand = class _CreateDeviceProfileCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateDeviceProfile\", {})\n      .n(\"IoTWirelessClient\", \"CreateDeviceProfileCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateDeviceProfileCommand)\n      .de(de_CreateDeviceProfileCommand)\n      .build() {};\n    __name(_CreateDeviceProfileCommand, \"CreateDeviceProfileCommand\");\n    var CreateDeviceProfileCommand = _CreateDeviceProfileCommand;\n    var _CreateFuotaTaskCommand = class _CreateFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"CreateFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateFuotaTaskCommand)\n      .de(de_CreateFuotaTaskCommand)\n      .build() {};\n    __name(_CreateFuotaTaskCommand, \"CreateFuotaTaskCommand\");\n    var CreateFuotaTaskCommand = _CreateFuotaTaskCommand;\n    var _CreateMulticastGroupCommand = class _CreateMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"CreateMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateMulticastGroupCommand)\n      .de(de_CreateMulticastGroupCommand)\n      .build() {};\n    __name(_CreateMulticastGroupCommand, \"CreateMulticastGroupCommand\");\n    var CreateMulticastGroupCommand = _CreateMulticastGroupCommand;\n    var _CreateNetworkAnalyzerConfigurationCommand = class _CreateNetworkAnalyzerConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateNetworkAnalyzerConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"CreateNetworkAnalyzerConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateNetworkAnalyzerConfigurationCommand)\n      .de(de_CreateNetworkAnalyzerConfigurationCommand)\n      .build() {};\n    __name(_CreateNetworkAnalyzerConfigurationCommand, \"CreateNetworkAnalyzerConfigurationCommand\");\n    var CreateNetworkAnalyzerConfigurationCommand = _CreateNetworkAnalyzerConfigurationCommand;\n    var _CreateServiceProfileCommand = class _CreateServiceProfileCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateServiceProfile\", {})\n      .n(\"IoTWirelessClient\", \"CreateServiceProfileCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateServiceProfileCommand)\n      .de(de_CreateServiceProfileCommand)\n      .build() {};\n    __name(_CreateServiceProfileCommand, \"CreateServiceProfileCommand\");\n    var CreateServiceProfileCommand = _CreateServiceProfileCommand;\n    var _CreateWirelessDeviceCommand = class _CreateWirelessDeviceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateWirelessDevice\", {})\n      .n(\"IoTWirelessClient\", \"CreateWirelessDeviceCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateWirelessDeviceCommand)\n      .de(de_CreateWirelessDeviceCommand)\n      .build() {};\n    __name(_CreateWirelessDeviceCommand, \"CreateWirelessDeviceCommand\");\n    var CreateWirelessDeviceCommand = _CreateWirelessDeviceCommand;\n    var _CreateWirelessGatewayCommand = class _CreateWirelessGatewayCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateWirelessGateway\", {})\n      .n(\"IoTWirelessClient\", \"CreateWirelessGatewayCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateWirelessGatewayCommand)\n      .de(de_CreateWirelessGatewayCommand)\n      .build() {};\n    __name(_CreateWirelessGatewayCommand, \"CreateWirelessGatewayCommand\");\n    var CreateWirelessGatewayCommand = _CreateWirelessGatewayCommand;\n    var _CreateWirelessGatewayTaskCommand = class _CreateWirelessGatewayTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateWirelessGatewayTask\", {})\n      .n(\"IoTWirelessClient\", \"CreateWirelessGatewayTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateWirelessGatewayTaskCommand)\n      .de(de_CreateWirelessGatewayTaskCommand)\n      .build() {};\n    __name(_CreateWirelessGatewayTaskCommand, \"CreateWirelessGatewayTaskCommand\");\n    var CreateWirelessGatewayTaskCommand = _CreateWirelessGatewayTaskCommand;\n    var _CreateWirelessGatewayTaskDefinitionCommand = class _CreateWirelessGatewayTaskDefinitionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"CreateWirelessGatewayTaskDefinition\", {})\n      .n(\"IoTWirelessClient\", \"CreateWirelessGatewayTaskDefinitionCommand\")\n      .f(void 0, void 0)\n      .ser(se_CreateWirelessGatewayTaskDefinitionCommand)\n      .de(de_CreateWirelessGatewayTaskDefinitionCommand)\n      .build() {};\n    __name(\n      _CreateWirelessGatewayTaskDefinitionCommand,\n      \"CreateWirelessGatewayTaskDefinitionCommand\"\n    );\n    var CreateWirelessGatewayTaskDefinitionCommand = _CreateWirelessGatewayTaskDefinitionCommand;\n    var _DeleteDestinationCommand = class _DeleteDestinationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteDestination\", {})\n      .n(\"IoTWirelessClient\", \"DeleteDestinationCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteDestinationCommand)\n      .de(de_DeleteDestinationCommand)\n      .build() {};\n    __name(_DeleteDestinationCommand, \"DeleteDestinationCommand\");\n    var DeleteDestinationCommand = _DeleteDestinationCommand;\n    var _DeleteDeviceProfileCommand = class _DeleteDeviceProfileCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteDeviceProfile\", {})\n      .n(\"IoTWirelessClient\", \"DeleteDeviceProfileCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteDeviceProfileCommand)\n      .de(de_DeleteDeviceProfileCommand)\n      .build() {};\n    __name(_DeleteDeviceProfileCommand, \"DeleteDeviceProfileCommand\");\n    var DeleteDeviceProfileCommand = _DeleteDeviceProfileCommand;\n    var _DeleteFuotaTaskCommand = class _DeleteFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"DeleteFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteFuotaTaskCommand)\n      .de(de_DeleteFuotaTaskCommand)\n      .build() {};\n    __name(_DeleteFuotaTaskCommand, \"DeleteFuotaTaskCommand\");\n    var DeleteFuotaTaskCommand = _DeleteFuotaTaskCommand;\n    var _DeleteMulticastGroupCommand = class _DeleteMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"DeleteMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteMulticastGroupCommand)\n      .de(de_DeleteMulticastGroupCommand)\n      .build() {};\n    __name(_DeleteMulticastGroupCommand, \"DeleteMulticastGroupCommand\");\n    var DeleteMulticastGroupCommand = _DeleteMulticastGroupCommand;\n    var _DeleteNetworkAnalyzerConfigurationCommand = class _DeleteNetworkAnalyzerConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteNetworkAnalyzerConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"DeleteNetworkAnalyzerConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteNetworkAnalyzerConfigurationCommand)\n      .de(de_DeleteNetworkAnalyzerConfigurationCommand)\n      .build() {};\n    __name(_DeleteNetworkAnalyzerConfigurationCommand, \"DeleteNetworkAnalyzerConfigurationCommand\");\n    var DeleteNetworkAnalyzerConfigurationCommand = _DeleteNetworkAnalyzerConfigurationCommand;\n    var _DeleteQueuedMessagesCommand = class _DeleteQueuedMessagesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteQueuedMessages\", {})\n      .n(\"IoTWirelessClient\", \"DeleteQueuedMessagesCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteQueuedMessagesCommand)\n      .de(de_DeleteQueuedMessagesCommand)\n      .build() {};\n    __name(_DeleteQueuedMessagesCommand, \"DeleteQueuedMessagesCommand\");\n    var DeleteQueuedMessagesCommand = _DeleteQueuedMessagesCommand;\n    var _DeleteServiceProfileCommand = class _DeleteServiceProfileCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteServiceProfile\", {})\n      .n(\"IoTWirelessClient\", \"DeleteServiceProfileCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteServiceProfileCommand)\n      .de(de_DeleteServiceProfileCommand)\n      .build() {};\n    __name(_DeleteServiceProfileCommand, \"DeleteServiceProfileCommand\");\n    var DeleteServiceProfileCommand = _DeleteServiceProfileCommand;\n    var _DeleteWirelessDeviceCommand = class _DeleteWirelessDeviceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteWirelessDevice\", {})\n      .n(\"IoTWirelessClient\", \"DeleteWirelessDeviceCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteWirelessDeviceCommand)\n      .de(de_DeleteWirelessDeviceCommand)\n      .build() {};\n    __name(_DeleteWirelessDeviceCommand, \"DeleteWirelessDeviceCommand\");\n    var DeleteWirelessDeviceCommand = _DeleteWirelessDeviceCommand;\n    var _DeleteWirelessDeviceImportTaskCommand = class _DeleteWirelessDeviceImportTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteWirelessDeviceImportTask\", {})\n      .n(\"IoTWirelessClient\", \"DeleteWirelessDeviceImportTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteWirelessDeviceImportTaskCommand)\n      .de(de_DeleteWirelessDeviceImportTaskCommand)\n      .build() {};\n    __name(_DeleteWirelessDeviceImportTaskCommand, \"DeleteWirelessDeviceImportTaskCommand\");\n    var DeleteWirelessDeviceImportTaskCommand = _DeleteWirelessDeviceImportTaskCommand;\n    var _DeleteWirelessGatewayCommand = class _DeleteWirelessGatewayCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteWirelessGateway\", {})\n      .n(\"IoTWirelessClient\", \"DeleteWirelessGatewayCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteWirelessGatewayCommand)\n      .de(de_DeleteWirelessGatewayCommand)\n      .build() {};\n    __name(_DeleteWirelessGatewayCommand, \"DeleteWirelessGatewayCommand\");\n    var DeleteWirelessGatewayCommand = _DeleteWirelessGatewayCommand;\n    var _DeleteWirelessGatewayTaskCommand = class _DeleteWirelessGatewayTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteWirelessGatewayTask\", {})\n      .n(\"IoTWirelessClient\", \"DeleteWirelessGatewayTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteWirelessGatewayTaskCommand)\n      .de(de_DeleteWirelessGatewayTaskCommand)\n      .build() {};\n    __name(_DeleteWirelessGatewayTaskCommand, \"DeleteWirelessGatewayTaskCommand\");\n    var DeleteWirelessGatewayTaskCommand = _DeleteWirelessGatewayTaskCommand;\n    var _DeleteWirelessGatewayTaskDefinitionCommand = class _DeleteWirelessGatewayTaskDefinitionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeleteWirelessGatewayTaskDefinition\", {})\n      .n(\"IoTWirelessClient\", \"DeleteWirelessGatewayTaskDefinitionCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeleteWirelessGatewayTaskDefinitionCommand)\n      .de(de_DeleteWirelessGatewayTaskDefinitionCommand)\n      .build() {};\n    __name(\n      _DeleteWirelessGatewayTaskDefinitionCommand,\n      \"DeleteWirelessGatewayTaskDefinitionCommand\"\n    );\n    var DeleteWirelessGatewayTaskDefinitionCommand = _DeleteWirelessGatewayTaskDefinitionCommand;\n    var _DeregisterWirelessDeviceCommand = class _DeregisterWirelessDeviceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DeregisterWirelessDevice\", {})\n      .n(\"IoTWirelessClient\", \"DeregisterWirelessDeviceCommand\")\n      .f(void 0, void 0)\n      .ser(se_DeregisterWirelessDeviceCommand)\n      .de(de_DeregisterWirelessDeviceCommand)\n      .build() {};\n    __name(_DeregisterWirelessDeviceCommand, \"DeregisterWirelessDeviceCommand\");\n    var DeregisterWirelessDeviceCommand = _DeregisterWirelessDeviceCommand;\n    var _DisassociateAwsAccountFromPartnerAccountCommand = class _DisassociateAwsAccountFromPartnerAccountCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DisassociateAwsAccountFromPartnerAccount\", {})\n      .n(\"IoTWirelessClient\", \"DisassociateAwsAccountFromPartnerAccountCommand\")\n      .f(void 0, void 0)\n      .ser(se_DisassociateAwsAccountFromPartnerAccountCommand)\n      .de(de_DisassociateAwsAccountFromPartnerAccountCommand)\n      .build() {};\n    __name(\n      _DisassociateAwsAccountFromPartnerAccountCommand,\n      \"DisassociateAwsAccountFromPartnerAccountCommand\"\n    );\n    var DisassociateAwsAccountFromPartnerAccountCommand =\n      _DisassociateAwsAccountFromPartnerAccountCommand;\n    var _DisassociateMulticastGroupFromFuotaTaskCommand = class _DisassociateMulticastGroupFromFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DisassociateMulticastGroupFromFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"DisassociateMulticastGroupFromFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_DisassociateMulticastGroupFromFuotaTaskCommand)\n      .de(de_DisassociateMulticastGroupFromFuotaTaskCommand)\n      .build() {};\n    __name(\n      _DisassociateMulticastGroupFromFuotaTaskCommand,\n      \"DisassociateMulticastGroupFromFuotaTaskCommand\"\n    );\n    var DisassociateMulticastGroupFromFuotaTaskCommand =\n      _DisassociateMulticastGroupFromFuotaTaskCommand;\n    var _DisassociateWirelessDeviceFromFuotaTaskCommand = class _DisassociateWirelessDeviceFromFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DisassociateWirelessDeviceFromFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"DisassociateWirelessDeviceFromFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_DisassociateWirelessDeviceFromFuotaTaskCommand)\n      .de(de_DisassociateWirelessDeviceFromFuotaTaskCommand)\n      .build() {};\n    __name(\n      _DisassociateWirelessDeviceFromFuotaTaskCommand,\n      \"DisassociateWirelessDeviceFromFuotaTaskCommand\"\n    );\n    var DisassociateWirelessDeviceFromFuotaTaskCommand =\n      _DisassociateWirelessDeviceFromFuotaTaskCommand;\n    var _DisassociateWirelessDeviceFromMulticastGroupCommand = class _DisassociateWirelessDeviceFromMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DisassociateWirelessDeviceFromMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"DisassociateWirelessDeviceFromMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_DisassociateWirelessDeviceFromMulticastGroupCommand)\n      .de(de_DisassociateWirelessDeviceFromMulticastGroupCommand)\n      .build() {};\n    __name(\n      _DisassociateWirelessDeviceFromMulticastGroupCommand,\n      \"DisassociateWirelessDeviceFromMulticastGroupCommand\"\n    );\n    var DisassociateWirelessDeviceFromMulticastGroupCommand =\n      _DisassociateWirelessDeviceFromMulticastGroupCommand;\n    var _DisassociateWirelessDeviceFromThingCommand = class _DisassociateWirelessDeviceFromThingCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DisassociateWirelessDeviceFromThing\", {})\n      .n(\"IoTWirelessClient\", \"DisassociateWirelessDeviceFromThingCommand\")\n      .f(void 0, void 0)\n      .ser(se_DisassociateWirelessDeviceFromThingCommand)\n      .de(de_DisassociateWirelessDeviceFromThingCommand)\n      .build() {};\n    __name(\n      _DisassociateWirelessDeviceFromThingCommand,\n      \"DisassociateWirelessDeviceFromThingCommand\"\n    );\n    var DisassociateWirelessDeviceFromThingCommand = _DisassociateWirelessDeviceFromThingCommand;\n    var _DisassociateWirelessGatewayFromCertificateCommand = class _DisassociateWirelessGatewayFromCertificateCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DisassociateWirelessGatewayFromCertificate\", {})\n      .n(\"IoTWirelessClient\", \"DisassociateWirelessGatewayFromCertificateCommand\")\n      .f(void 0, void 0)\n      .ser(se_DisassociateWirelessGatewayFromCertificateCommand)\n      .de(de_DisassociateWirelessGatewayFromCertificateCommand)\n      .build() {};\n    __name(\n      _DisassociateWirelessGatewayFromCertificateCommand,\n      \"DisassociateWirelessGatewayFromCertificateCommand\"\n    );\n    var DisassociateWirelessGatewayFromCertificateCommand =\n      _DisassociateWirelessGatewayFromCertificateCommand;\n    var _DisassociateWirelessGatewayFromThingCommand = class _DisassociateWirelessGatewayFromThingCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"DisassociateWirelessGatewayFromThing\", {})\n      .n(\"IoTWirelessClient\", \"DisassociateWirelessGatewayFromThingCommand\")\n      .f(void 0, void 0)\n      .ser(se_DisassociateWirelessGatewayFromThingCommand)\n      .de(de_DisassociateWirelessGatewayFromThingCommand)\n      .build() {};\n    __name(\n      _DisassociateWirelessGatewayFromThingCommand,\n      \"DisassociateWirelessGatewayFromThingCommand\"\n    );\n    var DisassociateWirelessGatewayFromThingCommand = _DisassociateWirelessGatewayFromThingCommand;\n    var _GetDestinationCommand = class _GetDestinationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetDestination\", {})\n      .n(\"IoTWirelessClient\", \"GetDestinationCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetDestinationCommand)\n      .de(de_GetDestinationCommand)\n      .build() {};\n    __name(_GetDestinationCommand, \"GetDestinationCommand\");\n    var GetDestinationCommand = _GetDestinationCommand;\n    var _GetDeviceProfileCommand = class _GetDeviceProfileCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetDeviceProfile\", {})\n      .n(\"IoTWirelessClient\", \"GetDeviceProfileCommand\")\n      .f(void 0, GetDeviceProfileResponseFilterSensitiveLog)\n      .ser(se_GetDeviceProfileCommand)\n      .de(de_GetDeviceProfileCommand)\n      .build() {};\n    __name(_GetDeviceProfileCommand, \"GetDeviceProfileCommand\");\n    var GetDeviceProfileCommand = _GetDeviceProfileCommand;\n    var _GetEventConfigurationByResourceTypesCommand = class _GetEventConfigurationByResourceTypesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetEventConfigurationByResourceTypes\", {})\n      .n(\"IoTWirelessClient\", \"GetEventConfigurationByResourceTypesCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetEventConfigurationByResourceTypesCommand)\n      .de(de_GetEventConfigurationByResourceTypesCommand)\n      .build() {};\n    __name(\n      _GetEventConfigurationByResourceTypesCommand,\n      \"GetEventConfigurationByResourceTypesCommand\"\n    );\n    var GetEventConfigurationByResourceTypesCommand = _GetEventConfigurationByResourceTypesCommand;\n    var _GetFuotaTaskCommand = class _GetFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"GetFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetFuotaTaskCommand)\n      .de(de_GetFuotaTaskCommand)\n      .build() {};\n    __name(_GetFuotaTaskCommand, \"GetFuotaTaskCommand\");\n    var GetFuotaTaskCommand = _GetFuotaTaskCommand;\n    var _GetLogLevelsByResourceTypesCommand = class _GetLogLevelsByResourceTypesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetLogLevelsByResourceTypes\", {})\n      .n(\"IoTWirelessClient\", \"GetLogLevelsByResourceTypesCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetLogLevelsByResourceTypesCommand)\n      .de(de_GetLogLevelsByResourceTypesCommand)\n      .build() {};\n    __name(_GetLogLevelsByResourceTypesCommand, \"GetLogLevelsByResourceTypesCommand\");\n    var GetLogLevelsByResourceTypesCommand = _GetLogLevelsByResourceTypesCommand;\n    var _GetMetricConfigurationCommand = class _GetMetricConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetMetricConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"GetMetricConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetMetricConfigurationCommand)\n      .de(de_GetMetricConfigurationCommand)\n      .build() {};\n    __name(_GetMetricConfigurationCommand, \"GetMetricConfigurationCommand\");\n    var GetMetricConfigurationCommand = _GetMetricConfigurationCommand;\n    var _GetMetricsCommand = class _GetMetricsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetMetrics\", {})\n      .n(\"IoTWirelessClient\", \"GetMetricsCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetMetricsCommand)\n      .de(de_GetMetricsCommand)\n      .build() {};\n    __name(_GetMetricsCommand, \"GetMetricsCommand\");\n    var GetMetricsCommand = _GetMetricsCommand;\n    var _GetMulticastGroupCommand = class _GetMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"GetMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetMulticastGroupCommand)\n      .de(de_GetMulticastGroupCommand)\n      .build() {};\n    __name(_GetMulticastGroupCommand, \"GetMulticastGroupCommand\");\n    var GetMulticastGroupCommand = _GetMulticastGroupCommand;\n    var _GetMulticastGroupSessionCommand = class _GetMulticastGroupSessionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetMulticastGroupSession\", {})\n      .n(\"IoTWirelessClient\", \"GetMulticastGroupSessionCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetMulticastGroupSessionCommand)\n      .de(de_GetMulticastGroupSessionCommand)\n      .build() {};\n    __name(_GetMulticastGroupSessionCommand, \"GetMulticastGroupSessionCommand\");\n    var GetMulticastGroupSessionCommand = _GetMulticastGroupSessionCommand;\n    var _GetNetworkAnalyzerConfigurationCommand = class _GetNetworkAnalyzerConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetNetworkAnalyzerConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"GetNetworkAnalyzerConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetNetworkAnalyzerConfigurationCommand)\n      .de(de_GetNetworkAnalyzerConfigurationCommand)\n      .build() {};\n    __name(_GetNetworkAnalyzerConfigurationCommand, \"GetNetworkAnalyzerConfigurationCommand\");\n    var GetNetworkAnalyzerConfigurationCommand = _GetNetworkAnalyzerConfigurationCommand;\n    var _GetPartnerAccountCommand = class _GetPartnerAccountCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetPartnerAccount\", {})\n      .n(\"IoTWirelessClient\", \"GetPartnerAccountCommand\")\n      .f(void 0, GetPartnerAccountResponseFilterSensitiveLog)\n      .ser(se_GetPartnerAccountCommand)\n      .de(de_GetPartnerAccountCommand)\n      .build() {};\n    __name(_GetPartnerAccountCommand, \"GetPartnerAccountCommand\");\n    var GetPartnerAccountCommand = _GetPartnerAccountCommand;\n    var _GetPositionCommand = class _GetPositionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetPosition\", {})\n      .n(\"IoTWirelessClient\", \"GetPositionCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetPositionCommand)\n      .de(de_GetPositionCommand)\n      .build() {};\n    __name(_GetPositionCommand, \"GetPositionCommand\");\n    var GetPositionCommand = _GetPositionCommand;\n    var _GetPositionConfigurationCommand = class _GetPositionConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetPositionConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"GetPositionConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetPositionConfigurationCommand)\n      .de(de_GetPositionConfigurationCommand)\n      .build() {};\n    __name(_GetPositionConfigurationCommand, \"GetPositionConfigurationCommand\");\n    var GetPositionConfigurationCommand = _GetPositionConfigurationCommand;\n    var _GetPositionEstimateCommand = class _GetPositionEstimateCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetPositionEstimate\", {})\n      .n(\"IoTWirelessClient\", \"GetPositionEstimateCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetPositionEstimateCommand)\n      .de(de_GetPositionEstimateCommand)\n      .build() {};\n    __name(_GetPositionEstimateCommand, \"GetPositionEstimateCommand\");\n    var GetPositionEstimateCommand2 = _GetPositionEstimateCommand;\n    var _GetResourceEventConfigurationCommand = class _GetResourceEventConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetResourceEventConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"GetResourceEventConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetResourceEventConfigurationCommand)\n      .de(de_GetResourceEventConfigurationCommand)\n      .build() {};\n    __name(_GetResourceEventConfigurationCommand, \"GetResourceEventConfigurationCommand\");\n    var GetResourceEventConfigurationCommand = _GetResourceEventConfigurationCommand;\n    var _GetResourceLogLevelCommand = class _GetResourceLogLevelCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetResourceLogLevel\", {})\n      .n(\"IoTWirelessClient\", \"GetResourceLogLevelCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetResourceLogLevelCommand)\n      .de(de_GetResourceLogLevelCommand)\n      .build() {};\n    __name(_GetResourceLogLevelCommand, \"GetResourceLogLevelCommand\");\n    var GetResourceLogLevelCommand = _GetResourceLogLevelCommand;\n    var _GetResourcePositionCommand = class _GetResourcePositionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetResourcePosition\", {})\n      .n(\"IoTWirelessClient\", \"GetResourcePositionCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetResourcePositionCommand)\n      .de(de_GetResourcePositionCommand)\n      .build() {};\n    __name(_GetResourcePositionCommand, \"GetResourcePositionCommand\");\n    var GetResourcePositionCommand = _GetResourcePositionCommand;\n    var _GetServiceEndpointCommand = class _GetServiceEndpointCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetServiceEndpoint\", {})\n      .n(\"IoTWirelessClient\", \"GetServiceEndpointCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetServiceEndpointCommand)\n      .de(de_GetServiceEndpointCommand)\n      .build() {};\n    __name(_GetServiceEndpointCommand, \"GetServiceEndpointCommand\");\n    var GetServiceEndpointCommand = _GetServiceEndpointCommand;\n    var _GetServiceProfileCommand = class _GetServiceProfileCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetServiceProfile\", {})\n      .n(\"IoTWirelessClient\", \"GetServiceProfileCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetServiceProfileCommand)\n      .de(de_GetServiceProfileCommand)\n      .build() {};\n    __name(_GetServiceProfileCommand, \"GetServiceProfileCommand\");\n    var GetServiceProfileCommand = _GetServiceProfileCommand;\n    var _GetWirelessDeviceCommand = class _GetWirelessDeviceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessDevice\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessDeviceCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessDeviceCommand)\n      .de(de_GetWirelessDeviceCommand)\n      .build() {};\n    __name(_GetWirelessDeviceCommand, \"GetWirelessDeviceCommand\");\n    var GetWirelessDeviceCommand = _GetWirelessDeviceCommand;\n    var _GetWirelessDeviceImportTaskCommand = class _GetWirelessDeviceImportTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessDeviceImportTask\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessDeviceImportTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessDeviceImportTaskCommand)\n      .de(de_GetWirelessDeviceImportTaskCommand)\n      .build() {};\n    __name(_GetWirelessDeviceImportTaskCommand, \"GetWirelessDeviceImportTaskCommand\");\n    var GetWirelessDeviceImportTaskCommand = _GetWirelessDeviceImportTaskCommand;\n    var _GetWirelessDeviceStatisticsCommand = class _GetWirelessDeviceStatisticsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessDeviceStatistics\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessDeviceStatisticsCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessDeviceStatisticsCommand)\n      .de(de_GetWirelessDeviceStatisticsCommand)\n      .build() {};\n    __name(_GetWirelessDeviceStatisticsCommand, \"GetWirelessDeviceStatisticsCommand\");\n    var GetWirelessDeviceStatisticsCommand = _GetWirelessDeviceStatisticsCommand;\n    var _GetWirelessGatewayCertificateCommand = class _GetWirelessGatewayCertificateCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessGatewayCertificate\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessGatewayCertificateCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessGatewayCertificateCommand)\n      .de(de_GetWirelessGatewayCertificateCommand)\n      .build() {};\n    __name(_GetWirelessGatewayCertificateCommand, \"GetWirelessGatewayCertificateCommand\");\n    var GetWirelessGatewayCertificateCommand = _GetWirelessGatewayCertificateCommand;\n    var _GetWirelessGatewayCommand = class _GetWirelessGatewayCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessGateway\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessGatewayCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessGatewayCommand)\n      .de(de_GetWirelessGatewayCommand)\n      .build() {};\n    __name(_GetWirelessGatewayCommand, \"GetWirelessGatewayCommand\");\n    var GetWirelessGatewayCommand = _GetWirelessGatewayCommand;\n    var _GetWirelessGatewayFirmwareInformationCommand = class _GetWirelessGatewayFirmwareInformationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessGatewayFirmwareInformation\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessGatewayFirmwareInformationCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessGatewayFirmwareInformationCommand)\n      .de(de_GetWirelessGatewayFirmwareInformationCommand)\n      .build() {};\n    __name(\n      _GetWirelessGatewayFirmwareInformationCommand,\n      \"GetWirelessGatewayFirmwareInformationCommand\"\n    );\n    var GetWirelessGatewayFirmwareInformationCommand =\n      _GetWirelessGatewayFirmwareInformationCommand;\n    var _GetWirelessGatewayStatisticsCommand = class _GetWirelessGatewayStatisticsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessGatewayStatistics\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessGatewayStatisticsCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessGatewayStatisticsCommand)\n      .de(de_GetWirelessGatewayStatisticsCommand)\n      .build() {};\n    __name(_GetWirelessGatewayStatisticsCommand, \"GetWirelessGatewayStatisticsCommand\");\n    var GetWirelessGatewayStatisticsCommand = _GetWirelessGatewayStatisticsCommand;\n    var _GetWirelessGatewayTaskCommand = class _GetWirelessGatewayTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessGatewayTask\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessGatewayTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessGatewayTaskCommand)\n      .de(de_GetWirelessGatewayTaskCommand)\n      .build() {};\n    __name(_GetWirelessGatewayTaskCommand, \"GetWirelessGatewayTaskCommand\");\n    var GetWirelessGatewayTaskCommand = _GetWirelessGatewayTaskCommand;\n    var _GetWirelessGatewayTaskDefinitionCommand = class _GetWirelessGatewayTaskDefinitionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"GetWirelessGatewayTaskDefinition\", {})\n      .n(\"IoTWirelessClient\", \"GetWirelessGatewayTaskDefinitionCommand\")\n      .f(void 0, void 0)\n      .ser(se_GetWirelessGatewayTaskDefinitionCommand)\n      .de(de_GetWirelessGatewayTaskDefinitionCommand)\n      .build() {};\n    __name(_GetWirelessGatewayTaskDefinitionCommand, \"GetWirelessGatewayTaskDefinitionCommand\");\n    var GetWirelessGatewayTaskDefinitionCommand = _GetWirelessGatewayTaskDefinitionCommand;\n    var _ListDestinationsCommand = class _ListDestinationsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListDestinations\", {})\n      .n(\"IoTWirelessClient\", \"ListDestinationsCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListDestinationsCommand)\n      .de(de_ListDestinationsCommand)\n      .build() {};\n    __name(_ListDestinationsCommand, \"ListDestinationsCommand\");\n    var ListDestinationsCommand = _ListDestinationsCommand;\n    var _ListDeviceProfilesCommand = class _ListDeviceProfilesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListDeviceProfiles\", {})\n      .n(\"IoTWirelessClient\", \"ListDeviceProfilesCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListDeviceProfilesCommand)\n      .de(de_ListDeviceProfilesCommand)\n      .build() {};\n    __name(_ListDeviceProfilesCommand, \"ListDeviceProfilesCommand\");\n    var ListDeviceProfilesCommand = _ListDeviceProfilesCommand;\n    var _ListDevicesForWirelessDeviceImportTaskCommand = class _ListDevicesForWirelessDeviceImportTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListDevicesForWirelessDeviceImportTask\", {})\n      .n(\"IoTWirelessClient\", \"ListDevicesForWirelessDeviceImportTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListDevicesForWirelessDeviceImportTaskCommand)\n      .de(de_ListDevicesForWirelessDeviceImportTaskCommand)\n      .build() {};\n    __name(\n      _ListDevicesForWirelessDeviceImportTaskCommand,\n      \"ListDevicesForWirelessDeviceImportTaskCommand\"\n    );\n    var ListDevicesForWirelessDeviceImportTaskCommand =\n      _ListDevicesForWirelessDeviceImportTaskCommand;\n    var _ListEventConfigurationsCommand = class _ListEventConfigurationsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListEventConfigurations\", {})\n      .n(\"IoTWirelessClient\", \"ListEventConfigurationsCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListEventConfigurationsCommand)\n      .de(de_ListEventConfigurationsCommand)\n      .build() {};\n    __name(_ListEventConfigurationsCommand, \"ListEventConfigurationsCommand\");\n    var ListEventConfigurationsCommand = _ListEventConfigurationsCommand;\n    var _ListFuotaTasksCommand = class _ListFuotaTasksCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListFuotaTasks\", {})\n      .n(\"IoTWirelessClient\", \"ListFuotaTasksCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListFuotaTasksCommand)\n      .de(de_ListFuotaTasksCommand)\n      .build() {};\n    __name(_ListFuotaTasksCommand, \"ListFuotaTasksCommand\");\n    var ListFuotaTasksCommand = _ListFuotaTasksCommand;\n    var _ListMulticastGroupsByFuotaTaskCommand = class _ListMulticastGroupsByFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListMulticastGroupsByFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"ListMulticastGroupsByFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListMulticastGroupsByFuotaTaskCommand)\n      .de(de_ListMulticastGroupsByFuotaTaskCommand)\n      .build() {};\n    __name(_ListMulticastGroupsByFuotaTaskCommand, \"ListMulticastGroupsByFuotaTaskCommand\");\n    var ListMulticastGroupsByFuotaTaskCommand = _ListMulticastGroupsByFuotaTaskCommand;\n    var _ListMulticastGroupsCommand = class _ListMulticastGroupsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListMulticastGroups\", {})\n      .n(\"IoTWirelessClient\", \"ListMulticastGroupsCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListMulticastGroupsCommand)\n      .de(de_ListMulticastGroupsCommand)\n      .build() {};\n    __name(_ListMulticastGroupsCommand, \"ListMulticastGroupsCommand\");\n    var ListMulticastGroupsCommand = _ListMulticastGroupsCommand;\n    var _ListNetworkAnalyzerConfigurationsCommand = class _ListNetworkAnalyzerConfigurationsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListNetworkAnalyzerConfigurations\", {})\n      .n(\"IoTWirelessClient\", \"ListNetworkAnalyzerConfigurationsCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListNetworkAnalyzerConfigurationsCommand)\n      .de(de_ListNetworkAnalyzerConfigurationsCommand)\n      .build() {};\n    __name(_ListNetworkAnalyzerConfigurationsCommand, \"ListNetworkAnalyzerConfigurationsCommand\");\n    var ListNetworkAnalyzerConfigurationsCommand = _ListNetworkAnalyzerConfigurationsCommand;\n    var _ListPartnerAccountsCommand = class _ListPartnerAccountsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListPartnerAccounts\", {})\n      .n(\"IoTWirelessClient\", \"ListPartnerAccountsCommand\")\n      .f(void 0, ListPartnerAccountsResponseFilterSensitiveLog)\n      .ser(se_ListPartnerAccountsCommand)\n      .de(de_ListPartnerAccountsCommand)\n      .build() {};\n    __name(_ListPartnerAccountsCommand, \"ListPartnerAccountsCommand\");\n    var ListPartnerAccountsCommand = _ListPartnerAccountsCommand;\n    var _ListPositionConfigurationsCommand = class _ListPositionConfigurationsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListPositionConfigurations\", {})\n      .n(\"IoTWirelessClient\", \"ListPositionConfigurationsCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListPositionConfigurationsCommand)\n      .de(de_ListPositionConfigurationsCommand)\n      .build() {};\n    __name(_ListPositionConfigurationsCommand, \"ListPositionConfigurationsCommand\");\n    var ListPositionConfigurationsCommand = _ListPositionConfigurationsCommand;\n    var _ListQueuedMessagesCommand = class _ListQueuedMessagesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListQueuedMessages\", {})\n      .n(\"IoTWirelessClient\", \"ListQueuedMessagesCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListQueuedMessagesCommand)\n      .de(de_ListQueuedMessagesCommand)\n      .build() {};\n    __name(_ListQueuedMessagesCommand, \"ListQueuedMessagesCommand\");\n    var ListQueuedMessagesCommand = _ListQueuedMessagesCommand;\n    var _ListServiceProfilesCommand = class _ListServiceProfilesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListServiceProfiles\", {})\n      .n(\"IoTWirelessClient\", \"ListServiceProfilesCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListServiceProfilesCommand)\n      .de(de_ListServiceProfilesCommand)\n      .build() {};\n    __name(_ListServiceProfilesCommand, \"ListServiceProfilesCommand\");\n    var ListServiceProfilesCommand = _ListServiceProfilesCommand;\n    var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListTagsForResource\", {})\n      .n(\"IoTWirelessClient\", \"ListTagsForResourceCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListTagsForResourceCommand)\n      .de(de_ListTagsForResourceCommand)\n      .build() {};\n    __name(_ListTagsForResourceCommand, \"ListTagsForResourceCommand\");\n    var ListTagsForResourceCommand = _ListTagsForResourceCommand;\n    var _ListWirelessDeviceImportTasksCommand = class _ListWirelessDeviceImportTasksCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListWirelessDeviceImportTasks\", {})\n      .n(\"IoTWirelessClient\", \"ListWirelessDeviceImportTasksCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListWirelessDeviceImportTasksCommand)\n      .de(de_ListWirelessDeviceImportTasksCommand)\n      .build() {};\n    __name(_ListWirelessDeviceImportTasksCommand, \"ListWirelessDeviceImportTasksCommand\");\n    var ListWirelessDeviceImportTasksCommand = _ListWirelessDeviceImportTasksCommand;\n    var _ListWirelessDevicesCommand = class _ListWirelessDevicesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListWirelessDevices\", {})\n      .n(\"IoTWirelessClient\", \"ListWirelessDevicesCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListWirelessDevicesCommand)\n      .de(de_ListWirelessDevicesCommand)\n      .build() {};\n    __name(_ListWirelessDevicesCommand, \"ListWirelessDevicesCommand\");\n    var ListWirelessDevicesCommand = _ListWirelessDevicesCommand;\n    var _ListWirelessGatewaysCommand = class _ListWirelessGatewaysCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListWirelessGateways\", {})\n      .n(\"IoTWirelessClient\", \"ListWirelessGatewaysCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListWirelessGatewaysCommand)\n      .de(de_ListWirelessGatewaysCommand)\n      .build() {};\n    __name(_ListWirelessGatewaysCommand, \"ListWirelessGatewaysCommand\");\n    var ListWirelessGatewaysCommand = _ListWirelessGatewaysCommand;\n    var _ListWirelessGatewayTaskDefinitionsCommand = class _ListWirelessGatewayTaskDefinitionsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ListWirelessGatewayTaskDefinitions\", {})\n      .n(\"IoTWirelessClient\", \"ListWirelessGatewayTaskDefinitionsCommand\")\n      .f(void 0, void 0)\n      .ser(se_ListWirelessGatewayTaskDefinitionsCommand)\n      .de(de_ListWirelessGatewayTaskDefinitionsCommand)\n      .build() {};\n    __name(_ListWirelessGatewayTaskDefinitionsCommand, \"ListWirelessGatewayTaskDefinitionsCommand\");\n    var ListWirelessGatewayTaskDefinitionsCommand = _ListWirelessGatewayTaskDefinitionsCommand;\n    var _PutPositionConfigurationCommand = class _PutPositionConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"PutPositionConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"PutPositionConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_PutPositionConfigurationCommand)\n      .de(de_PutPositionConfigurationCommand)\n      .build() {};\n    __name(_PutPositionConfigurationCommand, \"PutPositionConfigurationCommand\");\n    var PutPositionConfigurationCommand = _PutPositionConfigurationCommand;\n    var _PutResourceLogLevelCommand = class _PutResourceLogLevelCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"PutResourceLogLevel\", {})\n      .n(\"IoTWirelessClient\", \"PutResourceLogLevelCommand\")\n      .f(void 0, void 0)\n      .ser(se_PutResourceLogLevelCommand)\n      .de(de_PutResourceLogLevelCommand)\n      .build() {};\n    __name(_PutResourceLogLevelCommand, \"PutResourceLogLevelCommand\");\n    var PutResourceLogLevelCommand = _PutResourceLogLevelCommand;\n    var _ResetAllResourceLogLevelsCommand = class _ResetAllResourceLogLevelsCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ResetAllResourceLogLevels\", {})\n      .n(\"IoTWirelessClient\", \"ResetAllResourceLogLevelsCommand\")\n      .f(void 0, void 0)\n      .ser(se_ResetAllResourceLogLevelsCommand)\n      .de(de_ResetAllResourceLogLevelsCommand)\n      .build() {};\n    __name(_ResetAllResourceLogLevelsCommand, \"ResetAllResourceLogLevelsCommand\");\n    var ResetAllResourceLogLevelsCommand = _ResetAllResourceLogLevelsCommand;\n    var _ResetResourceLogLevelCommand = class _ResetResourceLogLevelCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"ResetResourceLogLevel\", {})\n      .n(\"IoTWirelessClient\", \"ResetResourceLogLevelCommand\")\n      .f(void 0, void 0)\n      .ser(se_ResetResourceLogLevelCommand)\n      .de(de_ResetResourceLogLevelCommand)\n      .build() {};\n    __name(_ResetResourceLogLevelCommand, \"ResetResourceLogLevelCommand\");\n    var ResetResourceLogLevelCommand = _ResetResourceLogLevelCommand;\n    var _SendDataToMulticastGroupCommand = class _SendDataToMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"SendDataToMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"SendDataToMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_SendDataToMulticastGroupCommand)\n      .de(de_SendDataToMulticastGroupCommand)\n      .build() {};\n    __name(_SendDataToMulticastGroupCommand, \"SendDataToMulticastGroupCommand\");\n    var SendDataToMulticastGroupCommand = _SendDataToMulticastGroupCommand;\n    var _SendDataToWirelessDeviceCommand = class _SendDataToWirelessDeviceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"SendDataToWirelessDevice\", {})\n      .n(\"IoTWirelessClient\", \"SendDataToWirelessDeviceCommand\")\n      .f(void 0, void 0)\n      .ser(se_SendDataToWirelessDeviceCommand)\n      .de(de_SendDataToWirelessDeviceCommand)\n      .build() {};\n    __name(_SendDataToWirelessDeviceCommand, \"SendDataToWirelessDeviceCommand\");\n    var SendDataToWirelessDeviceCommand = _SendDataToWirelessDeviceCommand;\n    var _StartBulkAssociateWirelessDeviceWithMulticastGroupCommand = class _StartBulkAssociateWirelessDeviceWithMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"StartBulkAssociateWirelessDeviceWithMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"StartBulkAssociateWirelessDeviceWithMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_StartBulkAssociateWirelessDeviceWithMulticastGroupCommand)\n      .de(de_StartBulkAssociateWirelessDeviceWithMulticastGroupCommand)\n      .build() {};\n    __name(\n      _StartBulkAssociateWirelessDeviceWithMulticastGroupCommand,\n      \"StartBulkAssociateWirelessDeviceWithMulticastGroupCommand\"\n    );\n    var StartBulkAssociateWirelessDeviceWithMulticastGroupCommand =\n      _StartBulkAssociateWirelessDeviceWithMulticastGroupCommand;\n    var _StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand = class _StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"StartBulkDisassociateWirelessDeviceFromMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand)\n      .de(de_StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand)\n      .build() {};\n    __name(\n      _StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand,\n      \"StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand\"\n    );\n    var StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand =\n      _StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand;\n    var _StartFuotaTaskCommand = class _StartFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"StartFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"StartFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_StartFuotaTaskCommand)\n      .de(de_StartFuotaTaskCommand)\n      .build() {};\n    __name(_StartFuotaTaskCommand, \"StartFuotaTaskCommand\");\n    var StartFuotaTaskCommand = _StartFuotaTaskCommand;\n    var _StartMulticastGroupSessionCommand = class _StartMulticastGroupSessionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"StartMulticastGroupSession\", {})\n      .n(\"IoTWirelessClient\", \"StartMulticastGroupSessionCommand\")\n      .f(void 0, void 0)\n      .ser(se_StartMulticastGroupSessionCommand)\n      .de(de_StartMulticastGroupSessionCommand)\n      .build() {};\n    __name(_StartMulticastGroupSessionCommand, \"StartMulticastGroupSessionCommand\");\n    var StartMulticastGroupSessionCommand = _StartMulticastGroupSessionCommand;\n    var _StartSingleWirelessDeviceImportTaskCommand = class _StartSingleWirelessDeviceImportTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"StartSingleWirelessDeviceImportTask\", {})\n      .n(\"IoTWirelessClient\", \"StartSingleWirelessDeviceImportTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_StartSingleWirelessDeviceImportTaskCommand)\n      .de(de_StartSingleWirelessDeviceImportTaskCommand)\n      .build() {};\n    __name(\n      _StartSingleWirelessDeviceImportTaskCommand,\n      \"StartSingleWirelessDeviceImportTaskCommand\"\n    );\n    var StartSingleWirelessDeviceImportTaskCommand = _StartSingleWirelessDeviceImportTaskCommand;\n    var _StartWirelessDeviceImportTaskCommand = class _StartWirelessDeviceImportTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"StartWirelessDeviceImportTask\", {})\n      .n(\"IoTWirelessClient\", \"StartWirelessDeviceImportTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_StartWirelessDeviceImportTaskCommand)\n      .de(de_StartWirelessDeviceImportTaskCommand)\n      .build() {};\n    __name(_StartWirelessDeviceImportTaskCommand, \"StartWirelessDeviceImportTaskCommand\");\n    var StartWirelessDeviceImportTaskCommand = _StartWirelessDeviceImportTaskCommand;\n    var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"TagResource\", {})\n      .n(\"IoTWirelessClient\", \"TagResourceCommand\")\n      .f(void 0, void 0)\n      .ser(se_TagResourceCommand)\n      .de(de_TagResourceCommand)\n      .build() {};\n    __name(_TagResourceCommand, \"TagResourceCommand\");\n    var TagResourceCommand = _TagResourceCommand;\n    var _TestWirelessDeviceCommand = class _TestWirelessDeviceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"TestWirelessDevice\", {})\n      .n(\"IoTWirelessClient\", \"TestWirelessDeviceCommand\")\n      .f(void 0, void 0)\n      .ser(se_TestWirelessDeviceCommand)\n      .de(de_TestWirelessDeviceCommand)\n      .build() {};\n    __name(_TestWirelessDeviceCommand, \"TestWirelessDeviceCommand\");\n    var TestWirelessDeviceCommand = _TestWirelessDeviceCommand;\n    var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UntagResource\", {})\n      .n(\"IoTWirelessClient\", \"UntagResourceCommand\")\n      .f(void 0, void 0)\n      .ser(se_UntagResourceCommand)\n      .de(de_UntagResourceCommand)\n      .build() {};\n    __name(_UntagResourceCommand, \"UntagResourceCommand\");\n    var UntagResourceCommand = _UntagResourceCommand;\n    var _UpdateDestinationCommand = class _UpdateDestinationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateDestination\", {})\n      .n(\"IoTWirelessClient\", \"UpdateDestinationCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateDestinationCommand)\n      .de(de_UpdateDestinationCommand)\n      .build() {};\n    __name(_UpdateDestinationCommand, \"UpdateDestinationCommand\");\n    var UpdateDestinationCommand = _UpdateDestinationCommand;\n    var _UpdateEventConfigurationByResourceTypesCommand = class _UpdateEventConfigurationByResourceTypesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateEventConfigurationByResourceTypes\", {})\n      .n(\"IoTWirelessClient\", \"UpdateEventConfigurationByResourceTypesCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateEventConfigurationByResourceTypesCommand)\n      .de(de_UpdateEventConfigurationByResourceTypesCommand)\n      .build() {};\n    __name(\n      _UpdateEventConfigurationByResourceTypesCommand,\n      \"UpdateEventConfigurationByResourceTypesCommand\"\n    );\n    var UpdateEventConfigurationByResourceTypesCommand =\n      _UpdateEventConfigurationByResourceTypesCommand;\n    var _UpdateFuotaTaskCommand = class _UpdateFuotaTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateFuotaTask\", {})\n      .n(\"IoTWirelessClient\", \"UpdateFuotaTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateFuotaTaskCommand)\n      .de(de_UpdateFuotaTaskCommand)\n      .build() {};\n    __name(_UpdateFuotaTaskCommand, \"UpdateFuotaTaskCommand\");\n    var UpdateFuotaTaskCommand = _UpdateFuotaTaskCommand;\n    var _UpdateLogLevelsByResourceTypesCommand = class _UpdateLogLevelsByResourceTypesCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateLogLevelsByResourceTypes\", {})\n      .n(\"IoTWirelessClient\", \"UpdateLogLevelsByResourceTypesCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateLogLevelsByResourceTypesCommand)\n      .de(de_UpdateLogLevelsByResourceTypesCommand)\n      .build() {};\n    __name(_UpdateLogLevelsByResourceTypesCommand, \"UpdateLogLevelsByResourceTypesCommand\");\n    var UpdateLogLevelsByResourceTypesCommand = _UpdateLogLevelsByResourceTypesCommand;\n    var _UpdateMetricConfigurationCommand = class _UpdateMetricConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateMetricConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"UpdateMetricConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateMetricConfigurationCommand)\n      .de(de_UpdateMetricConfigurationCommand)\n      .build() {};\n    __name(_UpdateMetricConfigurationCommand, \"UpdateMetricConfigurationCommand\");\n    var UpdateMetricConfigurationCommand = _UpdateMetricConfigurationCommand;\n    var _UpdateMulticastGroupCommand = class _UpdateMulticastGroupCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateMulticastGroup\", {})\n      .n(\"IoTWirelessClient\", \"UpdateMulticastGroupCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateMulticastGroupCommand)\n      .de(de_UpdateMulticastGroupCommand)\n      .build() {};\n    __name(_UpdateMulticastGroupCommand, \"UpdateMulticastGroupCommand\");\n    var UpdateMulticastGroupCommand = _UpdateMulticastGroupCommand;\n    var _UpdateNetworkAnalyzerConfigurationCommand = class _UpdateNetworkAnalyzerConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateNetworkAnalyzerConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"UpdateNetworkAnalyzerConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateNetworkAnalyzerConfigurationCommand)\n      .de(de_UpdateNetworkAnalyzerConfigurationCommand)\n      .build() {};\n    __name(_UpdateNetworkAnalyzerConfigurationCommand, \"UpdateNetworkAnalyzerConfigurationCommand\");\n    var UpdateNetworkAnalyzerConfigurationCommand = _UpdateNetworkAnalyzerConfigurationCommand;\n    var _UpdatePartnerAccountCommand = class _UpdatePartnerAccountCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdatePartnerAccount\", {})\n      .n(\"IoTWirelessClient\", \"UpdatePartnerAccountCommand\")\n      .f(UpdatePartnerAccountRequestFilterSensitiveLog, void 0)\n      .ser(se_UpdatePartnerAccountCommand)\n      .de(de_UpdatePartnerAccountCommand)\n      .build() {};\n    __name(_UpdatePartnerAccountCommand, \"UpdatePartnerAccountCommand\");\n    var UpdatePartnerAccountCommand = _UpdatePartnerAccountCommand;\n    var _UpdatePositionCommand = class _UpdatePositionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdatePosition\", {})\n      .n(\"IoTWirelessClient\", \"UpdatePositionCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdatePositionCommand)\n      .de(de_UpdatePositionCommand)\n      .build() {};\n    __name(_UpdatePositionCommand, \"UpdatePositionCommand\");\n    var UpdatePositionCommand = _UpdatePositionCommand;\n    var _UpdateResourceEventConfigurationCommand = class _UpdateResourceEventConfigurationCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateResourceEventConfiguration\", {})\n      .n(\"IoTWirelessClient\", \"UpdateResourceEventConfigurationCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateResourceEventConfigurationCommand)\n      .de(de_UpdateResourceEventConfigurationCommand)\n      .build() {};\n    __name(_UpdateResourceEventConfigurationCommand, \"UpdateResourceEventConfigurationCommand\");\n    var UpdateResourceEventConfigurationCommand = _UpdateResourceEventConfigurationCommand;\n    var _UpdateResourcePositionCommand = class _UpdateResourcePositionCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateResourcePosition\", {})\n      .n(\"IoTWirelessClient\", \"UpdateResourcePositionCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateResourcePositionCommand)\n      .de(de_UpdateResourcePositionCommand)\n      .build() {};\n    __name(_UpdateResourcePositionCommand, \"UpdateResourcePositionCommand\");\n    var UpdateResourcePositionCommand = _UpdateResourcePositionCommand;\n    var _UpdateWirelessDeviceCommand = class _UpdateWirelessDeviceCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateWirelessDevice\", {})\n      .n(\"IoTWirelessClient\", \"UpdateWirelessDeviceCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateWirelessDeviceCommand)\n      .de(de_UpdateWirelessDeviceCommand)\n      .build() {};\n    __name(_UpdateWirelessDeviceCommand, \"UpdateWirelessDeviceCommand\");\n    var UpdateWirelessDeviceCommand = _UpdateWirelessDeviceCommand;\n    var _UpdateWirelessDeviceImportTaskCommand = class _UpdateWirelessDeviceImportTaskCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateWirelessDeviceImportTask\", {})\n      .n(\"IoTWirelessClient\", \"UpdateWirelessDeviceImportTaskCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateWirelessDeviceImportTaskCommand)\n      .de(de_UpdateWirelessDeviceImportTaskCommand)\n      .build() {};\n    __name(_UpdateWirelessDeviceImportTaskCommand, \"UpdateWirelessDeviceImportTaskCommand\");\n    var UpdateWirelessDeviceImportTaskCommand = _UpdateWirelessDeviceImportTaskCommand;\n    var _UpdateWirelessGatewayCommand = class _UpdateWirelessGatewayCommand extends import_smithy_client.Command.classBuilder()\n      .ep({\n        ...commonParams,\n      })\n      .m(function (Command, cs, config, o) {\n        return [\n          (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),\n          (0, import_middleware_endpoint.getEndpointPlugin)(\n            config,\n            Command.getEndpointParameterInstructions()\n          ),\n        ];\n      })\n      .s(\"iotwireless\", \"UpdateWirelessGateway\", {})\n      .n(\"IoTWirelessClient\", \"UpdateWirelessGatewayCommand\")\n      .f(void 0, void 0)\n      .ser(se_UpdateWirelessGatewayCommand)\n      .de(de_UpdateWirelessGatewayCommand)\n      .build() {};\n    __name(_UpdateWirelessGatewayCommand, \"UpdateWirelessGatewayCommand\");\n    var UpdateWirelessGatewayCommand = _UpdateWirelessGatewayCommand;\n    var commands = {\n      AssociateAwsAccountWithPartnerAccountCommand,\n      AssociateMulticastGroupWithFuotaTaskCommand,\n      AssociateWirelessDeviceWithFuotaTaskCommand,\n      AssociateWirelessDeviceWithMulticastGroupCommand,\n      AssociateWirelessDeviceWithThingCommand,\n      AssociateWirelessGatewayWithCertificateCommand,\n      AssociateWirelessGatewayWithThingCommand,\n      CancelMulticastGroupSessionCommand,\n      CreateDestinationCommand,\n      CreateDeviceProfileCommand,\n      CreateFuotaTaskCommand,\n      CreateMulticastGroupCommand,\n      CreateNetworkAnalyzerConfigurationCommand,\n      CreateServiceProfileCommand,\n      CreateWirelessDeviceCommand,\n      CreateWirelessGatewayCommand,\n      CreateWirelessGatewayTaskCommand,\n      CreateWirelessGatewayTaskDefinitionCommand,\n      DeleteDestinationCommand,\n      DeleteDeviceProfileCommand,\n      DeleteFuotaTaskCommand,\n      DeleteMulticastGroupCommand,\n      DeleteNetworkAnalyzerConfigurationCommand,\n      DeleteQueuedMessagesCommand,\n      DeleteServiceProfileCommand,\n      DeleteWirelessDeviceCommand,\n      DeleteWirelessDeviceImportTaskCommand,\n      DeleteWirelessGatewayCommand,\n      DeleteWirelessGatewayTaskCommand,\n      DeleteWirelessGatewayTaskDefinitionCommand,\n      DeregisterWirelessDeviceCommand,\n      DisassociateAwsAccountFromPartnerAccountCommand,\n      DisassociateMulticastGroupFromFuotaTaskCommand,\n      DisassociateWirelessDeviceFromFuotaTaskCommand,\n      DisassociateWirelessDeviceFromMulticastGroupCommand,\n      DisassociateWirelessDeviceFromThingCommand,\n      DisassociateWirelessGatewayFromCertificateCommand,\n      DisassociateWirelessGatewayFromThingCommand,\n      GetDestinationCommand,\n      GetDeviceProfileCommand,\n      GetEventConfigurationByResourceTypesCommand,\n      GetFuotaTaskCommand,\n      GetLogLevelsByResourceTypesCommand,\n      GetMetricConfigurationCommand,\n      GetMetricsCommand,\n      GetMulticastGroupCommand,\n      GetMulticastGroupSessionCommand,\n      GetNetworkAnalyzerConfigurationCommand,\n      GetPartnerAccountCommand,\n      GetPositionCommand,\n      GetPositionConfigurationCommand,\n      GetPositionEstimateCommand: GetPositionEstimateCommand2,\n      GetResourceEventConfigurationCommand,\n      GetResourceLogLevelCommand,\n      GetResourcePositionCommand,\n      GetServiceEndpointCommand,\n      GetServiceProfileCommand,\n      GetWirelessDeviceCommand,\n      GetWirelessDeviceImportTaskCommand,\n      GetWirelessDeviceStatisticsCommand,\n      GetWirelessGatewayCommand,\n      GetWirelessGatewayCertificateCommand,\n      GetWirelessGatewayFirmwareInformationCommand,\n      GetWirelessGatewayStatisticsCommand,\n      GetWirelessGatewayTaskCommand,\n      GetWirelessGatewayTaskDefinitionCommand,\n      ListDestinationsCommand,\n      ListDeviceProfilesCommand,\n      ListDevicesForWirelessDeviceImportTaskCommand,\n      ListEventConfigurationsCommand,\n      ListFuotaTasksCommand,\n      ListMulticastGroupsCommand,\n      ListMulticastGroupsByFuotaTaskCommand,\n      ListNetworkAnalyzerConfigurationsCommand,\n      ListPartnerAccountsCommand,\n      ListPositionConfigurationsCommand,\n      ListQueuedMessagesCommand,\n      ListServiceProfilesCommand,\n      ListTagsForResourceCommand,\n      ListWirelessDeviceImportTasksCommand,\n      ListWirelessDevicesCommand,\n      ListWirelessGatewaysCommand,\n      ListWirelessGatewayTaskDefinitionsCommand,\n      PutPositionConfigurationCommand,\n      PutResourceLogLevelCommand,\n      ResetAllResourceLogLevelsCommand,\n      ResetResourceLogLevelCommand,\n      SendDataToMulticastGroupCommand,\n      SendDataToWirelessDeviceCommand,\n      StartBulkAssociateWirelessDeviceWithMulticastGroupCommand,\n      StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand,\n      StartFuotaTaskCommand,\n      StartMulticastGroupSessionCommand,\n      StartSingleWirelessDeviceImportTaskCommand,\n      StartWirelessDeviceImportTaskCommand,\n      TagResourceCommand,\n      TestWirelessDeviceCommand,\n      UntagResourceCommand,\n      UpdateDestinationCommand,\n      UpdateEventConfigurationByResourceTypesCommand,\n      UpdateFuotaTaskCommand,\n      UpdateLogLevelsByResourceTypesCommand,\n      UpdateMetricConfigurationCommand,\n      UpdateMulticastGroupCommand,\n      UpdateNetworkAnalyzerConfigurationCommand,\n      UpdatePartnerAccountCommand,\n      UpdatePositionCommand,\n      UpdateResourceEventConfigurationCommand,\n      UpdateResourcePositionCommand,\n      UpdateWirelessDeviceCommand,\n      UpdateWirelessDeviceImportTaskCommand,\n      UpdateWirelessGatewayCommand,\n    };\n    var _IoTWireless = class _IoTWireless extends IoTWirelessClient2 {};\n    __name(_IoTWireless, \"IoTWireless\");\n    var IoTWireless = _IoTWireless;\n    (0, import_smithy_client.createAggregatedClient)(commands, IoTWireless);\n    var paginateListDestinations = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListDestinationsCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListDeviceProfiles = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListDeviceProfilesCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListFuotaTasks = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListFuotaTasksCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListMulticastGroupsByFuotaTask = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListMulticastGroupsByFuotaTaskCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListMulticastGroups = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListMulticastGroupsCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListNetworkAnalyzerConfigurations = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListNetworkAnalyzerConfigurationsCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListPositionConfigurations = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListPositionConfigurationsCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListQueuedMessages = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListQueuedMessagesCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListServiceProfiles = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListServiceProfilesCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListWirelessDevices = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListWirelessDevicesCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n    var paginateListWirelessGateways = (0, import_core.createPaginator)(\n      IoTWirelessClient2,\n      ListWirelessGatewaysCommand,\n      \"NextToken\",\n      \"NextToken\",\n      \"MaxResults\"\n    );\n  },\n});\n\n// analysis/analysis.ts\nvar analysis_exports = {};\n__export(analysis_exports, {\n  _createAWSPayload: () => _createAWSPayload,\n  _createDataForDevice: () => _createDataForDevice,\n  _getConfiguration: () => _getConfiguration,\n  _getEstimatedLocation: () => _getEstimatedLocation,\n});\nmodule.exports = __toCommonJS(analysis_exports);\nvar import_client_iot_wireless = __toESM(require_dist_cjs55());\nvar import_sdk = require(\"@tago-io/sdk\");\nfunction _getEstimatedLocation(response) {\n  var _a;\n  if (!response) {\n    throw new Error(\"No response from AWS\");\n  }\n  const estimatedLocation = JSON.parse(\n    ((_a = response.GeoJsonPayload) == null ? void 0 : _a.transformToString()) ?? \"\"\n  );\n  if (!estimatedLocation) {\n    throw new Error(\"No estimated location found\");\n  }\n  return estimatedLocation;\n}\nfunction _getConfiguration(context) {\n  var _a, _b, _c, _d;\n  const configuration = {\n    awsAccessKeyId:\n      (_a = context.environment.find((x) => x.key === \"AWS_ACCESSKEYID\")) == null\n        ? void 0\n        : _a.value,\n    awsSecretAccessKey:\n      (_b = context.environment.find((x) => x.key === \"AWS_SECRETACCESSKEY\")) == null\n        ? void 0\n        : _b.value,\n    awsRegion:\n      (_c = context.environment.find((x) => x.key === \"AWS_REGION\")) == null ? void 0 : _c.value,\n    desireableAccuracyPercent:\n      ((_d = context.environment.find((x) => x.key === \"DESIREABLE_ACCURACY_PERCENT\")) == null\n        ? void 0\n        : _d.value) || \"0\",\n  };\n  if (\n    !configuration.awsRegion ||\n    !configuration.awsAccessKeyId ||\n    !configuration.awsSecretAccessKey\n  ) {\n    let missing = \"\";\n    if (!configuration.awsRegion) {\n      missing += \"AWS_REGION \";\n    }\n    if (!configuration.awsAccessKeyId) {\n      missing += \"AWS_ACCESSKEYID \";\n    }\n    if (!configuration.awsSecretAccessKey) {\n      missing += \"AWS_SECRETACCESSKEY \";\n    }\n    throw new Error(missing + \"not found in the environment variables\");\n  }\n  if (\n    !parseFloat(configuration.desireableAccuracyPercent) &&\n    parseFloat(configuration.desireableAccuracyPercent) !== 0\n  ) {\n    throw new Error(\"DESIREABLE_ACCURACY_PERCENT must be a numeric value\");\n  }\n  return configuration;\n}\nfunction _createAWSPayload(gnssValue, ipAddress, wifiAddresses) {\n  if (!gnssValue && !ipAddress && !wifiAddresses) {\n    throw new Error(\"No data to create the payload\");\n  }\n  let payload = { Timestamp: new Date() };\n  if (gnssValue) {\n    payload = { ...payload, Gnss: { Payload: gnssValue } };\n  }\n  if (ipAddress) {\n    payload = { ...payload, Ip: { IpAddress: ipAddress } };\n  }\n  if (wifiAddresses) {\n    if (Object.keys(wifiAddresses).length < 2) {\n      throw new Error(\"Wifi Addresses must have at least 2 addresses\");\n    }\n    payload = {\n      ...payload,\n      WiFiAccessPoints: [\n        {\n          MacAddress: Object.keys(wifiAddresses)[0],\n          Rss: Object.values(wifiAddresses)[0],\n        },\n        {\n          MacAddress: Object.keys(wifiAddresses)[1],\n          Rss: Object.values(wifiAddresses)[1],\n        },\n      ],\n    };\n  }\n  return payload;\n}\nfunction _createDataForDevice(scope, desireableAccuracy, estimatedLocation) {\n  const lat = estimatedLocation.coordinates[1];\n  const lng = estimatedLocation.coordinates[0];\n  const horizontalAccuracy = estimatedLocation.properties.horizontalConfidenceLevel;\n  const verticalAccuracy = estimatedLocation.properties.verticalConfidenceLevel;\n  const accuracy =\n    horizontalAccuracy >= parseFloat(desireableAccuracy) ||\n    verticalAccuracy >= parseFloat(desireableAccuracy);\n  const dataReturn = {\n    variable: \"estimated_location\",\n    value: lat + \";\" + lng,\n    location: {\n      lat,\n      lng,\n    },\n    metadata: {\n      horizontalAccuracy,\n      verticalAccuracy,\n      color: accuracy ? \"green\" : \"red\",\n    },\n    group: scope.group,\n    time: scope.time,\n  };\n  return dataReturn;\n}\nasync function getEstimatedDeviceLocation(context, scope) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  console.log(\"Starting Analysis\");\n  let configuration;\n  try {\n    configuration = _getConfiguration(context);\n  } catch (error) {\n    console.error(error.message);\n    return;\n  }\n  const gnssSolverVariable =\n    ((_a = context.environment.find((x) => x.key === \"GNSS_SOLVER_VARIABLE\")) == null\n      ? void 0\n      : _a.value) || \"gnss_solver\";\n  const ipAddressVariable =\n    ((_b = context.environment.find((x) => x.key === \"IP_ADDRESS_VARIABLE\")) == null\n      ? void 0\n      : _b.value) || \"ip_addresses\";\n  const wifiAdressesVariable =\n    ((_c = context.environment.find((x) => x.key === \"WIFI_ADDRESSES_VARIABLE\")) == null\n      ? void 0\n      : _c.value) || \"wifi_addresses\";\n  const gnssValue =\n    (_d = scope.find((x) => x.variable === gnssSolverVariable)) == null ? void 0 : _d.value;\n  const ipAddress =\n    (_f = (_e = scope.find((x) => x.variable === ipAddressVariable)) == null ? void 0 : _e.value) ==\n    null\n      ? void 0\n      : _f.split(\";\");\n  const wifiAddresses =\n    (_g = scope.find((x) => x.variable === wifiAdressesVariable)) == null ? void 0 : _g.metadata;\n  try {\n    const payload = _createAWSPayload(gnssValue, ipAddress[0], wifiAddresses);\n    const client = new import_client_iot_wireless.IoTWirelessClient({\n      credentials: {\n        accessKeyId: configuration.awsAccessKeyId,\n        secretAccessKey: configuration.awsSecretAccessKey,\n      },\n      region: configuration.awsRegion,\n    });\n    const command = new import_client_iot_wireless.GetPositionEstimateCommand(payload);\n    const response = await client.send(command);\n    const estimatedLocation = _getEstimatedLocation(response);\n    await import_sdk.Resources.devices.sendDeviceData(\n      scope[0].device,\n      _createDataForDevice(scope[0], configuration.desireableAccuracyPercent, estimatedLocation)\n    );\n    console.log(\"Analysis Finished\");\n  } catch (error) {\n    console.error(error.message);\n  }\n}\nif (process.env.NODE_ENV !== \"test\") {\n  import_sdk.Analysis.use(getEstimatedDeviceLocation, {\n    token: process.env.T_ANALYSIS_TOKEN || \"Your-Analysis-Token\",\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 &&\n  (module.exports = {\n    _createAWSPayload,\n    _createDataForDevice,\n    _getConfiguration,\n    _getEstimatedLocation,\n  });\n"
        },
        {
          "id": "configuration-parameters-for-dynamic-last-value",
          "title": "Dynamic Last Value Configuration",
          "description": "Configuration parameters for dynamic last value displays",
          "language": "javascript",
          "tags": [
            "configuration",
            "dynamic",
            "last-value",
            "parameters",
            "display"
          ],
          "filename": "configuration-parameters-for-dynamic-last-value.js",
          "file_path": "node-legacy/configuration-parameters-for-dynamic-last-value.js",
          "code": "/*\n ** Analysis Example\n ** Configuration parameters for dynamic last value\n **\n ** Set the configurations parameters with the last value of a given variable,\n ** in this example it is the \"temperature\" variable\n **\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n **  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n **  2 - In the Target selector, select the Analysis with the field set as \"ID\" and choose your Analysis in the list;\n **  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n **  4 - To save your new Policy, click the save button in the bottom right corner;\n */\nconst { Resources, Analysis } = require(\"@tago-io/sdk\");\nconst { queue } = require(\"async\");\nconst moment = require(\"moment-timezone\");\n\n// set the timezone to show up on dashboard. TagoIO may handle ISOString automatically in a future update.\nlet timezone = \"America/New_York\";\n\nconst getParam = (params, key) =>\n  params.find((x) => x.key === key) || { key, value: \"-\", sent: false };\nasync function applyDeviceCalculation({ id: deviceID, name }) {\n  const deviceInfoText = `${name}(${deviceID}`;\n  console.info(`Processing Device ${deviceInfoText})`);\n\n  // Get the temperature variable inside the device bucket.\n  // notice it will get the last record at the time the analysis is running.\n  const dataResult = await Resources.devices.getDeviceData(deviceID, {\n    variables: [\"temperature\"],\n    query: \"last_value\",\n  });\n  if (!dataResult.length) {\n    console.error(`No data found for ${deviceInfoText}`);\n    return;\n  }\n\n  // Get configuration params list of the device\n  const deviceParams = await Resources.devices.paramList(deviceID);\n\n  // get the variable temperature from our dataResult array\n  const temperature = dataResult.find((data) => data.variable === \"temperature\");\n  if (temperature) {\n    // get the config. parameter with key temperature\n    const temperatureParam = getParam(deviceParams, \"temperature\");\n    // get the config. parameter with key last_record_time\n    const lastRecordParam = getParam(deviceParams, \"last_record_time\");\n\n    const timeString = moment(temperature.time).tz(timezone).format(\"YYYY/MM/DD HH:mm A\");\n\n    // creates or edit the tempreature Param with the value of temperature.\n    // creates or edit the last_record_time Param with the time of temperature.\n    // Make sure to cast the value to STRING, otherwise you'll get an error.\n    await Resources.devices.paramSet(deviceID, [\n      { ...temperatureParam, value: String(temperature.value) },\n      { ...lastRecordParam, value: timeString },\n    ]);\n  }\n}\n\n// scope is not used for Schedule action.\nasync function startAnalysis(context, scope) {\n  // get timezone from the account\n  ({ timezone } = await Resources.account.info());\n\n  // Create a queue, so we don't run on Throughput errors.\n  // The queue will make sure we check only 5 devices simultaneously.\n  const processQueue = queue(applyDeviceCalculation, 5);\n\n  // fetch device list filtered by tags.\n  // Device list always return an Array with DeviceInfo object.\n  const deviceList = await Resources.devices.list({\n    amount: 500,\n    fields: [\"id\", \"name\", \"tags\"],\n    filter: {\n      tags: [{ key: \"type\", value: \"sensor\" }],\n    },\n  });\n\n  deviceList.forEach((device) => processQueue.push({ ...device, account }));\n\n  // Wait for all queue to be processed\n  await processQueue.drain();\n}\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "console",
          "title": "Console Hello World",
          "description": "Hello World example with console output",
          "language": "javascript",
          "tags": [
            "basic",
            "console",
            "hello-world"
          ],
          "filename": "console.js",
          "file_path": "node-legacy/console.js",
          "code": "/*\n * TagoIO - Analysis Example\n * Hello World\n *\n * Check out the SDK documentation on: https://js.sdk.tago.io\n *\n * Learn how to send messages to the console located on the TagoIO analysis screen.\n * You can use this principle to show any information during and after development.\n */\n\nconst { Analysis } = require(\"@tago-io/sdk\");\n\n// The function myAnalysis will run when you execute your analysis\nasync function myAnalysis(context, scope) {\n  console.log(\"Hello World\");\n}\n\nAnalysis.use(myAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "create-device",
          "title": "Create Device from Dashboard",
          "description": "Create new devices dynamically using dashboard interface",
          "language": "javascript",
          "tags": [
            "device",
            "create",
            "dashboard",
            "dynamic",
            "management"
          ],
          "filename": "create-device.js",
          "file_path": "node-legacy/create-device.js",
          "code": "/*\n * Example: Creating Devices via Dashboard\n * This example demonstrates how to create devices in your account using an Input Widget on the dashboard.\n *\n * Dashboard Template:\n * You can access the dashboard template needed for this operation here: https://admin.tago.io/template/6143555a314cef001871ec78\n * It's recommended to use a dummy HTTPS device alongside the dashboard for testing purposes.\n *\n * Usage Instructions:\n * For the analysis to function correctly, you must add a new policy to your account by following these steps:\n *  1. Navigate to https://admin.tago.io/am and click on the \"Add Policy\" button.\n *  2. In the Target selector, ensure the field is set to \"ID\", then select your Analysis from the list.\n *  3. Click on the \"Click to add a new permission\" option, choose \"Device\" as the type, and set the rule to \"Access\" with the scope as \"Any\".\n *  4. Finalize by clicking the save button located in the bottom right corner to apply your new Policy.\n */\n\nconst { Analysis, Resources } = require(\"@tago-io/sdk\");\n\nasync function startAnalysis(context, scope) {\n  if (!scope[0]) {\n    return console.log(\"The analysis must be triggered by a widget.\");\n  }\n\n  console.log(\"Creating your device\");\n\n  // Get the variables sent by the widget/dashboard.\n  const network_id = scope.find((x) => x.variable === \"device_network\");\n  const connector_id = scope.find((x) => x.variable === \"device_connector\");\n  const device_name = scope.find((x) => x.variable === \"device_name\");\n  const device_eui = scope.find((x) => x.variable === \"device_eui\");\n\n  if (!connector_id || !connector_id.value) {\n    return console.log('Missing \"device_connector\" in the data scope.');\n  } else if (!network_id || !network_id.value) {\n    return console.log('Missing \"device_network\" in the data scope.');\n  } else if (!device_eui || !device_eui.value) {\n    return console.log('Missing \"device_eui\" in the data scope.');\n  }\n\n  const deviceID = scope[0]?.device;\n  if (!deviceID) {\n    return console.log(\"Device ID not found in the data scope\");\n  }\n\n  const result = await Resources.devices\n    .create({\n      name: device_name.value,\n      // Serie number is the parameter for device eui, sigfox id, etc..\n      serie_number: device_eui.value,\n      tags: [\n        // You can add custom tags here.\n        { key: \"type\", value: \"sensor\" },\n        { key: \"device_eui\", value: device_eui.value },\n      ],\n      connector: connector_id.value,\n      network: network_id.value,\n      active: true,\n      type: \"immutable\",\n      chunk_period: \"month\", //consider change\n      chunk_retention: 1, //consider change\n    })\n    .catch((error) => {\n      // Send the validation to the device.\n      // That way we create an error in the dashboard for feedback.\n      Resources.devices.sendDeviceData(deviceID, {\n        variable: \"validation\",\n        value: `Error when creating the device ${error}`,\n        metadata: { color: \"red\" },\n      });\n      throw error;\n    });\n\n  // To add Configuration Parameters to the device:\n  await Resources.devices.paramSet(result.device_id, {\n    key: \"param_key\",\n    value: \"10\",\n    sent: false,\n  });\n\n  // Send feedback to the dashboard:\n  await Resources.devices.sendDeviceData(deviceID, {\n    variable: \"validation\",\n    value: \"Device succesfully created!\",\n    metadata: { type: \"success\" },\n  });\n  console.log(`Device succesfully created. ID: ${result.device_id}`);\n}\n\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "data-amount",
          "title": "Device Data Amount Report",
          "description": "Get top 20 devices with highest data amount usage",
          "language": "javascript",
          "tags": [
            "data",
            "amount",
            "report",
            "usage",
            "analytics"
          ],
          "filename": "data-amount.js",
          "file_path": "node-legacy/data-amount.js",
          "code": "/**\n * TagoIO - Analysis Example\n * Device Data Amount Analysis\n *\n * This analysis retrieves the amount of data for each device and logs into the console\n * the top 20 devices with the highest data amount.\n *\n * Requirements:\n * - Access Policy must have permission to list devices (Device -> Access)\n * - Access Policy must have permission to get device data (Device -> Get Data)\n *\n * Check out the SDK documentation on: https://js.sdk.tago.io\n * Create Access Policy at https://admin.tago.io/am\n *\n */\n\nconst { Analysis, Resources } = require(\"@tago-io/sdk\");\nconst { queue } = require(\"async\");\n\n/**\n * This is the main function that will be called when the analysis is executed\n * @param {*} context context object from TagoIO Analysis\n * @param {*} scope any object that is passed to the analysis\n */\nasync function myAnalysis(context, scope) {\n  const resultList = [];\n  const getDeviceAmount = async (deviceObj) => {\n    const result = await Resources.devices.amount(deviceObj.id).catch(console.log);\n    if (!result) {\n      // 0 data or error\n      return;\n    }\n\n    // Any code that you want to run for each device before pushing to the resultList\n    // Example to not include devices with less than 40,000 data points\n    // if (result < 40000) {\n    //   return;\n    // }\n\n    resultList.push({ name: deviceObj.name, id: deviceObj.id, amount: result });\n    await new Promise((resolve) => setTimeout(resolve, 200)); // sleep\n  };\n\n  const filter = {\n    // type: \"mutable\"\n    // type: \"immutable\"\n    // tags: [{ key: \"my_tag_key\", value: \"my_tag_value\" }]\n  };\n\n  // Create a queue to limit the amount of devices being processed at the same time\n  const amountQueue = queue(getDeviceAmount, 5);\n  amountQueue.error((error) => console.log(error));\n\n  const deviceList = Resources.devices.listStreaming({ filter });\n  for await (const device of deviceList) {\n    void amountQueue.push(device);\n  }\n\n  // stop if queue is empty\n  if (amountQueue.idle() && resultList.length() === 0) {\n    console.error(\"No devices found to process\");\n    return;\n  }\n\n  // peridocally console the amount of devices still in the queue\n  setInterval(() => {\n    console.log(`Devices in queue: ${amountQueue.length()}`);\n  }, 10000);\n\n  // wait for all devices to be processed\n  await amountQueue.drain();\n\n  // Reorder resultList by the highest data amount\n  resultList.sort((a, b) => b.amount - a.amount);\n\n  // Log the top 20 devices\n  for (const result of resultList) {\n    console.log(JSON.stringify(result));\n  }\n}\n\nAnalysis.use(myAnalysis);\n"
        },
        {
          "id": "data-retention",
          "title": "Data Retention Management",
          "description": "Implement custom data retention policies for device data",
          "language": "javascript",
          "tags": [
            "data",
            "retention",
            "cleanup",
            "management",
            "storage"
          ],
          "filename": "data-retention.js",
          "file_path": "node-legacy/data-retention.js",
          "code": "/*\n * Analysis Example\n * Custom Data Retention\n *\n * Get the list of devices, then go to each device removing the variables you chooses.\n *\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n **  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n **  2 - In the Target selector, select the Analysis with the field set as \"ID\" and choose your Analysis in the list;\n **  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n **  4 - To save your new Policy, click the save button in the bottom right corner;\n */\n\nconst { Analysis, Resources } = require(\"@tago-io/sdk\");\nconst dayjs = require(\"dayjs\");\n\n// The function startAnalysis will run when you execute your analysis\nasync function startAnalysis(context) {\n  // Bellow is an empty filter.\n  // Examples of filter:\n  // { tags: [{ key: 'tag-key', value: 'tag-value' }]}\n  // { name: 'name*' }\n  // { name: '*name' }\n  // { bucket: 'bucket-id' }\n  const filter = {};\n\n  const devices = await Resources.devices.list({\n    page: 1,\n    fields: [\"id\"],\n    filter,\n    amount: 100,\n  });\n\n  for (const deviceObj of devices) {\n    const variables = [\"variable1\", \"variable2\"];\n    const qty = 100; // remove 100 registers of each variable\n    const end_date = dayjs().subtract(1, \"month\").toISOString(); // registers old than 1 month\n\n    await Resources.devices\n      .deleteDeviceData(deviceObj.id, { variables, qty, end_date })\n      .then(context.log)\n      .catch(context.log);\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "data-transaction",
          "title": "Data Transaction Summary",
          "description": "Get total transaction count and statistics by user",
          "language": "javascript",
          "tags": [
            "data",
            "transaction",
            "user",
            "statistics",
            "billing"
          ],
          "filename": "data-transaction.js",
          "file_path": "node-legacy/data-transaction.js",
          "code": "/*\n ** Analysis Example\n ** Get users total transactions\n **\n ** This analysis must run by an Scheduled Action.\n ** It gets a total amount of transactions by device, calculating by the total amount of data in the bucket\n ** each time the analysis run. Group the result by a tag.\n **\n ** Environment Variables\n ** In order to use this analysis, you must setup the Environment Variable table.\n **\n ** device_token: Token of a device where the total transactions will be stored. Get this in the Device's page.\n ** account_token: Your account token. Check bellow how to get this.\n **\n ** Steps to generate an account_token:\n ** 1 - Enter the following link: https://admin.tago.io/account/\n ** 2 - Select your Profile.\n ** 3 - Enter Tokens tab.\n ** 4 - Generate a new Token with Expires Never.\n ** 5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n */\n\nconst { Analysis, Account, Utils, Device } = require(\"@tago-io/sdk\");\nconst _ = require(\"lodash\");\n\nasync function calculateUserTransactions(account, storage, user_value, device_list) {\n  // Collect the data amount for each device.\n  // Result of bucket_results is:\n  // [0, 120, 500, 0, 1000]\n  const bucket_results = await Promise.all(\n    device_list.map((device) => account.buckets.amount(device.bucket))\n  );\n  const total_transactions = _.sum(bucket_results);\n\n  // Get the total transactions of the last analysis run.\n  // Group is used to get only for this user.\n  // You can change that to get a specific device for the user, instead of using a global storage device.\n  // One way to do that is by just finding the device using a tag, see example:\n  //\n  // const [user_device] = await account.devices.list({ page: 1, fields: ['id', 'name', 'bucket', 'tags'], filter: { tags: [{ key: 'user_device', value: user_value }] }, amount: 1 });\n  // const device_token = await Utils.getTokenByName(account, user_device.id);\n  // const storage = new Device({ token: device_token });\n  let [last_total_transactions] = await storage.getData({\n    variable: \"last_transactions\",\n    qty: 1,\n    group: user_value,\n  });\n  if (!last_total_transactions) {\n    last_total_transactions = { value: 0 };\n  }\n\n  const result = total_transactions - last_total_transactions.value;\n\n  // Store the current total of transactions, the result for this analysis run and the key.\n  // Now you can just plot these variables in a dynamic table.\n  await storage.sendData([\n    {\n      variable: \"last_transactions\",\n      value: total_transactions,\n      group: user_value,\n    },\n    { variable: \"transactions_result\", value: result, group: user_value },\n    { variable: \"user\", value: user_value, group: user_value },\n  ]);\n}\n\nasync function myAnalysis(context) {\n  // Transform all Environment Variable to JSON.\n  const environment = Utils.envToJson(context.environment);\n  if (!environment.account_token) {\n    return context.log(\"You must setup an account_token in the Environment Variables.\");\n  } else if (!environment.device_token) {\n    return context.log(\"You must setup an device_token in the Environment Variables.\");\n  }\n  // Instance the account class\n  const account = new Account({ token: environment.account_token });\n  const storage = new Device({ token: environment.device_token });\n\n  // Setup the tag we will be searching in the device list\n  const tag_to_search = \"user_email\";\n\n  // Get the device_list and group it by the tag value.\n  // Result of grouped_device_list is:\n  // [\n  //   { value: 'test@tago.io', device_list: [ [Object], [Object] ] },\n  //   { value: 'user@tago.io', device_list: [ [Object] ] }\n  // ]\n  const device_list = await account.devices.list({\n    page: 1,\n    fields: [\"id\", \"name\", \"bucket\", \"tags\"],\n    filter: { tags: [{ key: tag_to_search }] },\n    amount: 10000,\n  });\n  const grouped_device_list = _.chain(device_list)\n    .groupBy((collection) => collection.tags.find((x) => x.key === tag_to_search).value)\n    .map((value, key) => ({ value: key, device_list: value }))\n    .value();\n\n  // Call a new function for each group in assynchronous way.\n  await Promise.all(\n    grouped_device_list.map((group) =>\n      calculateUserTransactions(account, storage, group.value.replace(/ /g, \"\"), group.device_list)\n    )\n  );\n}\n\nmodule.exports = new Analysis(myAnalysis);\n\n// To run analysis on your machine (external)\n// module.exports = new Analysis(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "device-list",
          "title": "Get Device List",
          "description": "Retrieve and filter device list from your account",
          "language": "javascript",
          "tags": [
            "devices",
            "api",
            "list",
            "filtering"
          ],
          "filename": "device-list.js",
          "file_path": "node-legacy/device-list.js",
          "code": "/*\n ** Analysis Example\n ** Get Device List\n **\n ** This analysis retrieves a list of devices from your account and prints it to the console.\n **\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n **  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n **  2 - In the Target selector, select the Analysis with the field set as \"ID\" and choose your Analysis in the list;\n **  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n **  4 - To save your new Policy, click the save button in the bottom right corner;\n */\n\nconst { Analysis, Resources } = require(\"@tago-io/sdk\");\n\nasync function startAnalysis(context) {\n  // Example of filtering devices by tag.\n  // to use this filter, just remove the comment on the line 35\n  const filter = {\n    tags: [\n      {\n        key: \"key_name\", // change by your key name\n        value: \"key_value\", // change by your key value\n      },\n    ],\n    // You also can filter by: name, last_input, last_output, bucket, etc.\n  };\n\n  // Searching all devices with tag we want\n  const devices = await Resources.devices.list({\n    page: 1,\n    fields: [\"id\", \"tags\"],\n    // filter,\n    amount: 100,\n  });\n\n  if (!devices.length) {\n    return console.debug(\"Devices not found\");\n  }\n\n  console.debug(JSON.stringify(devices));\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "device-offline",
          "title": "Device Offline Alert",
          "description": "Monitor devices and send alerts when they go offline",
          "language": "javascript",
          "tags": [
            "device",
            "offline",
            "alert",
            "monitoring",
            "status"
          ],
          "filename": "device-offline.js",
          "file_path": "node-legacy/device-offline.js",
          "code": "/*\n ** Analysis Example\n ** Device Offline Alert\n **\n ** This analysis must run by Time Interval. It checks if devices with given Tags\n ** had communication in the past minutes. If not, it sends an email or sms alert.\n **\n ** Environment Variables\n ** In order to use this analysis, you must setup the Environment Variable table.\n **\n ** checkin_time: Minutes between the last input of the device before sending the notification.\n ** tag_key: Device tag Key to filter the devices.\n ** tag_value: Device tag Value to filter the devices.\n ** email_list: Email list comma separated.\n ** sms_list: Phone number list comma separated. The phone number must include the country code\n **\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n **  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n **  2 - In the Target selector, with the field set as \"ID\", choose your Analysis in the list;\n **  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n **  4 - To save your new Policy, click the save button in the bottom right corner;\n */\n\nconst { Analysis, Services, Utils, Resources } = require(\"@tago-io/sdk\");\nconst dayjs = require(\"dayjs\");\n\nasync function startAnalysis(context) {\n  // Transform all Environment Variable to JSON.\n  const env = Utils.envToJson(context.environment);\n\n  if (!env.checkin_time) {\n    return context.log(\"You must setup a checkin_time in the Environment Variables.\");\n  } else if (!env.tag_key) {\n    return context.log(\"You must setup a tag_key in the Environment Variables.\");\n  } else if (!env.tag_value) {\n    return context.log(\"You must setup a tag_value in the Environment Variables.\");\n  } else if (!env.email_list && !env.sms_list) {\n    return context.log(\"You must setup an email_list or a sms_list in the Environment Variables.\");\n  }\n\n  const checkin_time = Number(env.checkin_time);\n  if (Number.isNaN(checkin_time)) return context.log(\"The checkin_time must be a number.\");\n\n  // You can remove the comments on line 51 and 57 to use the Tag Filter.\n  //const filter = { tags: [{ key: env.tag_key, value: env.tag_value }] };\n\n  const devices = await Resources.devices.list({\n    page: 1,\n    amount: 1000,\n    fields: [\"id\", \"name\", \"last_input\"],\n    // filter,\n  });\n\n  if (!devices.length) {\n    return context.log(\n      `No device found with given tags. Key: ${env.tag_key}, Value: ${env.tag_value} `\n    );\n  }\n\n  context.log(\"Checking devices: \", devices.map((x) => x.name).join(\", \"));\n\n  const now = dayjs();\n  const alert_devices = [];\n  for (const device of devices) {\n    const last_input = dayjs(new Date(device.last_input));\n\n    // Check the difference in minutes.\n    const diff = now.diff(last_input, \"minute\");\n    if (diff > checkin_time) {\n      alert_devices.push(device.name);\n    }\n  }\n\n  if (!alert_devices.length) {\n    return context.log(\"All devices are okay.\");\n  }\n\n  context.log(\"Sending notifications\");\n  const emailService = new Services({ token: context.token }).email;\n  const smsService = new Services({ token: context.token }).sms;\n\n  let message = `Hi!\\nYou're receiving this alert because the following devices didn't send data in the last ${checkin_time} minutes.\\n\\nDevices:`;\n  message += alert_devices.join(\"\\n\");\n\n  if (env.email_list) {\n    // Remove space in the string\n    const emails = env.email_list.replace(/ /g, \"\");\n\n    await emailService.send({\n      to: emails,\n      subject: \"Device Offline Alert\",\n      message,\n    });\n  }\n\n  if (env.sms_list) {\n    // Remove space in the string and convert to an Array.\n    const smsNumbers = env.sms_list.replace(/ /g, \"\").split(\",\");\n\n    for (const phone of smsNumbers) {\n      await smsService.send({\n        to: phone,\n        message,\n      });\n    }\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "downlink-dashboard",
          "title": "Downlink from Dashboard",
          "description": "Send downlink messages to devices triggered from dashboard",
          "language": "javascript",
          "tags": [
            "downlink",
            "dashboard",
            "device",
            "communication",
            "control"
          ],
          "filename": "downlink-dashboard.js",
          "file_path": "node-legacy/downlink-dashboard.js",
          "code": "/*\n ** Analysis Example\n ** Sending downlink using dashboard\n **\n ** Using an Input Widget in the dashboard, you will be able to trigger a downlink to\n ** any LoraWaN network server.\n ** You can get the dashboard template to use here: https://admin.tago.io/template/5f514218d4555600278023c4\n ** IMPORTANT: Your device is required to send an Uplink before any downlink can be send.\n **\n ** Environment Variables\n ** In order to use this analysis, you must setup the Environment Variable table.\n **\n ** default_PORT: The default port to be used if not sent by the dashboard.\n ** device_id: The default device id to be used if not sent by the dashboard (OPTIONAL).\n ** payload: The default payload to be used if not sent by the dashboard (OPTIONAL).\n **\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n ** 1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n ** 2 - In the Target selector, with the field set as \"ID\", choose your Analysis in the list;\n ** 3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access, Edit, Token Access\" with the field as \"Any\";\n ** 4 - Click the \"Click to add a new permission\" element and select \"Network\" with the rule \"Access\" with the field as \"Any\";\n **\n */\nconst { Analysis, Utils, Resources } = require(\"@tago-io/sdk\");\n\nasync function startAnalysis(context, scope) {\n  // Remove code below if you want to trigger by schedule action and using environment variables.\n  if (!scope[0]) {\n    return context.log(\"This analysis must be triggered by a widget.\");\n  }\n\n  context.log(\"Downlink analysis started\");\n\n  // Get the variables form_payload and form_port sent by the widget/dashboard.\n  let payload = scope.find((x) => x.variable === \"form_payload\");\n  let port = scope.find((x) => x.variable === \"form_port\");\n\n  // Setup from environment variable if widget hadn't been used to trigger the analysis.\n  if (!payload) {\n    payload = { value: environment.payload, device: environment.device_id };\n  }\n\n  if (!port) {\n    port = { value: environment.default_PORT };\n  }\n\n  // Error to make sure analysis have the information it needs.\n  if (!payload.value || !payload.device) {\n    return context.log('Missing \"form_payload\" in the data scope.');\n  } else if (!port || !port.value) {\n    return context.log('Missing \"form_port\" in the data scope o.');\n  }\n\n  // All variables that trigger the analysis have the \"device\" parameter, with the TagoIO Device ID.\n  // Otherwise it will get from the environment variable.\n  const device_id = payload.device;\n  if (!device_id) {\n    return context.log(\n      \"Device key <device> not found in the variables sent by the widget/dashboard.\"\n    );\n  }\n\n  const resources = new Resources(context.token);\n\n  const result = await Utils.sendDownlink(resources, device_id, {\n    payload: payload.value,\n    port: Number(port.value),\n    confirmed: false,\n  }).catch((error) => error);\n\n  console.log(result);\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "dynamic-notification",
          "title": "Dynamic Notifications",
          "description": "Send dynamic email, SMS and push notifications based on conditions",
          "language": "javascript",
          "tags": [
            "notification",
            "dynamic",
            "email",
            "sms",
            "push",
            "conditional"
          ],
          "filename": "dynamic-notification.js",
          "file_path": "node-legacy/dynamic-notification.js",
          "code": "/*\n ** Notification Analysis Example\n ** Dynamically Sending Notifications\n **\n ** This script demonstrates how to send notifications via Email, SMS, and Push to TagoRUN Users using analysis.\n ** To execute this example, you must first set up an action by variable to trigger this analysis.\n ** Once the action meets your specified conditions, the corresponding data will be dispatched for analysis.\n **\n ** Usage Instructions:\n ** In order for this analysis to function correctly, a new policy must be added to your account. Here are the steps for adding a new policy:\n **  1 - Navigate to https://admin.tago.io/am and click on \"Add Policy\";\n **  2 - In the Target selector, locate \"ID\" under Analysis field and choose your desired Analysis from the list;\n **  3 - Click on \"Click to add a new permission\", select \"Device\", and set rule as \"Access\" with \"Any\" field;\n **  4 - Click on \"Click to add a new permission\" again, select \"Service\", and set rules as \"Send Email\" and \"Send SMS\";\n **  5 - Once more click on \"Click to add a new permission\", choose \"Run User\", set rule as \"Create Notification\" with field set as \"Any\";\n **  6 - To finalize your new Policy, hit the save button located in the bottom right corner of the screen.\n */\n\nconst { Analysis, Services, Resources } = require(\"@tago-io/sdk\");\n\nasync function startAnalysis(context, scope) {\n  if (!scope[0]) {\n    return context.log(\"This analysis must be triggered by an action.\");\n  }\n\n  console.log(\"Analysis started\");\n\n  // Get the device ID from the scope and retrieve device information.\n  const device_id = scope[0].device;\n  const device_info = await Resources.devices.info(device_id);\n\n  // Get the device name and tags from the device.\n  // [TAG KEY]    [TAG VALUE]\n  // email        example@tago.io\n  // phone        +1XXxxxxxxx\n  // user_id      5f495ae55ff03d0028d39fc5\n  //\n  // This is just a generic example how to get this information. You can get data from a device, search in tags, or any other way of correlation you have.\n  // For example, you can get the email directly from the user_id if it was specified:\n  // const { email } = await account.run.userInfo(userID_tag.id);\n  const device_name = device_info.name;\n  const email_tag = device_info.tags.find((tag) => tag.key === \"email\");\n  const phone_tag = device_info.tags.find((tag) => tag.key === \"phone\");\n  const userID_tag = device_info.tags.find((tag) => tag.key === \"user_id\");\n\n  // Instance the SMS and Email service usando the analysis token from the context.\n  const email_service = new Services({ token: context.token }).email;\n  const sms_service = new Services({ token: context.token }).sms;\n\n  // Send the notifications and output the results to the analysis console.\n  if (email_tag) {\n    await email_service\n      .send({\n        to: email_tag.value,\n        subject: \"Notification alert\",\n        message: `You received a notification for the device: ${device_name}. Variable: ${scope[0].variable}, Value: ${scope[0].value}`,\n      })\n      .then(console.log)\n      .catch(console.log);\n  } else {\n    console.log(\"Email not found for this device.\");\n  }\n\n  if (phone_tag) {\n    await sms_service\n      .send({\n        to: phone_tag.value,\n        message: `You received a notification for the device: ${device_name}. Variable: ${scope[0].variable}, Value: ${scope[0].value}`,\n      })\n      .then(console.log)\n      .catch(console.log);\n  } else {\n    console.log(\"Phone number not found for this device.\");\n  }\n\n  if (userID_tag) {\n    await Resources.run\n      .notificationCreate(userID_tag.value, {\n        title: \"Notification Alert\",\n        message: `You received a notification for the device: ${device_name}. Variable: ${scope[0].variable}, Value: ${scope[0].value}`,\n      })\n      .then(console.log)\n      .catch(console.log);\n  } else {\n    console.log(\"User ID not found for this device.\");\n  }\n\n  console.log(\"Script end.\");\n}\n\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "email-export",
          "title": "Email Export",
          "description": "Export device data and send via email attachment",
          "language": "javascript",
          "tags": [
            "email",
            "export",
            "data",
            "attachment",
            "csv"
          ],
          "filename": "email-export.js",
          "file_path": "node-legacy/email-export.js",
          "code": "/*\n * Analysis Example\n * Email export\n *\n * Learn how to send an email with data in a .csv file attachment.\n *\n * This analysis will read the variable fuel_level from your device,\n * and send the values in a .csv file to an e-mail address\n *\n * Instructions\n * To run this analysis you need to add a device token and the e-mail to the environment variables.\n * To do that, go to your device, then token and copy your token.\n * Go the the analysis, then environment variables,\n * type device_token on key, and paste your token on value\n * click the + button to add a new environment\n * on key, type email and on value, type the e-mail address\n */\n\nconst { Analysis, Device, Services, Utils } = require(\"@tago-io/sdk\");\n\n// The function myAnalysis will run when you execute your analysis\nasync function startAnalysis(context) {\n  // reads the values from the environment and saves it in the variable env_vars\n  const env_vars = Utils.envToJson(context.environment);\n  if (!env_vars.device_token) {\n    return context.log(\"device_token environment variable not found\");\n  }\n\n  if (!env_vars.email) {\n    return context.log(\"email environment variable not found\");\n  }\n\n  const device = new Device({ token: env_vars.device_token });\n\n  // Get the 5 last records of the variable fuel_level in the device bucket.\n  const fuel_list = await device.getData({ variable: \"fuel_level\", qty: 5 });\n\n  // Create csv header\n  let csv = \"Fuel Level\";\n\n  // For each record in the fuel_list, add the value in the csv text.\n  // Use \\n to break the line.\n  for (const item of fuel_list) {\n    csv = `${csv},\\n${item.value}`;\n  }\n\n  // Print the csv text to the TagoIO analysis console, as a preview\n  context.log(csv);\n\n  // Start the email service\n  const email = new Services({ token: context.token }).email;\n\n  // Send the email.\n  const service_response = await email.send({\n    message: \"This is an example of a body message\",\n    subject: \"Exported File from TagoIO\",\n    to: env_vars.email,\n    attachment: {\n      archive: csv,\n      filename: \"exported_file.csv\",\n    },\n  });\n\n  context.log(service_response);\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "find",
          "title": "Find and Operate Data",
          "description": "Find and operate data from devices using filtering and manipulation",
          "language": "javascript",
          "tags": [
            "data",
            "find",
            "filter",
            "operation",
            "device"
          ],
          "filename": "find.js",
          "file_path": "node-legacy/find.js",
          "code": "/*\n * Analysis Example\n * Operate data from devices\n *\n * Read information from a variable generated by devices,\n * run a simple calculation in real-time, and create a new variable with the output.\n *\n * Instructions\n * To run this analysis you need to add a device token to the environment variables,\n * To do that, go to your device, then token and copy your token.\n * Go the the analysis, then environment variables,\n * type device_token on key, and paste your token on value\n */\n\nconst { Analysis, Device, Utils } = require(\"@tago-io/sdk\");\n\n// The function startAnalysis will run when you execute your analysis\nasync function startAnalysis(context) {\n  // reads the values from the environment and saves it in the variable env_vars\n  const env_vars = Utils.envToJson(context.environment);\n\n  if (!env_vars.device_token) {\n    return context.log(\"Missing device_token environment variable\");\n  }\n\n  const device = new Device({ token: env_vars.device_token });\n\n  // create the filter options to get the data from TagoIO\n  const filter = {\n    variable: \"water_level\",\n    query: \"last_item\",\n  };\n\n  const resultArray = await device.getData(filter).catch(() => null);\n\n  // Check if the array is not empty\n  if (!resultArray || !resultArray[0]) {\n    return context.log(\"Empty Array\");\n  }\n\n  // query:last_item always returns only one value\n  const value = resultArray[0].value;\n  const time = resultArray[0].time;\n\n  // print to the console at TagoIO\n  context.log(`The last record of the water_level is ${value}. It was inserted at ${time}`);\n\n  // Multiplies the water_level value by 2 and inserts it in another variable\n  const obj_to_save = {\n    variable: \"water_level_double\",\n    value: value * 2,\n  };\n\n  try {\n    await device.sendData(obj_to_save);\n    context.log(\"Successfully Inserted\");\n  } catch (error) {\n    context.log(\"Error when inserting:\", error);\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "generate-pdf-report",
          "title": "Generate PDF Report",
          "description": "Generate PDF report and send via email",
          "language": "javascript",
          "tags": [
            "pdf",
            "report",
            "email",
            "advanced"
          ],
          "filename": "generate-pdf-report.js",
          "file_path": "node-legacy/generate-pdf-report.js",
          "code": "/*\n * Analysis Example\n * Generate pdf report and send via email\n *\n *\n * Instructions\n * To run this analysis you need to add a email and device_token to the environment variables,\n * Go the the analysis, then environment variables,\n * type email on key, and insert your email on value\n * type device_token on key and insert your device token on value\n */\n\nconst { Analysis, Device, Services, Utils } = require(\"@tago-io/sdk\");\nconst dayjs = require(\"dayjs\");\n\nconst your_variable = \"your_variable\"; //enter the variable from your device you would like in the report\n\n// The function myAnalysis will run when you execute your analysis\nasync function startAnalysis(context) {\n  // reads the values from the environment and saves it in the variable envVars\n  const envVars = Utils.envToJson(context.environment);\n\n  if (!envVars.email) {\n    return context.log(\"email environment variable not found\");\n  }\n  if (!envVars.device_token) {\n    return context.log(\"device_token environment variable not found\");\n  }\n\n  const device = new Device({ token: envVars.device_token });\n\n  const data = await device.getData({\n    variables: [your_variable],\n    start_date: \"1 month\",\n    qty: 10,\n  });\n\n  let dataParsed = \"variable,value,unit,time\";\n\n  data.forEach((x) => {\n    dataParsed = `${x.variable},${x.value},${x.unit},${x.time}`;\n  });\n\n  const dataArray = dataParsed.split(\",\");\n  const dataVar = dataArray[0];\n  const dataVal = dataArray[1];\n\n  const html = `<html>\n    <head>\n        <style>\n            body, html {\n                margin: 0;\n            }\n            table {\n                width: 100%;\n                border-collapse: collapse;\n            }\n            td {\n                border: 1px solid black;\n                padding: 5px;\n                padding-bottom: 25px;\n                font-style: italic;\n            }\n        </style>\n    </head>\n    <body>\n      <table>\n        <tr>\n            <td colspan=\"7\">Issue date: ${dayjs().format(\"YYYY-MM-DD HH:mm:ss\")}</td>\n        </tr>\n        <tr>\n            <td colspan=\"4\">Start date: 2020-05-20 10:21:32</td>\n            <td colspan=\"3\">Stop date: 2020-10-08 22:56:19</td>\n        </tr>\n        <tr>\n            <td colspan=\"4\"> Report of the ${dataVar}</td>\n            <td colspan=\"3\">Device Kitchen Oven 5</td>\n        </tr>\n        <tr>\n            <td>Counter</td>\n            <td>${dataVar}</td>\n            <td>Time</td>\n            <td>Date</td>\n            <td>Temperature 2</td>\n            <td>Time</td>\n            <td>Date</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td>${dataVal}</td>\n          <td>10:53:20</td>\n          <td>2020-06-10</td>\n          <td>137</td>\n          <td>10:53:20</td>\n          <td>2020-06-10</td>\n        </tr>\n      </table>\n    </body>\n  </html>`;\n\n  const options = {\n    displayHeaderFooter: true,\n    footerTemplate:\n      '<div class=\"page-footer\" style=\"width:100%; text-align:center; font-size:12px;\">Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span></div>',\n    margin: {\n      top: \"1.5cm\",\n      right: \"1.5cm\",\n      left: \"1.5cm\",\n      bottom: \"1.5cm\",\n    },\n  };\n\n  const base64 = Buffer.from(html).toString(\"base64\");\n\n  // start the PDF service\n  const pdfService = new Services({ token: context.token }).PDF;\n  const pdf_base64 = await pdfService.generate({\n    base64,\n    options,\n  });\n\n  // Start the email service\n  const emailService = new Services({ token: context.token }).email;\n\n  // Send the email.\n  await emailService.send({\n    to: envVars.email,\n    subject: \"Exported File from TagoIO\",\n    message: \"This is an example of a body message\",\n    attachment: {\n      archive: pdf_base64.result,\n      type: \"base64\",\n      filename: \"exportedfile.pdf\",\n    },\n  });\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "geofence",
          "title": "Geofence Trigger Alert",
          "description": "Monitor device location and trigger alerts when entering/leaving geofenced areas",
          "language": "javascript",
          "tags": [
            "geofence",
            "location",
            "alert",
            "trigger"
          ],
          "filename": "geofence.js",
          "file_path": "node-legacy/geofence.js",
          "code": "/*\n * Environment Variables\n * In order to use this analysis, you must setup the Environment Variable table.\n * account_token: Your account token. Check the steps below.\n *\n * Steps to generate an account_token:\n * 1 - Enter the following link: https://admin.tago.io/account/\n * 2 - Select your Profile.\n * 3 - Enter Tokens tab.\n * 4 - Generate a new Token with Expires Never.\n * 5 - Press the Copy Button and place at the Environment Variables tab of this analysis with key account_token.\n *\n * Follow this guide https://docs.tago.io/en/articles/151 and create\n * two geofences, one with the event code 'danger' and another named 'safe'.\n */\nconst { Utils, Account, Analysis, Device, Services } = require(\"@tago-io/sdk\");\nconst geolib = require(\"geolib\");\n// This function checks if our device is inside a polygon geofence\nfunction insidePolygon(point, geofence) {\n  const x = point[1];\n  const y = point[0];\n  let inside = false;\n  for (let i = 0, j = geofence.length - 1; i < geofence.length; j = i++) {\n    const xi = geofence[i][0];\n    const yi = geofence[i][1];\n    const xj = geofence[j][0];\n    const yj = geofence[j][1];\n    const intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n  return inside;\n}\n// This function checks if our device is inside any geofence\nfunction checkZones(point, geofence_list) {\n  // The line below gets all Polygon geofences that we may have.\n  const polygons = geofence_list.filter((x) => x.geolocation.type === \"Polygon\");\n  if (polygons.length) {\n    // Here we check if our device is inside any Polygon geofence using our function above.\n    const pass_check = polygons.map((x) => insidePolygon(point, x.geolocation.coordinates[0]));\n    const index = pass_check.findIndex((x) => x === true);\n    if (index !== -1) return polygons[index];\n  }\n  // The line below gets all Point (circle) geofences that we may have.\n  const circles = geofence_list.filter((x) => x.geolocation.type === \"Point\");\n  if (circles.length) {\n    // Here we check if our device is inside any Point geofence using a third party library called geolib.\n    const pass_check = circles.map((x) =>\n      geolib.isPointWithinRadius(\n        { latitude: point[1], longitude: point[0] },\n        {\n          latitude: x.geolocation.coordinates[0],\n          longitude: x.geolocation.coordinates[1],\n        },\n        x.geolocation.radius\n      )\n    );\n    const index = pass_check.findIndex((x) => x);\n    if (index !== -1) return circles[index];\n  }\n  return;\n}\n// This function help us get the device using just its id.\nasync function getDevice(account, device_id) {\n  const customer_token = await Utils.getTokenByName(account, device_id);\n  const customer_dev = new Device({ token: customer_token });\n  return customer_dev;\n}\n\nasync function startAnalysis(context, scope) {\n  context.log(\"Running\");\n\n  if (!scope[0]) {\n    throw \"Scope is missing\"; // doesn't need to run if scope[0] is null\n  }\n\n  // The code block below gets all environment variables and checks if we have the needed ones.\n  const environment = Utils.envToJson(context.environment);\n  if (!environment.account_token) {\n    throw \"Missing account_token environment var\";\n  }\n\n  const account = new Account({ token: environment.account_token });\n  const device_id = scope[0].device;\n  // Here we get the device information using our account data and the device id.\n  const device = await getDevice(account, device_id);\n  // This checks if we received a location\n  const location = scope.find((data) => data.variable === \"location\");\n  if (!location || !location.location) return context.log(\"No location found in the scope.\");\n  // Now we check if we have any geofences to go through.\n  const geofences = await device.getData({ variable: \"geofence\", qty: 10 });\n  const zones = geofences.map((geofence) => geofence.metadata);\n  const zone = checkZones(location.location.coordinates, zones);\n\n  // The line below starts our notification service.\n  const notification = new Services({ token: context.token }).Notification;\n\n  if (!zone) {\n    // If no geofence is found, we stop our application sending a notification.\n    notification.send({\n      title: \"No zone alert\",\n      message: \"Your device is not inside any zone.\",\n    });\n    context.log(\"Your device is not inside any zone.\");\n    return;\n  }\n\n  if (zone.event === \"danger\") {\n    // If our device is inside a danger geofence, we will send a notification with a danger alert.\n    notification.send({\n      title: \"Danger alert\",\n      message: \"Your device is inside a dangerous zone.\",\n    });\n  }\n  if (zone.event === \"safe\") {\n    // If our device is inside a safe geofence, we will send a safe geofence notification.\n    notification.send({\n      title: \"Sage alert\",\n      message: \"Your device is inside a safe zone.\",\n    });\n  }\n  context.log(zone.event);\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "http-get",
          "title": "HTTP GET Request",
          "description": "Make HTTP GET requests to external APIs and routes",
          "language": "javascript",
          "tags": [
            "http",
            "get",
            "api",
            "request",
            "external"
          ],
          "filename": "http-get.js",
          "file_path": "node-legacy/http-get.js",
          "code": "/*\n ** Analysis Example\n ** Post to HTTP Route\n **\n ** This analysis simple post to an HTTP route. It's a starting example for you to develop more\n ** complex algorithms.\n ** In this example we get the Account name and print to the console.\n **\n **.\n */\n\nconst { Analysis } = require(\"@tago-io/sdk\");\nconst axios = require(\"axios\");\n\nasync function startAnalysis(context) {\n  const options = {\n    url: \"https://api.tago.io/info\",\n    method: \"GET\",\n    headers: {\n      Authorization: \"Your-Account-Token\",\n    },\n    // How to use HTTP QueryString\n    // params: {\n    //  serie: 123,\n    // },\n    //\n    // How to send a HTTP Body:\n    // body: 'My text body',\n  };\n\n  try {\n    const result = await axios(options);\n    context.log(result.data);\n\n    context.log(\"Your account name is: \", result.data.result.name);\n  } catch (error) {\n    context.log(`${error}\\n${error}`);\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "mqtt-push",
          "title": "MQTT Push from Dashboard",
          "description": "Send MQTT messages triggered from dashboard interactions",
          "language": "javascript",
          "tags": [
            "mqtt",
            "push",
            "dashboard",
            "messaging",
            "iot"
          ],
          "filename": "mqtt-push.js",
          "file_path": "node-legacy/mqtt-push.js",
          "code": "/*\n ** Analysis Example\n ** Get Device List\n **\n * Snippet to push data to MQTT. Follow this pattern within your application\n * If you want more details about MQTT, search \"MQTT\" in TagoIO help center.\n * You can find plenty of documentation about this topic.\n * TagoIO Team.\n **\n ** How to use?\n ** In order to trigger this analysis you must setup a Dashboard.\n ** Create a Widget \"Form\" and enter the variable 'push_payload' for the device you want to push with the MQTT.\n ** In User Control, select this Analysis in the Analysis Option.\n ** Save and use the form.\n */\n\nconst { Analysis, Services } = require(\"@tago-io/sdk\");\n\nasync function mqttPushExample(context, scope) {\n  if (!scope.length) {\n    return context.log(\"This analysis must be triggered by a dashboard.\");\n  }\n\n  const myData = scope.find((x) => x.variable === \"push_payload\") || scope[0];\n  if (!myData) {\n    return context.log(\"Couldn't find any variable in the scope.\");\n  }\n\n  // Create your data object to push to MQTT\n  // In this case we're sending a JSON object.\n  // You can send anything you want.\n  // Example:\n  // const myDataObject = 'This is a string';\n  const myDataObject = {\n    variable: \"temperature_celsius\",\n    value: (myData.value - 32) * (5 / 9),\n    unit: \"C\",\n  };\n\n  // Create a object with the options you chooses\n  const options = {\n    qos: 0,\n  };\n\n  // Publishing to MQTT\n  const MQTT = new Services({ token: context.token }).MQTT;\n  MQTT.publish({\n    // bucket: myData.bucket, // for legacy devices\n    bucket: myData.device, // for immutable/mutable devices\n    message: JSON.stringify(myDataObject),\n    topic: \"tago/my_topic\",\n    options,\n  }).then(context.log, context.log);\n}\n\nAnalysis.use(mqttPushExample);\n// To run analysis on your machine (external)\n// module.exports = new Analysis(mqttPushExample, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "notifications",
          "title": "Send Notifications",
          "description": "Send notification to account and dashboard with optional dashboard linking",
          "language": "javascript",
          "tags": [
            "notification",
            "alert",
            "dashboard",
            "email"
          ],
          "filename": "notifications.js",
          "file_path": "node-legacy/notifications.js",
          "code": "const { Analysis, Services, Utils } = require(\"@tago-io/sdk\");\n\n/**\n * The main function used by Tago to run the script.\n * It sends a notification to the account and another one linked to a dashboard.\n * Optional: You can set a dashboard_id using an environment variable\n * this will show a button on the notification to send the user directly to the dashboard\n */\nasync function startAnalysis(context) {\n  // reads the values from the environment variables and saves it in the variable env_vars\n  const env_var = Utils.envToJson(context.environment);\n\n  const notification = new Services({ token: context.token }).Notification;\n\n  // In this variable, you type the title of the notification\n  const title = \"Your title\";\n\n  // In this variable, you type the message that you will send on the notification\n  const message = \"Your message\";\n\n  try {\n    const service_response = await notification.send({\n      message,\n      title,\n      ref_id: env_var.dashboard_id || undefined,\n    });\n\n    context.log(service_response);\n  } catch (error) {\n    context.log(error);\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        }
      ]
    },
    "node-rt2025": {
      "runtime": {
        "name": "node-rt2025",
        "displayName": "Node.js rt2025",
        "language": "javascript",
        "exts": [
          ".js"
        ],
        "sourceDir": "snippets/analysis"
      },
      "snippets": [
        {
          "id": "console",
          "title": "Console Hello World",
          "description": "Hello World example with console output",
          "language": "javascript",
          "tags": [
            "basic",
            "console",
            "hello-world"
          ],
          "filename": "console.js",
          "file_path": "node-rt2025/console.js",
          "code": "/*\n * TagoIO - Analysis Example\n * Hello World\n *\n * Learn how to send messages to the console located on the TagoIO analysis screen.\n * You can use this principle to show any information during and after development.\n */\n\nconsole.log(\"Hello World\");\n"
        },
        {
          "id": "device-list",
          "title": "Get Device List",
          "description": "Retrieve and filter device list from your account using fetch",
          "language": "javascript",
          "tags": [
            "devices",
            "api",
            "list",
            "filtering",
            "fetch"
          ],
          "filename": "device-list.js",
          "file_path": "node-rt2025/device-list.js",
          "code": "/*\n * TagoIO - Analysis Example\n * Get Device List\n *\n * This analysis retrieves a list of devices from your account using direct API calls\n * with fetch and prints it to the console.\n *\n * How to use:\n * To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n *  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n *  2 - In the Target selector, select the Analysis with the field set as \"ID\" and choose your Analysis in the list;\n *  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n *  4 - To save your new Policy, click the save button in the bottom right corner;\n */\n\n// Parse environment variables\nconst analysis_token = process.env.T_ANALYSIS_TOKEN;\n\n// TagoIO API base URL\nconst TAGO_API_BASE = \"https://api.tago.io\";\n\nasync function getDeviceList() {\n  try {\n    // Debug: Log token availability\n    console.log(\"Analysis Token:\", analysis_token ? \"***PRESENT***\" : \"MISSING\");\n\n    if (!analysis_token) {\n      throw new Error(\"Analysis token is required\");\n    }\n\n    // Example of filtering devices by tag.\n    // To use this filter, uncomment and modify the filter object below\n    // const filter = {\n    //   tags: [\n    //     {\n    //       key: \"key_name\", // change by your key name\n    //       value: \"key_value\", // change by your key value\n    //     },\n    //   ],\n    //   // You also can filter by: name, last_input, last_output, bucket, etc.\n    // };\n\n    // Query parameters for device list\n    const query = {\n      page: 1,\n      fields: [\"id\", \"tags\"],\n      // filter, // uncomment to use filtering\n      amount: 100,\n    };\n\n    // Debug: Log query parameters\n    console.log(\"Query parameters:\", JSON.stringify(query, null, 2));\n\n    // Make API request to get device list\n    const response = await fetch(`${TAGO_API_BASE}/device`, {\n      method: \"GET\",\n      headers: {\n        Authorization: analysis_token,\n        \"Content-Type\": \"application/json\",\n      },\n      // Convert query object to URL search params\n      // Note: For complex queries, you might need to use POST method\n    });\n\n    // Debug: Log response status\n    console.log(\"Response status:\", response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`API request failed: ${response.status} - ${errorText}`);\n    }\n\n    const data = await response.json();\n\n    // Debug: Log raw response\n    console.log(\"Raw API response:\", JSON.stringify(data, null, 2));\n\n    // Extract devices from response\n    const devices = data.result || data;\n\n    if (!devices || devices.length === 0) {\n      return console.log(\"Devices not found\");\n    }\n\n    console.log(\"=== Device List ===\");\n    console.log(`Found ${devices.length} devices:`);\n    console.log(JSON.stringify(devices, null, 2));\n  } catch (error) {\n    console.error(\"Error fetching device list:\", error.message);\n    console.error(\"Stack trace:\", error.stack);\n  }\n}\n\n// Execute the function\ngetDeviceList();\n"
        },
        {
          "id": "parse-payload",
          "title": "Parse Payload Environment Variables",
          "description": "Parse and debug analysis environment variables and data",
          "language": "javascript",
          "tags": [
            "basic",
            "debug",
            "environment",
            "payload"
          ],
          "filename": "parse-payload.js",
          "file_path": "node-rt2025/parse-payload.js",
          "code": "/*\n * TagoIO - Analysis Example\n * Parse Payload Environment Variables\n *\n * Learn how to parse and debug the environment variables and data payload\n * passed to your analysis. This is useful for understanding the data structure\n * and troubleshooting your analysis execution.\n */\n\n// Parse and extract analysis environment variables\nconst analysis_id = process.env.T_ANALYSIS_ID;\nconst analysis_token = process.env.T_ANALYSIS_TOKEN;\nconst analysis_env = JSON.parse(process.env.T_ANALYSIS_ENV || \"{}\");\nconst analysis_data = JSON.parse(process.env.T_ANALYSIS_DATA || \"[]\");\n\n// Debug logging for all variables\nconsole.log(\"=== Analysis Environment Debug ===\");\nconsole.log(\"Analysis ID:\", analysis_id);\nconsole.log(\"Analysis Token:\", analysis_token ? \"***PRESENT***\" : \"MISSING\");\nconsole.log(\"Analysis Environment:\", JSON.stringify(analysis_env, null, 2));\nconsole.log(\"Analysis Data:\", JSON.stringify(analysis_data, null, 2));\nconsole.log(\"=== End Debug ===\");\n"
        }
      ]
    },
    "deno-rt2025": {
      "runtime": {
        "name": "deno-rt2025",
        "displayName": "Deno rt2025",
        "language": "typescript",
        "exts": [
          ".ts",
          ".tsx"
        ],
        "sourceDir": "snippets/analysis"
      },
      "snippets": [
        {
          "id": "autoscaling-profiles-limits",
          "title": "Autoscaling Profile Limits",
          "description": "Monitor and manage autoscaling profile limits and usage",
          "language": "typescript",
          "tags": [
            "autoscaling",
            "profile",
            "limits",
            "monitoring",
            "management"
          ],
          "filename": "autoscaling-profiles-limits.ts",
          "file_path": "deno-rt2025/autoscaling-profiles-limits.ts",
          "code": "/*\n * TagoIO - Analysis Example\n * Auto Scaling analysis\n *\n * Check out the SDK documentation on: https://js.sdk.tago.io\n *\n * Ths is a script to automatically check your current usage, and auto-scale your account if needed.\n * You can get the analysis template with all the Environment Variables here:\n *          https://admin.tago.io/template/62151212ec8d8f0012c52772\n *\n * In order to use this analysis, you must setup all the environment variables needed.\n * You're also required to create an Action of trigger type Schedule,\n *  and choose to run this analysis.\n * In the action you set how often you want to run this script to check your limits.\n * It can set to a minimum of 1 minute.\n *\n * Environment Variables\n * In order to use this analysis, you must setup the Environment Variable table.\n *   account_token: Your account token. Check the steps at the end to understand how to generate it.\n *   The 95 value will scale data input when it reach 95% of the usage.\n *   Keep it blank to not scale data input.\n *   input: 95\n *   output: 95\n *   data_records: 95\n *   analysis: 95\n *   sms: 95\n *   email: 95\n *   push_notification: 95\n *   file_storage: 95\n *\n * Steps to generate an account_token:\n * 1 - Enter the following link: https://admin.tago.io/account/\n * 2 - Select your Profile.\n * 3 - Enter Tokens tab.\n * 4 - Generate a new Token with Expires Never.\n * 5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n */\n\nimport type { AnalysisEnvironment, BillingPrices, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Account, Analysis, Utils } from \"npm:@tago-io/sdk\";\n\n/**\n * Check if service needs autoscaling\n * @param currentUsage current usage of the profile\n * @param allocated limit allocated of the profile\n * @param scale percentage of usage to allow scaling up\n */\nfunction checkAutoScale(currentUsage: number, allocated: number, scale: number): boolean {\n  if (!scale || !allocated) {\n    return false;\n  }\n  const threshold = allocated * (scale * 0.01);\n\n  return threshold <= currentUsage;\n}\n\n/**\n *  Get next valid service limit\n */\nfunction getNextTier(\n  serviceValues: { amount: number }[],\n  accountLimit: number\n): number | undefined {\n  if (!accountLimit) {\n    return undefined;\n  }\n  const nextValue = serviceValues\n    .sort((a, b) => a.amount - b.amount)\n    .find(({ amount }) => amount > accountLimit);\n\n  return nextValue?.amount || undefined;\n}\n\n/**\n * Parses the current limit of the account\n */\nfunction getAccountLimit(\n  servicesLimit: Record<string, unknown>\n): Record<string, { limit: number }> {\n  return Object.keys(servicesLimit).reduce((result: Record<string, { limit: number }>, key) => {\n    result[key] = servicesLimit[key] as { limit: number };\n\n    return result;\n  }, {});\n}\n\n/**\n * Find the ID of the profile from the token being used.\n */\nasync function getProfileIDByToken(account: Account, token: string): Promise<string | false> {\n  const profiles = await account.profiles.list();\n  for (const profile of profiles) {\n    const [token_exist] = await account.profiles.tokenList(profile.id, {\n      filter: {\n        token,\n      },\n    });\n    if (token_exist) {\n      return profile.id;\n    }\n  }\n  return false;\n}\n\n/**\n * Calculate services to be scaled\n */\nfunction calculateAutoScale(\n  prices: Record<string, { amount: number }[]>,\n  profileLimit: Record<string, number>,\n  profileLimitUsed: Record<string, number>,\n  accountLimit: Record<string, { limit: number }>,\n  environment: AnalysisEnvironment\n): Record<string, { limit: number }> | null {\n  const autoScaleServices: Record<string, { limit: number }> = {};\n  for (const statisticKey in profileLimit) {\n    if (!environment[statisticKey]) {\n      continue;\n    }\n\n    const scale = Number(environment[statisticKey]);\n    if (scale <= 0) {\n      continue;\n    }\n\n    if (Number.isNaN(scale)) {\n      console.error(\n        `[ERROR] Ignoring ${statisticKey}, because the environment variable value is not a number.\\n`\n      );\n      continue;\n    }\n\n    const needAutoScale = checkAutoScale(\n      profileLimitUsed[statisticKey],\n      profileLimit[statisticKey],\n      scale\n    );\n\n    if (!needAutoScale) {\n      continue;\n    }\n\n    const nextTier = getNextTier(prices[statisticKey], accountLimit[statisticKey]?.limit);\n\n    if (nextTier) {\n      autoScaleServices[statisticKey] = { limit: nextTier };\n    }\n  }\n\n  if (!Object.keys(autoScaleServices).length) {\n    return null;\n  }\n\n  return autoScaleServices;\n}\n\nfunction reallocateProfiles(\n  accountLimit: Record<string, { limit: number }>,\n  autoScaleServices: Record<string, { limit: number }>,\n  profileAllocation: Record<string, number>\n): Record<string, number> | null {\n  const newAllocation: Record<string, number> = {};\n\n  for (const service in autoScaleServices) {\n    const newAccountLimit = autoScaleServices?.[service]?.limit || 0;\n    const oldAccountLimit = accountLimit?.[service]?.limit || 0;\n\n    const difference = newAccountLimit - oldAccountLimit;\n\n    if (Number.isNaN(difference) || difference <= 0) {\n      continue;\n    }\n\n    const currentAllocation = profileAllocation?.[service] || 0;\n\n    newAllocation[service] = difference + currentAllocation;\n  }\n\n  if (!Object.keys(newAllocation).length) {\n    return null;\n  }\n\n  return newAllocation;\n}\n\n/**\n * Get the environment variables and parses it to a JSON\n */\nfunction setupEnvironment(context: TagoContext): AnalysisEnvironment {\n  const environment = Utils.envToJson(context.environment) as AnalysisEnvironment;\n  if (!environment) {\n    throw new Error(\"Environment variables not found\");\n  }\n\n  if (!environment.account_token || environment.account_token.length !== 36) {\n    throw new Error(\"[ERROR] You must enter a valid account_token in the environment variable\");\n  }\n\n  return environment;\n}\n\n// This function will run when you execute your analysis\nasync function startAnalysis(context: TagoContext): Promise<void> {\n  const environment = setupEnvironment(context);\n\n  // Setup the account and get's the ID of the profile the account token belongs to.\n  const account = new Account({ token: environment.account_token });\n  const id = await getProfileIDByToken(account, environment.account_token);\n  if (!id) {\n    throw new Error(\"Profile not found for the account token in the environment variable\");\n  }\n\n  // Get the current subscriptions of our account for all the services.\n  const { services: servicesLimit } = await account.billing.getSubscription();\n  const accountLimit = getAccountLimit(servicesLimit);\n\n  // get current limit and used resources of the profile.\n  const { limit, limit_used } = await account.profiles.summary(id);\n\n  // get the tiers of all services, so we know the next tier for our limits.\n  const billingPrices: BillingPrices = await account.billing.getPrices();\n\n  // Transform billing data to the format expected by calculateAutoScale\n  const billing: Record<string, { amount: number }[]> = {};\n  if (billingPrices && typeof billingPrices === \"object\") {\n    Object.entries(billingPrices).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        billing[key] = value.map((item: unknown) => ({\n          amount:\n            typeof item === \"object\" && item !== null && \"price\" in item\n              ? (item as { price: number }).price\n              : typeof item === \"object\" && item !== null && \"amount\" in item\n                ? (item as { amount: number }).amount\n                : 0,\n        }));\n      }\n    });\n  }\n\n  // Check each service to see if it needs scaling\n  // Extract the limits from the ProfileLimit objects\n  const profileLimits =\n    (limit as { limits?: Record<string, number> })?.limits ||\n    (limit as unknown as Record<string, number>);\n  const profileLimitsUsed =\n    (limit_used as { limits?: Record<string, number> })?.limits ||\n    (limit_used as unknown as Record<string, number>);\n\n  const autoScaleServices = calculateAutoScale(\n    billing,\n    profileLimits,\n    profileLimitsUsed,\n    accountLimit,\n    environment\n  );\n\n  // Stop if no auto-scale needed\n  if (!autoScaleServices) {\n    console.info(\"Services are okay, no auto-scaling needed.\");\n    return;\n  }\n\n  console.info(\"Auto-scaling the services:\");\n  for (const service in autoScaleServices) {\n    console.info(\n      `${service} from ${accountLimit?.[service]?.limit} to ${autoScaleServices?.[service]?.limit}`\n    );\n  }\n\n  // Update our subscription, so we are actually scaling the account.\n  try {\n    await account.billing.editSubscription({\n      services: autoScaleServices,\n    });\n  } catch (error) {\n    console.error(\"Failed to update subscription:\", error);\n    return;\n  }\n\n  // Stop here if account has only one profile. No need to reallocate resources\n  const profiles = await account.profiles.list();\n  if (profiles.length > 1) {\n    // Wait purchase to be completed\n    await new Promise((resolve) => {\n      setTimeout(resolve, 2000);\n    });\n\n    // Make sure we reallocate only what we just subscribed\n    const amountToReallocate = reallocateProfiles(accountLimit, autoScaleServices, profileLimits);\n\n    console.info(\"New allocation:\");\n    if (amountToReallocate) {\n      for (const service in amountToReallocate) {\n        console.info(\n          `${service} from ${profileLimits?.[service]} to ${amountToReallocate?.[service]}`\n        );\n      }\n\n      // Allocate all the subscribed limit to the profile.\n      await account.billing.editAllocation([\n        {\n          profile: id,\n          ...amountToReallocate,\n        },\n      ]);\n    }\n  }\n}\n\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "avg-min-max",
          "title": "Average, Minimum and Maximum",
          "description": "Calculate minimum, maximum, and average values from device data",
          "language": "typescript",
          "tags": [
            "data",
            "calculation",
            "average",
            "min",
            "max",
            "statistics"
          ],
          "filename": "avg-min-max.ts",
          "file_path": "deno-rt2025/avg-min-max.ts",
          "code": "/*\n * Analysis Example\n * Minimum, maximum, and average\n *\n * Get the minimum, maximum, and the average value of the variable temperature from your device,\n * and save these values in new variables\n *\n * Instructions\n * To run this analysis you need to add a device token to the environment variables,\n * To do that, go to your device, then token and copy your token.\n * Go the the analysis, then environment variables,\n * type device_token on key, and paste your token on value\n */\n\nimport type { DataCreate, DataQuery, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Device, Utils } from \"npm:@tago-io/sdk\";\n\n// The function myAnalysis will run when you execute your analysis\nasync function startAnalysis(context: TagoContext): Promise<void> {\n  // reads the values from the environment and saves it in the variable env_vars\n  const env_vars = Utils.envToJson(context.environment);\n  if (!env_vars.device_token) {\n    return context.log(\"Device token not found on environment parameters\");\n  }\n\n  const device = new Device({ token: env_vars.device_token });\n\n  // This is a filter to get the minimum value of the variable temperature in the last day\n  const minFilter: DataQuery = {\n    variables: \"temperature\",\n    query: \"min\",\n    start_date: \"1 day\",\n  };\n\n  // Now we use the filter for the device to get the data\n  // check if the variable min has any value\n  // if so, we crete a new object to send to TagoIO\n  const [min] = await device.getData(minFilter);\n  if (min) {\n    const minValue: DataCreate = {\n      variable: \"temperature_minimum\",\n      value: min.value,\n      unit: \"F\",\n    };\n\n    // Now we send the new object with the minimum value\n    await device.sendData(minValue).then(() => context.log(\"Temperature Minimum Updated\"));\n  } else {\n    context.log(\"Minimum value not found\");\n  }\n\n  // This is a filter to get the maximum value of the variable temperature in the last day\n  const maxFilter: DataQuery = {\n    variables: \"temperature\",\n    query: \"max\",\n    start_date: \"1 day\",\n  };\n\n  const [max] = await device.getData(maxFilter);\n\n  if (max) {\n    const maxValue: DataCreate = {\n      variable: \"temperature_maximum\",\n      value: max.value,\n      unit: \"F\",\n    };\n\n    await device.sendData(maxValue).then(() => context.log(\"Temperature Maximum Updated\"));\n  } else {\n    context.log(\"Maximum value not found\");\n  }\n\n  // This is a filter to get the last 1000 values of the variable temperature in the last day\n  const avgFilter: DataQuery = {\n    variables: \"temperature\",\n    qty: 1000,\n    start_date: \"1 day\",\n  };\n\n  const dataAvgArray = await device.getData(avgFilter);\n\n  if (dataAvgArray.length) {\n    let temperatureSum = dataAvgArray.reduce((previousValue, currentValue) => {\n      return previousValue + Number(currentValue.value);\n    }, 0);\n\n    temperatureSum = temperatureSum / dataAvgArray.length;\n\n    const avgValue: DataCreate = {\n      variable: \"temperature_average\",\n      value: temperatureSum,\n      unit: \"F\",\n    };\n\n    await device.sendData(avgValue).then(() => context.log(\"Temperature Average Updated\"));\n  } else {\n    context.log(\"No result found for the avg calculation\");\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "aws-iot-device-location",
          "title": "AWS IoT Device Location",
          "description": "AWS IoT Core Device Location service integration",
          "language": "typescript",
          "tags": [
            "aws",
            "iot",
            "location",
            "integration",
            "tracking"
          ],
          "filename": "aws-iot-device-location.ts",
          "file_path": "deno-rt2025/aws-iot-device-location.ts",
          "code": "/*\n * TagoIO - Analysis Example\n * AWS IoT Device Location Integration\n *\n * This analysis demonstrates how to integrate with AWS IoT Core Device Location service\n * to estimate device location using GNSS, IP address, or WiFi access points data.\n *\n * Check out the SDK documentation on: https://js.sdk.tago.io\n *\n * Environment Variables needed:\n * - AWS_ACCESSKEYID: Your AWS access key ID\n * - AWS_SECRETACCESSKEY: Your AWS secret access key\n * - AWS_REGION: AWS region (e.g., us-east-1)\n * - DESIREABLE_ACCURACY_PERCENT: Desired accuracy percentage (e.g., 80)\n * - GNSS_SOLVER_VARIABLE: Variable name for GNSS data (default: gnss_solver)\n * - IP_ADDRESS_VARIABLE: Variable name for IP address data (default: ip_addresses)\n * - WIFI_ADDRESSES_VARIABLE: Variable name for WiFi addresses data (default: wifi_addresses)\n */\n\nimport { GetPositionEstimateCommand, IoTWirelessClient } from \"npm:@aws-sdk/client-iot-wireless\";\nimport type { Data, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Resources } from \"npm:@tago-io/sdk\";\n\ninterface EstimatedConfiguration {\n  awsAccessKeyId: string;\n  awsSecretAccessKey: string;\n  awsRegion: string;\n  desireableAccuracyPercent: string;\n}\n\ninterface EstimatedLocationResponse {\n  type: string;\n  geometry: {\n    type: string;\n    coordinates: [number, number, number];\n  };\n  properties: {\n    HorizontalAccuracy: number;\n    VerticalAccuracy: number;\n  };\n}\n\ninterface AWSPayload {\n  Timestamp: Date;\n  Gnss?: {\n    Payload: string;\n  };\n  Ip?: {\n    IpAddress: string;\n  };\n  WiFiAccessPoints?: Array<{\n    MacAddress: string;\n    Rss: number;\n  }>;\n}\n\n/**\n * Parse environment variables to get configuration\n */\nfunction _getConfiguration(context: TagoContext): EstimatedConfiguration {\n  const awsAccessKeyId = context.environment.find((x) => x.key === \"AWS_ACCESSKEYID\")?.value;\n  const awsSecretAccessKey = context.environment.find(\n    (x) => x.key === \"AWS_SECRETACCESSKEY\"\n  )?.value;\n  const awsRegion = context.environment.find((x) => x.key === \"AWS_REGION\")?.value;\n  const desireableAccuracyPercent = context.environment.find(\n    (x) => x.key === \"DESIREABLE_ACCURACY_PERCENT\"\n  )?.value;\n\n  if (!awsAccessKeyId) {\n    throw new Error(\"Missing AWS_ACCESSKEYID in environment variables\");\n  }\n  if (!awsSecretAccessKey) {\n    throw new Error(\"Missing AWS_SECRETACCESSKEY in environment variables\");\n  }\n  if (!awsRegion) {\n    throw new Error(\"Missing AWS_REGION in environment variables\");\n  }\n  if (!desireableAccuracyPercent) {\n    throw new Error(\"Missing DESIREABLE_ACCURACY_PERCENT in environment variables\");\n  }\n\n  return {\n    awsAccessKeyId,\n    awsSecretAccessKey,\n    awsRegion,\n    desireableAccuracyPercent,\n  };\n}\n\n/**\n * Create AWS payload for position estimate command\n */\nfunction _createAWSPayload(\n  gnssValue?: string,\n  ipAddress?: string,\n  wifiAddresses?: Record<string, number>\n): AWSPayload {\n  if (!gnssValue && !ipAddress && !wifiAddresses) {\n    throw new Error(\"No data to create the payload\");\n  }\n\n  let payload: AWSPayload = { Timestamp: new Date() };\n\n  if (gnssValue) {\n    payload = { ...payload, Gnss: { Payload: gnssValue } };\n  }\n\n  if (ipAddress) {\n    payload = { ...payload, Ip: { IpAddress: ipAddress } };\n  }\n\n  if (wifiAddresses) {\n    const wifiKeys = Object.keys(wifiAddresses);\n    const wifiValues = Object.values(wifiAddresses);\n\n    if (wifiKeys.length < 2) {\n      throw new Error(\"Wifi Addresses must have at least 2 addresses\");\n    }\n\n    payload = {\n      ...payload,\n      WiFiAccessPoints: [\n        {\n          MacAddress: wifiKeys[0],\n          Rss: wifiValues[0],\n        },\n        {\n          MacAddress: wifiKeys[1],\n          Rss: wifiValues[1],\n        },\n      ],\n    };\n  }\n\n  return payload;\n}\n\n/**\n * Extract estimated location from AWS response\n */\nfunction _getEstimatedLocation(response: {\n  GeoJsonPayload?: { transformToString?: () => string };\n}): EstimatedLocationResponse {\n  if (!response) {\n    throw new Error(\"No response from AWS\");\n  }\n\n  const estimatedLocation = JSON.parse(response.GeoJsonPayload?.transformToString?.() ?? \"\");\n\n  if (!estimatedLocation) {\n    throw new Error(\"No estimated location found\");\n  }\n\n  return estimatedLocation;\n}\n\n/**\n * Create TagoIO data object from scope and estimated location\n */\nfunction _createDataForDevice(\n  scope: Data,\n  desireableAccuracy: string,\n  estimatedLocation: EstimatedLocationResponse\n): Data {\n  const [lng, lat] = estimatedLocation.geometry.coordinates;\n  const horizontalAccuracy = estimatedLocation.properties?.HorizontalAccuracy;\n  const verticalAccuracy = estimatedLocation.properties?.VerticalAccuracy;\n\n  const accuracy =\n    horizontalAccuracy >= parseFloat(desireableAccuracy) ||\n    verticalAccuracy >= parseFloat(desireableAccuracy);\n\n  const dataReturn: Data = {\n    variable: \"estimated_location\",\n    value: lat + \";\" + lng,\n    location: {\n      coordinates: [lng, lat],\n      type: \"Point\",\n    },\n    metadata: {\n      horizontalAccuracy,\n      verticalAccuracy,\n      color: accuracy ? \"green\" : \"red\",\n    },\n    group: scope.group,\n    time: scope.time,\n    device: scope.device,\n    id: scope.id,\n  };\n\n  return dataReturn;\n}\n\n/**\n * Main analysis function for AWS IoT Device Location\n */\nasync function getEstimatedDeviceLocation(context: TagoContext, scope: Data[]): Promise<void> {\n  console.log(\"Starting Analysis\");\n\n  let configuration: EstimatedConfiguration;\n  try {\n    configuration = _getConfiguration(context);\n  } catch (error) {\n    console.error((error as Error).message);\n    return;\n  }\n\n  // Get variable names from environment or use defaults\n  const gnssSolverVariable =\n    context.environment.find((x) => x.key === \"GNSS_SOLVER_VARIABLE\")?.value || \"gnss_solver\";\n  const ipAddressVariable =\n    context.environment.find((x) => x.key === \"IP_ADDRESS_VARIABLE\")?.value || \"ip_addresses\";\n  const wifiAdressesVariable =\n    context.environment.find((x) => x.key === \"WIFI_ADDRESSES_VARIABLE\")?.value || \"wifi_addresses\";\n\n  // Extract data from scope\n  const gnssValue = scope.find((x) => x.variable === gnssSolverVariable)?.value as string;\n  const ipAddressValue = scope.find((x) => x.variable === ipAddressVariable)?.value as string;\n  const ipAddress = ipAddressValue?.split(\";\");\n  const wifiAddresses = scope.find((x) => x.variable === wifiAdressesVariable)?.metadata as Record<\n    string,\n    number\n  >;\n\n  try {\n    // Create payload for AWS position estimate\n    const payload = _createAWSPayload(gnssValue, ipAddress?.[0], wifiAddresses);\n\n    // Create AWS IoT Wireless client\n    const client = new IoTWirelessClient({\n      credentials: {\n        accessKeyId: configuration.awsAccessKeyId,\n        secretAccessKey: configuration.awsSecretAccessKey,\n      },\n      region: configuration.awsRegion,\n    });\n\n    // Send position estimate command\n    const command = new GetPositionEstimateCommand(payload);\n    const response = await client.send(command);\n\n    // Extract estimated location from response\n    const estimatedLocation = _getEstimatedLocation(response);\n\n    // Send data to TagoIO device\n    await Resources.devices.sendDeviceData(\n      scope[0].device,\n      _createDataForDevice(scope[0], configuration.desireableAccuracyPercent, estimatedLocation)\n    );\n\n    console.log(\"Analysis Finished\");\n  } catch (error) {\n    console.error((error as Error).message);\n  }\n}\n\n// Use analysis in production\nAnalysis.use(getEstimatedDeviceLocation);\n"
        },
        {
          "id": "configuration-parameters-for-dynamic-last-value",
          "title": "Dynamic Last Value Configuration",
          "description": "Configuration parameters for dynamic last value displays",
          "language": "typescript",
          "tags": [
            "configuration",
            "dynamic",
            "last-value",
            "parameters",
            "display"
          ],
          "filename": "configuration-parameters-for-dynamic-last-value.ts",
          "file_path": "deno-rt2025/configuration-parameters-for-dynamic-last-value.ts",
          "code": "/*\n ** Analysis Example\n ** Configuration parameters for dynamic last value\n **\n ** Set the configurations parameters with the last value of a given variable,\n ** in this example it is the \"temperature\" variable\n **\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n **  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n **  2 - In the Target selector, select the Analysis with the field set as \"ID\" and choose your Analysis in the list;\n **  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n **  4 - To save your new Policy, click the save button in the bottom right corner;\n */\n\nimport type { ConfigurationParams, Data, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Resources } from \"npm:@tago-io/sdk\";\n\n// set the timezone to show up on dashboard. TagoIO may handle ISOString automatically in a future update.\nlet timezone = \"America/New_York\";\n\nconst getParam = (params: ConfigurationParams[], key: string): ConfigurationParams =>\n  params.find((x) => x.key === key) || { key, value: \"-\", sent: false };\n\nasync function applyDeviceCalculation({\n  id: deviceID,\n  name,\n}: {\n  id: string;\n  name: string;\n}): Promise<void> {\n  const deviceInfoText = `${name}(${deviceID})`;\n  console.info(`Processing Device ${deviceInfoText}`);\n\n  // Get the temperature variable inside the device bucket.\n  // notice it will get the last record at the time the analysis is running.\n  const dataResult = await Resources.devices.getDeviceData(deviceID, {\n    variables: [\"temperature\"],\n    query: \"last_value\",\n  });\n  if (!dataResult.length) {\n    console.error(`No data found for ${deviceInfoText}`);\n    return;\n  }\n\n  // Get configuration params list of the device\n  const deviceParams = await Resources.devices.paramList(deviceID);\n\n  // get the variable temperature from our dataResult array\n  const temperature = dataResult.find((data) => data.variable === \"temperature\");\n  if (temperature) {\n    // get the config. parameter with key temperature\n    const temperatureParam = getParam(deviceParams, \"temperature\");\n    // get the config. parameter with key last_record_time\n    const lastRecordParam = getParam(deviceParams, \"last_record_time\");\n\n    // Format time using built-in Date methods instead of moment\n    const timeString = new Date(temperature.time as unknown as string).toLocaleString(\"en-US\", {\n      timeZone: timezone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n\n    // creates or edit the tempreature Param with the value of temperature.\n    // creates or edit the last_record_time Param with the time of temperature.\n    // Make sure to cast the value to STRING, otherwise you'll get an error.\n    await Resources.devices.paramSet(deviceID, [\n      { ...temperatureParam, value: String(temperature.value) },\n      { ...lastRecordParam, value: timeString },\n    ]);\n  }\n}\n\n// Simple queue implementation to process devices with concurrency control\nasync function processDevicesWithQueue(\n  devices: { id: string; name: string }[],\n  concurrency: number = 5\n): Promise<void> {\n  const results: Promise<void>[] = [];\n  let index = 0;\n\n  async function processNext(): Promise<void> {\n    if (index >= devices.length) return;\n\n    const currentIndex = index++;\n    const device = devices[currentIndex];\n\n    await applyDeviceCalculation(device);\n\n    // Process next device\n    return processNext();\n  }\n\n  // Start initial batch of concurrent operations\n  for (let i = 0; i < Math.min(concurrency, devices.length); i++) {\n    results.push(processNext());\n  }\n\n  // Wait for all operations to complete\n  await Promise.all(results);\n}\n\n// scope is not used for Schedule action.\nasync function startAnalysis(_context: TagoContext, _scope: Data[]): Promise<void> {\n  // get timezone from the account\n  const accountInfo = await Resources.account.info();\n  if (accountInfo.timezone) {\n    timezone = accountInfo.timezone;\n  }\n\n  // fetch device list filtered by tags.\n  // Device list always return an Array with DeviceInfo object.\n  const deviceList = await Resources.devices.list({\n    amount: 500,\n    fields: [\"id\", \"name\", \"tags\"],\n    filter: {\n      tags: [{ key: \"type\", value: \"sensor\" }],\n    },\n  });\n\n  // Process devices with concurrency control (5 devices simultaneously)\n  await processDevicesWithQueue(deviceList, 5);\n\n  console.log(\"Finished processing all devices\");\n}\n\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "console",
          "title": "Console Hello World",
          "description": "Hello World example with console output",
          "language": "typescript",
          "tags": [
            "basic",
            "console",
            "hello-world"
          ],
          "filename": "console.ts",
          "file_path": "deno-rt2025/console.ts",
          "code": "/*\n * TagoIO - Analysis Example\n * Hello World\n *\n * Check out the SDK documentation on: https://js.sdk.tago.io\n *\n * Learn how to send messages to the console located on the TagoIO analysis screen.\n * You can use this principle to show any information during and after development.\n */\n\nimport { Analysis } from \"npm:@tago-io/sdk\";\n\n// The function myAnalysis will run when you execute your analysis\nfunction myAnalysis() {\n  console.log(\"Hello World\");\n}\n\nAnalysis.use(myAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "create-device",
          "title": "Create Device from Dashboard",
          "description": "Create new devices dynamically using dashboard interface",
          "language": "typescript",
          "tags": [
            "device",
            "create",
            "dashboard",
            "dynamic",
            "management"
          ],
          "filename": "create-device.ts",
          "file_path": "deno-rt2025/create-device.ts",
          "code": "/*\n * Example: Creating Devices via Dashboard\n * This example demonstrates how to create devices in your account using an Input Widget on the dashboard.\n *\n * Dashboard Template:\n * You can access the dashboard template needed for this operation here: https://admin.tago.io/template/6143555a314cef001871ec78\n * It's recommended to use a dummy HTTPS device alongside the dashboard for testing purposes.\n *\n * Usage Instructions:\n * For the analysis to function correctly, you must add a new policy to your account by following these steps:\n *  1. Navigate to https://admin.tago.io/am and click on the \"Add Policy\" button.\n *  2. In the Target selector, ensure the field is set to \"ID\", then select your Analysis from the list.\n *  3. Click on the \"Click to add a new permission\" option, choose \"Device\" as the type, and set the rule to \"Access\" with the scope as \"Any\".\n *  4. Finalize by clicking the save button located in the bottom right corner to apply your new Policy.\n */\n\nimport type { Data, DeviceCreateInfo, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Resources } from \"npm:@tago-io/sdk\";\n\nasync function startAnalysis(_context: TagoContext, scope: Data[]): Promise<void> {\n  if (!scope[0]) {\n    return console.log(\"The analysis must be triggered by a widget.\");\n  }\n\n  console.log(\"Creating your device\");\n\n  // Get the variables sent by the widget/dashboard.\n  const network_id = scope.find((x) => x.variable === \"device_network\");\n  const connector_id = scope.find((x) => x.variable === \"device_connector\");\n  const device_name = scope.find((x) => x.variable === \"device_name\");\n  const device_eui = scope.find((x) => x.variable === \"device_eui\");\n\n  if (!connector_id || !connector_id.value) {\n    return console.log('Missing \"device_connector\" in the data scope.');\n  } else if (!network_id || !network_id.value) {\n    return console.log('Missing \"device_network\" in the data scope.');\n  } else if (!device_eui || !device_eui.value) {\n    return console.log('Missing \"device_eui\" in the data scope.');\n  } else if (!device_name || !device_name.value) {\n    return console.log('Missing \"device_name\" in the data scope.');\n  }\n\n  const deviceID = scope[0]?.device;\n  if (!deviceID) {\n    return console.log(\"Device ID not found in the data scope\");\n  }\n\n  const deviceCreateInfo: DeviceCreateInfo = {\n    name: device_name.value as string,\n    // Serie number is the parameter for device eui, sigfox id, etc..\n    serie_number: device_eui.value as string,\n    tags: [\n      // You can add custom tags here.\n      { key: \"type\", value: \"sensor\" },\n      { key: \"device_eui\", value: device_eui.value as string },\n    ],\n    connector: connector_id.value as string,\n    network: network_id.value as string,\n    active: true,\n    type: \"immutable\",\n    chunk_period: \"month\", //consider change\n    chunk_retention: 1, //consider change\n  };\n\n  const result = await Resources.devices.create(deviceCreateInfo).catch((error) => {\n    // Send the validation to the device.\n    // That way we create an error in the dashboard for feedback.\n    Resources.devices.sendDeviceData(deviceID, {\n      variable: \"validation\",\n      value: `Error when creating the device ${error}`,\n      metadata: { color: \"red\" },\n    });\n    throw error;\n  });\n\n  // To add Configuration Parameters to the device:\n  await Resources.devices.paramSet(result.device_id, {\n    key: \"param_key\",\n    value: \"10\",\n    sent: false,\n  });\n\n  // Send feedback to the dashboard:\n  await Resources.devices.sendDeviceData(deviceID, {\n    variable: \"validation\",\n    value: \"Device succesfully created!\",\n    metadata: { type: \"success\" },\n  });\n  console.log(`Device succesfully created. ID: ${result.device_id}`);\n}\n\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "data-amount",
          "title": "Device Data Amount Report",
          "description": "Get top 20 devices with highest data amount usage",
          "language": "typescript",
          "tags": [
            "data",
            "amount",
            "report",
            "usage",
            "analytics"
          ],
          "filename": "data-amount.ts",
          "file_path": "deno-rt2025/data-amount.ts",
          "code": "/**\n * TagoIO - Analysis Example\n * Device Data Amount Analysis\n *\n * This analysis retrieves the amount of data for each device and logs into the console\n * the top 20 devices with the highest data amount.\n *\n * Requirements:\n * - Access Policy must have permission to list devices (Device -> Access)\n * - Access Policy must have permission to get device data (Device -> Get Data)\n *\n * Check out the SDK documentation on: https://js.sdk.tago.io\n * Create Access Policy at https://admin.tago.io/am\n *\n */\n\nimport type { Data, DeviceListItem, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Resources } from \"npm:@tago-io/sdk\";\nimport { queue } from \"npm:async\";\n\ninterface DeviceResult {\n  name: string;\n  id: string;\n  amount: number;\n}\n\n/**\n * This is the main function that will be called when the analysis is executed\n */\nasync function myAnalysis(_context: TagoContext, _scope: Data[]): Promise<void> {\n  const resultList: DeviceResult[] = [];\n\n  const getDeviceAmount = async (deviceObj: DeviceListItem): Promise<void> => {\n    const result = await Resources.devices.amount(deviceObj.id).catch(console.log);\n    if (!result) {\n      // 0 data or error\n      return;\n    }\n\n    // Any code that you want to run for each device before pushing to the resultList\n    // Example to not include devices with less than 40,000 data points\n    // if (result < 40000) {\n    //   return;\n    // }\n\n    resultList.push({ name: deviceObj.name, id: deviceObj.id, amount: result });\n    await new Promise((resolve) => setTimeout(resolve, 200)); // sleep\n  };\n\n  const filter = {\n    // type: \"mutable\"\n    // type: \"immutable\"\n    // tags: [{ key: \"my_tag_key\", value: \"my_tag_value\" }]\n  };\n\n  // Create a queue to limit the amount of devices being processed at the same time\n  const amountQueue = queue(getDeviceAmount, 5);\n  amountQueue.error((error: unknown) => console.log(error));\n\n  const deviceList = Resources.devices.listStreaming({ filter });\n  for await (const device of deviceList) {\n    void amountQueue.push(device);\n  }\n\n  // stop if queue is empty\n  if (amountQueue.idle() && resultList.length === 0) {\n    console.error(\"No devices found to process\");\n    return;\n  }\n\n  // periodically console the amount of devices still in the queue\n  const queueMonitor = setInterval(() => {\n    console.log(`Devices in queue: ${amountQueue.length()}`);\n  }, 10000);\n\n  // wait for all devices to be processed\n  await amountQueue.drain();\n\n  // Clear the monitoring interval\n  clearInterval(queueMonitor);\n\n  // Reorder resultList by the highest data amount\n  resultList.sort((a, b) => b.amount - a.amount);\n\n  // Log the top 20 devices\n  for (const result of resultList) {\n    console.log(JSON.stringify(result));\n  }\n}\n\nAnalysis.use(myAnalysis);\n"
        },
        {
          "id": "data-retention",
          "title": "Data Retention Management",
          "description": "Implement custom data retention policies for device data",
          "language": "typescript",
          "tags": [
            "data",
            "retention",
            "cleanup",
            "management",
            "storage"
          ],
          "filename": "data-retention.ts",
          "file_path": "deno-rt2025/data-retention.ts",
          "code": "/*\n * Analysis Example\n * Custom Data Retention\n *\n * Get the list of devices, then go to each device removing the variables you chooses.\n *\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n **  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n **  2 - In the Target selector, select the Analysis with the field set as \"ID\" and choose your Analysis in the list;\n **  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n **  4 - To save your new Policy, click the save button in the bottom right corner;\n */\n\nimport { Analysis, type DeviceQuery, Resources, type TagoContext } from \"npm:@tago-io/sdk\";\nimport dayjs from \"npm:dayjs\";\n\n// The function startAnalysis will run when you execute your analysis\nasync function startAnalysis(context: TagoContext): Promise<void> {\n  // Bellow is an empty filter.\n  // Examples of filter:\n  // { tags: [{ key: 'tag-key', value: 'tag-value' }]}\n  // { name: 'name*' }\n  // { name: '*name' }\n  // { bucket: 'bucket-id' }\n  const filter = {};\n\n  const deviceQuery: DeviceQuery = {\n    page: 1,\n    fields: [\"id\"],\n    filter,\n    amount: 100,\n  };\n\n  const devices = await Resources.devices.list(deviceQuery);\n\n  for (const deviceObj of devices) {\n    const variables = [\"variable1\", \"variable2\"];\n    const qty = 100; // remove 100 registers of each variable\n    const end_date = dayjs().subtract(1, \"month\").toISOString(); // registers old than 1 month\n\n    const removeOptions = { variables, qty, end_date };\n\n    await Resources.devices\n      .deleteDeviceData(deviceObj.id!, removeOptions)\n      .then((result) => context.log(result))\n      .catch((error) => context.log(error));\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "data-transaction",
          "title": "Data Transaction Summary",
          "description": "Get total transaction count and statistics by user",
          "language": "typescript",
          "tags": [
            "data",
            "transaction",
            "user",
            "statistics",
            "billing"
          ],
          "filename": "data-transaction.ts",
          "file_path": "deno-rt2025/data-transaction.ts",
          "code": "/*\n ** Analysis Example\n ** Get users total transactions\n **\n ** This analysis must run by an Scheduled Action.\n ** It gets a total amount of transactions by device, calculating by the total amount of data in the bucket\n ** each time the analysis run. Group the result by a tag.\n **\n ** Environment Variables\n ** In order to use this analysis, you must setup the Environment Variable table.\n **\n ** device_token: Token of a device where the total transactions will be stored. Get this in the Device's page.\n ** account_token: Your account token. Check bellow how to get this.\n **\n ** Steps to generate an account_token:\n ** 1 - Enter the following link: https://admin.tago.io/account/\n ** 2 - Select your Profile.\n ** 3 - Enter Tokens tab.\n ** 4 - Generate a new Token with Expires Never.\n ** 5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n */\n\nimport type { Data, DeviceListItem, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Account, Analysis, Device, Utils } from \"npm:@tago-io/sdk\";\nimport _ from \"npm:lodash\";\n\nasync function calculateUserTransactions(\n  account: Account,\n  storage: Device,\n  user_value: string,\n  device_list: DeviceListItem[]\n): Promise<void> {\n  // Collect the data amount for each device.\n  // Result of bucket_results is:\n  // [0, 120, 500, 0, 1000]\n  const bucket_results = await Promise.all(\n    device_list.map((device) => account.buckets.amount(device.bucket))\n  );\n  const total_transactions = _.sum(bucket_results);\n\n  // Get the total transactions of the last analysis run.\n  // Group is used to get only for this user.\n  // You can change that to get a specific device for the user, instead of using a global storage device.\n  // One way to do that is by just finding the device using a tag, see example:\n  //\n  // const [user_device] = await account.devices.list({ page: 1, fields: ['id', 'name', 'bucket', 'tags'], filter: { tags: [{ key: 'user_device', value: user_value }] }, amount: 1 });\n  // const device_token = await Utils.getTokenByName(account, user_device.id);\n  // const storage = new Device({ token: device_token });\n\n  let [last_total_transactions] = await storage.getData({\n    variables: [\"last_transactions\"],\n    qty: 1,\n    groups: user_value,\n  });\n  if (!last_total_transactions) {\n    last_total_transactions = { value: 0, time: new Date() } as Data;\n  }\n\n  const result = total_transactions - (last_total_transactions.value as number);\n\n  // Store the current total of transactions, the result for this analysis run and the key.\n  // Now you can just plot these variables in a dynamic table.\n  await storage.sendData([\n    {\n      variable: \"last_transactions\",\n      value: total_transactions,\n      group: user_value,\n    },\n    { variable: \"transactions_result\", value: result, group: user_value },\n    { variable: \"user\", value: user_value, group: user_value },\n  ]);\n}\n\nasync function myAnalysis(context: TagoContext): Promise<void> {\n  // Transform all Environment Variable to JSON.\n  const environment = Utils.envToJson(context.environment);\n  if (!environment.account_token) {\n    return console.log(\"You must setup an account_token in the Environment Variables.\");\n  } else if (!environment.device_token) {\n    return console.log(\"You must setup an device_token in the Environment Variables.\");\n  }\n  // Instance the account class\n  const account = new Account({ token: environment.account_token });\n  const storage = new Device({ token: environment.device_token });\n\n  // Setup the tag we will be searching in the device list\n  const tag_to_search = \"user_email\";\n\n  // Get the device_list and group it by the tag value.\n  // Result of grouped_device_list is:\n  // [\n  //   { value: 'test@tago.io', device_list: [ [Object], [Object] ] },\n  //   { value: 'user@tago.io', device_list: [ [Object] ] }\n  // ]\n  const device_list = await account.devices.list({\n    page: 1,\n    fields: [\"id\", \"name\", \"bucket\", \"tags\"],\n    filter: { tags: [{ key: tag_to_search }] },\n    amount: 10000,\n  });\n\n  const grouped_device_list = _.chain(device_list)\n    .groupBy(\n      (collection: DeviceListItem) =>\n        collection.tags?.find((x: { key: string; value: string }) => x.key === tag_to_search)?.value\n    )\n    .map((value: DeviceListItem[], key: string) => ({ value: key, device_list: value }))\n    .value();\n\n  // Call a new function for each group in assynchronous way.\n  await Promise.all(\n    grouped_device_list.map((group: { value: string; device_list: DeviceListItem[] }) =>\n      calculateUserTransactions(account, storage, group.value.replace(/ /g, \"\"), group.device_list)\n    )\n  );\n}\n\nAnalysis.use(myAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "device-list",
          "title": "Get Device List",
          "description": "Retrieve and filter device list from your account",
          "language": "typescript",
          "tags": [
            "devices",
            "api",
            "list",
            "filtering"
          ],
          "filename": "device-list.ts",
          "file_path": "deno-rt2025/device-list.ts",
          "code": "/*\n ** Analysis Example\n ** Get Device List\n **\n ** This analysis retrieves a list of devices from your account and prints it to the console.\n **\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n **  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n **  2 - In the Target selector, select the Analysis with the field set as \"ID\" and choose your Analysis in the list;\n **  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n **  4 - To save your new Policy, click the save button in the bottom right corner;\n */\n\nimport type { DeviceQuery, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Resources } from \"npm:@tago-io/sdk\";\n\nasync function startAnalysis(_context: TagoContext): Promise<void> {\n  // Example of filtering devices by tag.\n  // to use this filter, just remove the comment on the line 35\n  // const filter = {\n  //   tags: [\n  //     {\n  //       key: \"key_name\", // change by your key name\n  //       value: \"key_value\", // change by your key value\n  //     },\n  //   ],\n  //   // You also can filter by: name, last_input, last_output, bucket, etc.\n  // };\n\n  // Searching all devices with tag we want\n  const query: DeviceQuery = {\n    page: 1,\n    fields: [\"id\", \"tags\"],\n    // filter,\n    amount: 100,\n  };\n\n  const devices = await Resources.devices.list(query);\n\n  if (!devices.length) {\n    return console.debug(\"Devices not found\");\n  }\n\n  console.debug(JSON.stringify(devices));\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "device-offline",
          "title": "Device Offline Alert",
          "description": "Monitor devices and send alerts when they go offline",
          "language": "typescript",
          "tags": [
            "device",
            "offline",
            "alert",
            "monitoring",
            "status"
          ],
          "filename": "device-offline.ts",
          "file_path": "deno-rt2025/device-offline.ts",
          "code": "/*\n ** Analysis Example\n ** Device Offline Alert\n **\n ** This analysis must run by Time Interval. It checks if devices with given Tags\n ** had communication in the past minutes. If not, it sends an email or sms alert.\n **\n ** Environment Variables\n ** In order to use this analysis, you must setup the Environment Variable table.\n **\n ** checkin_time: Minutes between the last input of the device before sending the notification.\n ** tag_key: Device tag Key to filter the devices.\n ** tag_value: Device tag Value to filter the devices.\n ** email_list: Email list comma separated.\n ** sms_list: Phone number list comma separated. The phone number must include the country code\n **\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n **  1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n **  2 - In the Target selector, with the field set as \"ID\", choose your Analysis in the list;\n **  3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access\" with the field as \"Any\";\n **  4 - To save your new Policy, click the save button in the bottom right corner;\n */\n\nimport type { DeviceQuery, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Resources, Services, Utils } from \"npm:@tago-io/sdk\";\nimport dayjs from \"npm:dayjs\";\n\nasync function startAnalysis(context: TagoContext): Promise<void> {\n  // Transform all Environment Variable to JSON.\n  const env = Utils.envToJson(context.environment);\n\n  if (!env.checkin_time) {\n    return context.log(\"You must setup a checkin_time in the Environment Variables.\");\n  } else if (!env.tag_key) {\n    return context.log(\"You must setup a tag_key in the Environment Variables.\");\n  } else if (!env.tag_value) {\n    return context.log(\"You must setup a tag_value in the Environment Variables.\");\n  } else if (!env.email_list && !env.sms_list) {\n    return context.log(\"You must setup an email_list or a sms_list in the Environment Variables.\");\n  }\n\n  const checkin_time = Number(env.checkin_time);\n  if (Number.isNaN(checkin_time)) return context.log(\"The checkin_time must be a number.\");\n\n  // You can remove the comments on line 51 and 57 to use the Tag Filter.\n  //const filter = { tags: [{ key: env.tag_key, value: env.tag_value }] };\n\n  const deviceQuery: DeviceQuery = {\n    page: 1,\n    amount: 1000,\n    fields: [\"id\", \"name\", \"last_input\"],\n    // filter,\n  };\n\n  const devices = await Resources.devices.list(deviceQuery);\n\n  if (!devices.length) {\n    return context.log(\n      `No device found with given tags. Key: ${env.tag_key}, Value: ${env.tag_value} `\n    );\n  }\n\n  context.log(\"Checking devices: \", devices.map((x) => x.name).join(\", \"));\n\n  const now = dayjs();\n  const alert_devices: string[] = [];\n\n  for (const device of devices) {\n    if (!device.last_input) {\n      continue;\n    }\n    const last_input = dayjs(new Date(device.last_input));\n\n    // Check the difference in minutes.\n    const diffInMinutes = now.diff(last_input, \"minute\");\n\n    if (diffInMinutes > checkin_time) {\n      alert_devices.push(device.name);\n    }\n  }\n\n  if (!alert_devices.length) {\n    return context.log(\"All devices are okay.\");\n  }\n\n  context.log(\"Sending notifications\");\n  const emailService = new Services({ token: context.token }).email;\n  const smsService = new Services({ token: context.token }).sms;\n\n  let message = `Hi!\\nYou're receiving this alert because the following devices didn't send data in the last ${checkin_time} minutes.\\n\\nDevices:\\n`;\n  message += alert_devices.join(\"\\n\");\n\n  if (env.email_list) {\n    // Remove space in the string\n    const emails = env.email_list.replace(/ /g, \"\");\n\n    const emailData = {\n      to: emails,\n      subject: \"Device Offline Alert\",\n      message,\n    };\n\n    await emailService.send(emailData);\n  }\n\n  if (env.sms_list) {\n    // Remove space in the string and convert to an Array.\n    const smsNumbers = env.sms_list.replace(/ /g, \"\").split(\",\");\n\n    for (const phone of smsNumbers) {\n      const smsData = {\n        to: phone,\n        message,\n      };\n\n      await smsService.send(smsData);\n    }\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "downlink-dashboard",
          "title": "Downlink from Dashboard",
          "description": "Send downlink messages to devices triggered from dashboard",
          "language": "typescript",
          "tags": [
            "downlink",
            "dashboard",
            "device",
            "communication",
            "control"
          ],
          "filename": "downlink-dashboard.ts",
          "file_path": "deno-rt2025/downlink-dashboard.ts",
          "code": "/*\n ** Analysis Example\n ** Sending downlink using dashboard\n **\n ** Using an Input Widget in the dashboard, you will be able to trigger a downlink to\n ** any LoraWaN network server.\n ** You can get the dashboard template to use here: https://admin.tago.io/template/5f514218d4555600278023c4\n ** IMPORTANT: Your device is required to send an Uplink before any downlink can be send.\n **\n ** Environment Variables\n ** In order to use this analysis, you must setup the Environment Variable table.\n **\n ** default_PORT: The default port to be used if not sent by the dashboard.\n ** device_id: The default device id to be used if not sent by the dashboard (OPTIONAL).\n ** payload: The default payload to be used if not sent by the dashboard (OPTIONAL).\n **\n ** How to use:\n ** To analysis works, you need to add a new policy in your account. Steps to add a new policy:\n ** 1 - Click the button \"Add Policy\" at this url: https://admin.tago.io/am;\n ** 2 - In the Target selector, with the field set as \"ID\", choose your Analysis in the list;\n ** 3 - Click the \"Click to add a new permission\" element and select \"Device\" with the rule \"Access, Edit, Token Access\" with the field as \"Any\";\n ** 4 - Click the \"Click to add a new permission\" element and select \"Network\" with the rule \"Access\" with the field as \"Any\";\n **\n */\n\nimport type { Data, DownlinkOptions, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Resources, Utils } from \"npm:@tago-io/sdk\";\n\nasync function startAnalysis(context: TagoContext, scope: Data[]): Promise<void> {\n  // Remove code below if you want to trigger by schedule action and using environment variables.\n  if (!scope[0]) {\n    return context.log(\"This analysis must be triggered by a widget.\");\n  }\n\n  context.log(\"Downlink analysis started\");\n\n  // Get environment variables\n  const environment = Utils.envToJson(context.environment);\n\n  // Get the variables form_payload and form_port sent by the widget/dashboard.\n  let payload = scope.find((x) => x.variable === \"form_payload\");\n  let port = scope.find((x) => x.variable === \"form_port\");\n\n  // Setup from environment variable if widget hadn't been used to trigger the analysis.\n  if (!payload) {\n    payload = { value: environment.payload, device: environment.device_id } as Data;\n  }\n\n  if (!port) {\n    port = { value: environment.default_PORT } as Data;\n  }\n\n  // Error to make sure analysis have the information it needs.\n  if (!payload.value || !payload.device) {\n    return context.log('Missing \"form_payload\" in the data scope.');\n  } else if (!port || !port.value) {\n    return context.log('Missing \"form_port\" in the data scope.');\n  }\n\n  // All variables that trigger the analysis have the \"device\" parameter, with the TagoIO Device ID.\n  // Otherwise it will get from the environment variable.\n  const device_id = payload.device;\n  if (!device_id) {\n    return context.log(\n      \"Device key <device> not found in the variables sent by the widget/dashboard.\"\n    );\n  }\n\n  const resources = new Resources({ token: context.token });\n\n  const downlinkOptions: DownlinkOptions = {\n    payload: payload.value as string,\n    port: port.value as string,\n    confirmed: false,\n  };\n\n  const result = await Utils.sendDownlink(resources, device_id, downlinkOptions).catch(\n    (error) => error\n  );\n\n  console.log(result);\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "dynamic-notification",
          "title": "Dynamic Notifications",
          "description": "Send dynamic email, SMS and push notifications based on conditions",
          "language": "typescript",
          "tags": [
            "notification",
            "dynamic",
            "email",
            "sms",
            "push",
            "conditional"
          ],
          "filename": "dynamic-notification.ts",
          "file_path": "deno-rt2025/dynamic-notification.ts",
          "code": "/*\n ** Notification Analysis Example\n ** Dynamically Sending Notifications\n **\n ** This script demonstrates how to send notifications via Email, SMS, and Push to TagoRUN Users using analysis.\n ** To execute this example, you must first set up an action by variable to trigger this analysis.\n ** Once the action meets your specified conditions, the corresponding data will be dispatched for analysis.\n **\n ** Usage Instructions:\n ** In order for this analysis to function correctly, a new policy must be added to your account. Here are the steps for adding a new policy:\n **  1 - Navigate to https://admin.tago.io/am and click on \"Add Policy\";\n **  2 - In the Target selector, locate \"ID\" under Analysis field and choose your desired Analysis from the list;\n **  3 - Click on \"Click to add a new permission\", select \"Device\", and set rule as \"Access\" with \"Any\" field;\n **  4 - Click on \"Click to add a new permission\" again, select \"Service\", and set rules as \"Send Email\" and \"Send SMS\";\n **  5 - Once more click on \"Click to add a new permission\", choose \"Run User\", set rule as \"Create Notification\" with field set as \"Any\";\n **  6 - To finalize your new Policy, hit the save button located in the bottom right corner of the screen.\n */\n\nimport type { Data, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Resources, Services } from \"npm:@tago-io/sdk\";\n\nasync function startAnalysis(context: TagoContext, scope: Data[]): Promise<void> {\n  if (!scope[0]) {\n    return context.log(\"This analysis must be triggered by an action.\");\n  }\n\n  console.log(\"Analysis started\");\n\n  // Get the device ID from the scope and retrieve device information.\n  const device_id = scope[0].device;\n  if (!device_id) {\n    return context.log(\"Device ID not found in scope\");\n  }\n\n  const device_info = await Resources.devices.info(device_id);\n\n  // Get the device name and tags from the device.\n  // [TAG KEY]    [TAG VALUE]\n  // email        example@tago.io\n  // phone        +1XXxxxxxxx\n  // user_id      5f495ae55ff03d0028d39fc5\n  //\n  // This is just a generic example how to get this information. You can get data from a device, search in tags, or any other way of correlation you have.\n  // For example, you can get the email directly from the user_id if it was specified:\n  // const { email } = await account.run.userInfo(userID_tag.id);\n  const device_name = device_info.name;\n  const email_tag = device_info.tags?.find((tag) => tag.key === \"email\");\n  const phone_tag = device_info.tags?.find((tag) => tag.key === \"phone\");\n  const userID_tag = device_info.tags?.find((tag) => tag.key === \"user_id\");\n\n  // Instance the SMS and Email service using the analysis token from the context.\n  const email_service = new Services({ token: context.token }).email;\n  const sms_service = new Services({ token: context.token }).sms;\n\n  // Send the notifications and output the results to the analysis console.\n  if (email_tag) {\n    const emailData = {\n      to: email_tag.value,\n      subject: \"Notification alert\",\n      message: `You received a notification for the device: ${device_name}. Variable: ${scope[0].variable}, Value: ${scope[0].value}`,\n    };\n\n    await email_service\n      .send(emailData)\n      .then((result) => console.log(result))\n      .catch((error) => console.log(error));\n  } else {\n    console.log(\"Email not found for this device.\");\n  }\n\n  if (phone_tag) {\n    const smsData = {\n      to: phone_tag.value,\n      message: `You received a notification for the device: ${device_name}. Variable: ${scope[0].variable}, Value: ${scope[0].value}`,\n    };\n\n    await sms_service\n      .send(smsData)\n      .then((result) => console.log(result))\n      .catch((error) => console.log(error));\n  } else {\n    console.log(\"Phone number not found for this device.\");\n  }\n\n  if (userID_tag) {\n    const notificationData = {\n      title: \"Notification Alert\",\n      message: `You received a notification for the device: ${device_name}. Variable: ${scope[0].variable}, Value: ${scope[0].value}`,\n    };\n\n    await Resources.run\n      .notificationCreate(userID_tag.value, notificationData)\n      .then((result) => console.log(result))\n      .catch((error) => console.log(error));\n  } else {\n    console.log(\"User ID not found for this device.\");\n  }\n\n  console.log(\"Script end.\");\n}\n\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "email-export",
          "title": "Email Export",
          "description": "Export device data and send via email attachment",
          "language": "typescript",
          "tags": [
            "email",
            "export",
            "data",
            "attachment",
            "csv"
          ],
          "filename": "email-export.ts",
          "file_path": "deno-rt2025/email-export.ts",
          "code": "/*\n * Analysis Example\n * Email export\n *\n * Learn how to send an email with data in a .csv file attachment.\n *\n * This analysis will read the variable fuel_level from your device,\n * and send the values in a .csv file to an e-mail address\n *\n * Instructions\n * To run this analysis you need to add a device token and the e-mail to the environment variables.\n * To do that, go to your device, then token and copy your token.\n * Go the the analysis, then environment variables,\n * type device_token on key, and paste your token on value\n * click the + button to add a new environment\n * on key, type email and on value, type the e-mail address\n */\n\nimport type { DataQuery, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Device, Services, Utils } from \"npm:@tago-io/sdk\";\n\n// The function myAnalysis will run when you execute your analysis\nasync function startAnalysis(context: TagoContext): Promise<void> {\n  // reads the values from the environment and saves it in the variable env_vars\n  const env_vars = Utils.envToJson(context.environment);\n  if (!env_vars.device_token) {\n    return context.log(\"device_token environment variable not found\");\n  }\n\n  if (!env_vars.email) {\n    return context.log(\"email environment variable not found\");\n  }\n\n  const device = new Device({ token: env_vars.device_token });\n\n  // Get the 5 last records of the variable fuel_level in the device bucket.\n  const query: DataQuery = { variables: \"fuel_level\", qty: 5 };\n  const fuel_list = await device.getData(query);\n\n  // Create csv header\n  let csv = \"Fuel Level\";\n\n  // For each record in the fuel_list, add the value in the csv text.\n  // Use \\n to break the line.\n  for (const item of fuel_list) {\n    csv = `${csv},\\n${item.value}`;\n  }\n\n  // Print the csv text to the TagoIO analysis console, as a preview\n  context.log(csv);\n\n  // Start the email service\n  const email = new Services({ token: context.token }).email;\n\n  // Send the email.\n  const emailData = {\n    message: \"This is an example of a body message\",\n    subject: \"Exported File from TagoIO\",\n    to: env_vars.email,\n    attachment: {\n      archive: csv,\n      filename: \"exported_file.csv\",\n    },\n  };\n\n  const service_response = await email.send(emailData);\n\n  context.log(service_response);\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "find",
          "title": "Find and Operate Data",
          "description": "Find and operate data from devices using filtering and manipulation",
          "language": "typescript",
          "tags": [
            "data",
            "find",
            "filter",
            "operation",
            "device"
          ],
          "filename": "find.ts",
          "file_path": "deno-rt2025/find.ts",
          "code": "/*\n * Analysis Example\n * Operate data from devices\n *\n * Read information from a variable generated by devices,\n * run a simple calculation in real-time, and create a new variable with the output.\n *\n * Instructions\n * To run this analysis you need to add a device token to the environment variables,\n * To do that, go to your device, then token and copy your token.\n * Go the the analysis, then environment variables,\n * type device_token on key, and paste your token on value\n */\n\nimport type { DataQuery, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Device, Utils } from \"npm:@tago-io/sdk\";\n\n// The function startAnalysis will run when you execute your analysis\nasync function startAnalysis(context: TagoContext): Promise<void> {\n  // reads the values from the environment and saves it in the variable env_vars\n  const env_vars = Utils.envToJson(context.environment);\n\n  if (!env_vars.device_token) {\n    return context.log(\"Missing device_token environment variable\");\n  }\n\n  const device = new Device({ token: env_vars.device_token });\n\n  // create the filter options to get the data from TagoIO\n  const filter: DataQuery = {\n    variables: \"water_level\",\n    query: \"last_item\",\n  };\n\n  const resultArray = await device.getData(filter).catch(() => null);\n\n  // Check if the array is not empty\n  if (!resultArray || !resultArray[0]) {\n    return context.log(\"Empty Array\");\n  }\n\n  // query:last_item always returns only one value\n  const value = resultArray[0].value;\n  const time = resultArray[0].time;\n\n  // print to the console at TagoIO\n  context.log(`The last record of the water_level is ${value}. It was inserted at ${time}`);\n\n  // Multiplies the water_level value by 2 and inserts it in another variable\n  const obj_to_save = {\n    variable: \"water_level_double\",\n    value: (value as number) * 2,\n  };\n\n  try {\n    await device.sendData(obj_to_save);\n    context.log(\"Successfully Inserted\");\n  } catch (error) {\n    context.log(\"Error when inserting:\", error);\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "generate-pdf-report",
          "title": "Generate PDF Report",
          "description": "Generate PDF report and send via email",
          "language": "typescript",
          "tags": [
            "pdf",
            "report",
            "email",
            "advanced"
          ],
          "filename": "generate-pdf-report.ts",
          "file_path": "deno-rt2025/generate-pdf-report.ts",
          "code": "/*\n * Analysis Example\n * Generate pdf report and send via email\n *\n *\n * Instructions\n * To run this analysis you need to add a email and device_token to the environment variables,\n * Go the the analysis, then environment variables,\n * type email on key, and insert your email on value\n * type device_token on key and insert your device token on value\n */\n\nimport type { AnalysisEnvironment, Data, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Device, Services, Utils } from \"npm:@tago-io/sdk\";\nimport dayjs from \"npm:dayjs\";\n\nconst your_variable = \"your_variable\"; //enter the variable from your device you would like in the report\n\n// The function myAnalysis will run when you execute your analysis\nasync function startAnalysis(context: TagoContext, _scope: Data[]): Promise<void> {\n  // reads the values from the environment and saves it in the variable envVars\n  const envVars = Utils.envToJson(context.environment) as AnalysisEnvironment;\n\n  if (!envVars.email) {\n    return context.log(\"email environment variable not found\");\n  }\n  if (!envVars.device_token) {\n    return context.log(\"device_token environment variable not found\");\n  }\n\n  const device = new Device({ token: envVars.device_token });\n\n  const data = await device.getData({\n    variables: [your_variable],\n    start_date: \"1 month\",\n    qty: 10,\n  });\n\n  let dataParsed = \"variable,value,unit,time\";\n\n  data.forEach((x) => {\n    dataParsed = `${x.variable},${x.value},${x.unit},${x.time}`;\n  });\n\n  const dataArray = dataParsed.split(\",\");\n  const dataVar = dataArray[0];\n  const dataVal = dataArray[1];\n\n  const html = `<html>\n    <head>\n        <style>\n            body, html {\n                margin: 0;\n            }\n            table {\n                width: 100%;\n                border-collapse: collapse;\n            }\n            td {\n                border: 1px solid black;\n                padding: 5px;\n                padding-bottom: 25px;\n                font-style: italic;\n            }\n        </style>\n    </head>\n    <body>\n      <table>\n        <tr>\n            <td colspan=\"7\">Issue date: ${dayjs().format(\"YYYY-MM-DD HH:mm:ss\")}</td>\n        </tr>\n        <tr>\n            <td colspan=\"4\">Start date: 2020-05-20 10:21:32</td>\n            <td colspan=\"3\">Stop date: 2020-10-08 22:56:19</td>\n        </tr>\n        <tr>\n            <td colspan=\"4\"> Report of the ${dataVar}</td>\n            <td colspan=\"3\">Device Kitchen Oven 5</td>\n        </tr>\n        <tr>\n            <td>Counter</td>\n            <td>${dataVar}</td>\n            <td>Time</td>\n            <td>Date</td>\n            <td>Temperature 2</td>\n            <td>Time</td>\n            <td>Date</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td>${dataVal}</td>\n          <td>10:53:20</td>\n          <td>2020-06-10</td>\n          <td>137</td>\n          <td>10:53:20</td>\n          <td>2020-06-10</td>\n        </tr>\n      </table>\n    </body>\n  </html>`;\n\n  const options = {\n    displayHeaderFooter: true,\n    footerTemplate:\n      '<div class=\"page-footer\" style=\"width:100%; text-align:center; font-size:12px;\">Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span></div>',\n    margin: {\n      top: \"1.5cm\",\n      right: \"1.5cm\",\n      left: \"1.5cm\",\n      bottom: \"1.5cm\",\n    },\n  };\n\n  // Convert HTML to base64 using built-in functions\n  const encoder = new TextEncoder();\n  const htmlBytes = encoder.encode(html);\n  const base64 = btoa(String.fromCharCode(...htmlBytes));\n\n  // start the PDF service\n  const pdfService = new Services({ token: context.token }).PDF;\n  const pdf_base64 = await pdfService.generate({\n    base64,\n    options,\n  });\n\n  // Start the email service\n  const emailService = new Services({ token: context.token }).email;\n\n  // Send the email.\n  await emailService.send({\n    to: envVars.email,\n    subject: \"Exported File from TagoIO\",\n    message: \"This is an example of a body message\",\n    attachment: {\n      archive: pdf_base64.result,\n      type: \"base64\",\n      filename: \"exportedfile.pdf\",\n    },\n  });\n}\n\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "geofence",
          "title": "Geofence Trigger Alert",
          "description": "Monitor device location and trigger alerts when entering/leaving geofenced areas",
          "language": "typescript",
          "tags": [
            "geofence",
            "location",
            "alert",
            "trigger"
          ],
          "filename": "geofence.ts",
          "file_path": "deno-rt2025/geofence.ts",
          "code": "/*\n * Environment Variables\n * In order to use this analysis, you must setup the Environment Variable table.\n * account_token: Your account token. Check the steps below.\n *\n * Steps to generate an account_token:\n * 1 - Enter the following link: https://admin.tago.io/account/\n * 2 - Select your Profile.\n * 3 - Enter Tokens tab.\n * 4 - Generate a new Token with Expires Never.\n * 5 - Press the Copy Button and place at the Environment Variables tab of this analysis with key account_token.\n *\n * Follow this guide https://docs.tago.io/en/articles/151 and create\n * two geofences, one with the event code 'danger' and another named 'safe'.\n */\n\nimport type { AnalysisEnvironment, Data, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Account, Analysis, Device, Services, Utils } from \"npm:@tago-io/sdk\";\n\ninterface Point {\n  latitude: number;\n  longitude: number;\n}\n\ninterface GeofenceLocation {\n  type: \"Polygon\" | \"Point\";\n  coordinates: number[][] | number[];\n  radius?: number;\n}\n\ninterface Geofence {\n  event: string;\n  geolocation: GeofenceLocation;\n  [key: string]: unknown;\n}\n\n// This function checks if our device is inside a polygon geofence\nfunction insidePolygon(point: number[], geofence: number[][]): boolean {\n  const x = point[1];\n  const y = point[0];\n  let inside = false;\n  for (let i = 0, j = geofence.length - 1; i < geofence.length; j = i++) {\n    const xi = geofence[i][0];\n    const yi = geofence[i][1];\n    const xj = geofence[j][0];\n    const yj = geofence[j][1];\n    const intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n  return inside;\n}\n\n// Simple point-in-circle calculation to replace geolib dependency\nfunction isPointWithinRadius(point: Point, center: Point, radius: number): boolean {\n  const R = 6371000; // Earth's radius in meters\n  const dLat = (center.latitude - point.latitude) * (Math.PI / 180);\n  const dLon = (center.longitude - point.longitude) * (Math.PI / 180);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(point.latitude * (Math.PI / 180)) *\n      Math.cos(center.latitude * (Math.PI / 180)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance <= radius;\n}\n\n// This function checks if our device is inside any geofence\nfunction checkZones(point: number[], geofence_list: Geofence[]): Geofence | undefined {\n  // The line below gets all Polygon geofences that we may have.\n  const polygons = geofence_list.filter((x) => x.geolocation.type === \"Polygon\");\n  if (polygons.length) {\n    // Here we check if our device is inside any Polygon geofence using our function above.\n    const pass_check = polygons.map((x) =>\n      insidePolygon(point, x.geolocation.coordinates as number[][])\n    );\n    const index = pass_check.findIndex((x) => x === true);\n    if (index !== -1) return polygons[index];\n  }\n  // The line below gets all Point (circle) geofences that we may have.\n  const circles = geofence_list.filter((x) => x.geolocation.type === \"Point\");\n  if (circles.length) {\n    // Here we check if our device is inside any Point geofence using our built-in function.\n    const pass_check = circles.map((x) =>\n      isPointWithinRadius(\n        { latitude: point[1], longitude: point[0] },\n        {\n          latitude: x.geolocation.coordinates[0] as number,\n          longitude: x.geolocation.coordinates[1] as number,\n        },\n        x.geolocation.radius || 100\n      )\n    );\n    const index = pass_check.findIndex((x) => x);\n    if (index !== -1) return circles[index];\n  }\n  return;\n}\n\n// This function help us get the device using just its id.\nasync function getDevice(account: Account, device_id: string): Promise<Device> {\n  const customer_token = await Utils.getTokenByName(account, device_id);\n  const customer_dev = new Device({ token: customer_token as string });\n  return customer_dev;\n}\n\nasync function startAnalysis(context: TagoContext, scope: Data[]): Promise<void> {\n  context.log(\"Running\");\n\n  if (!scope[0]) {\n    throw new Error(\"Scope is missing\"); // doesn't need to run if scope[0] is null\n  }\n\n  // The code block below gets all environment variables and checks if we have the needed ones.\n  const environment = Utils.envToJson(context.environment) as AnalysisEnvironment;\n  if (!environment.account_token) {\n    throw new Error(\"Missing account_token environment var\");\n  }\n\n  const account = new Account({ token: environment.account_token });\n  const device_id = scope[0].device;\n\n  if (!device_id) {\n    throw new Error(\"Device ID not found in scope\");\n  }\n\n  // Here we get the device information using our account data and the device id.\n  const device = await getDevice(account, device_id);\n  // This checks if we received a location\n  const location = scope.find((data) => data.variable === \"location\");\n  if (!location || !location.location) return context.log(\"No location found in the scope.\");\n\n  // Now we check if we have any geofences to go through.\n  const geofences = await device.getData({ variables: \"geofence\", qty: 10 });\n  const zones: Geofence[] = geofences.map((geofence) => geofence.metadata as Geofence);\n  const zone = checkZones(\n    [location.location.coordinates[1], location.location.coordinates[0]],\n    zones\n  );\n\n  // The line below starts our notification service.\n  const notification = new Services({ token: context.token }).Notification;\n\n  if (!zone) {\n    // If no geofence is found, we stop our application sending a notification.\n    await notification.send({\n      title: \"No zone alert\",\n      message: \"Your device is not inside any zone.\",\n    });\n    context.log(\"Your device is not inside any zone.\");\n    return;\n  }\n\n  if (zone.event === \"danger\") {\n    // If our device is inside a danger geofence, we will send a notification with a danger alert.\n    await notification.send({\n      title: \"Danger alert\",\n      message: \"Your device is inside a dangerous zone.\",\n    });\n  }\n  if (zone.event === \"safe\") {\n    // If our device is inside a safe geofence, we will send a safe geofence notification.\n    await notification.send({\n      title: \"Safe alert\",\n      message: \"Your device is inside a safe zone.\",\n    });\n  }\n  context.log(zone.event);\n}\n\nAnalysis.use(startAnalysis);\n"
        },
        {
          "id": "http-get",
          "title": "HTTP GET Request",
          "description": "Make HTTP GET requests to external APIs and routes",
          "language": "typescript",
          "tags": [
            "http",
            "get",
            "api",
            "request",
            "external"
          ],
          "filename": "http-get.ts",
          "file_path": "deno-rt2025/http-get.ts",
          "code": "/*\n ** Analysis Example\n ** HTTP GET Request\n **\n ** This analysis makes a simple GET request to an HTTP route. It's a starting example for you to develop more\n ** complex algorithms.\n ** In this example we get the Account name and print to the console.\n **\n **.\n */\n\nimport type { TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis } from \"npm:@tago-io/sdk\";\n\ninterface ApiResponse {\n  result: {\n    name: string;\n  };\n}\n\nasync function startAnalysis(context: TagoContext): Promise<void> {\n  const url = \"https://api.tago.io/info\";\n  const headers = {\n    Authorization: \"Your-Account-Token\",\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers,\n      // How to use HTTP QueryString in fetch:\n      // new URLSearchParams({ serie: \"123\" })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const result: ApiResponse = await response.json();\n    context.log(result);\n\n    context.log(\"Your account name is: \", result.result.name);\n  } catch (error) {\n    context.log(`${error}\\n${error}`);\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "mqtt-push",
          "title": "MQTT Push from Dashboard",
          "description": "Send MQTT messages triggered from dashboard interactions",
          "language": "typescript",
          "tags": [
            "mqtt",
            "push",
            "dashboard",
            "messaging",
            "iot"
          ],
          "filename": "mqtt-push.ts",
          "file_path": "deno-rt2025/mqtt-push.ts",
          "code": "/*\n ** Analysis Example\n ** MQTT Push\n **\n * Snippet to push data to MQTT. Follow this pattern within your application\n * If you want more details about MQTT, search \"MQTT\" in TagoIO help center.\n * You can find plenty of documentation about this topic.\n * TagoIO Team.\n **\n ** How to use?\n ** In order to trigger this analysis you must setup a Dashboard.\n ** Create a Widget \"Form\" and enter the variable 'push_payload' for the device you want to push with the MQTT.\n ** In User Control, select this Analysis in the Analysis Option.\n ** Save and use the form.\n */\n\nimport type { Data, TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Services } from \"npm:@tago-io/sdk\";\n\ninterface TemperatureData {\n  variable: string;\n  value: number;\n  unit: string;\n}\n\nasync function mqttPushExample(context: TagoContext, scope: Data[]): Promise<void> {\n  if (!scope.length) {\n    return context.log(\"This analysis must be triggered by a dashboard.\");\n  }\n\n  const myData = scope.find((x) => x.variable === \"push_payload\") || scope[0];\n  if (!myData) {\n    return context.log(\"Couldn't find any variable in the scope.\");\n  }\n\n  // Create your data object to push to MQTT\n  // In this case we're sending a JSON object.\n  // You can send anything you want.\n  // Example:\n  // const myDataObject = 'This is a string';\n  const myDataObject: TemperatureData = {\n    variable: \"temperature_celsius\",\n    value: ((myData.value as number) - 32) * (5 / 9),\n    unit: \"C\",\n  };\n\n  // Create a object with the options you chooses\n  const options = {\n    qos: 0,\n  };\n\n  // Publishing to MQTT\n  const MQTT = new Services({ token: context.token }).MQTT;\n  await MQTT.publish({\n    // bucket: myData.bucket, // for legacy devices\n    bucket: myData.device!, // for immutable/mutable devices\n    message: JSON.stringify(myDataObject),\n    topic: \"tago/my_topic\",\n    options,\n  }).then(\n    (result) => context.log(result),\n    (error) => context.log(error)\n  );\n}\n\nAnalysis.use(mqttPushExample);\n\n// To run analysis on your machine (external)\n// Analysis.use(mqttPushExample, { token: \"YOUR-TOKEN\" });\n"
        },
        {
          "id": "notifications",
          "title": "Send Notifications",
          "description": "Send notification to account and dashboard with optional dashboard linking",
          "language": "typescript",
          "tags": [
            "notification",
            "alert",
            "dashboard",
            "email"
          ],
          "filename": "notifications.ts",
          "file_path": "deno-rt2025/notifications.ts",
          "code": "import type { TagoContext } from \"npm:@tago-io/sdk\";\nimport { Analysis, Services, Utils } from \"npm:@tago-io/sdk\";\n\n/**\n * The main function used by Tago to run the script.\n * It sends a notification to the account and another one linked to a dashboard.\n * Optional: You can set a dashboard_id using an environment variable\n * this will show a button on the notification to send the user directly to the dashboard\n */\nasync function startAnalysis(context: TagoContext): Promise<void> {\n  // reads the values from the environment variables and saves it in the variable env_vars\n  const env_var = Utils.envToJson(context.environment);\n\n  const notification = new Services({ token: context.token }).Notification;\n\n  // In this variable, you type the title of the notification\n  const title = \"Your title\";\n\n  // In this variable, you type the message that you will send on the notification\n  const message = \"Your message\";\n\n  try {\n    const notificationData = {\n      message,\n      title,\n      ref_id: env_var.dashboard_id || undefined,\n    };\n\n    const service_response = await notification.send(notificationData);\n\n    context.log(service_response);\n  } catch (error) {\n    context.log(error);\n  }\n}\n\nAnalysis.use(startAnalysis);\n\n// To run analysis on your machine (external)\n// Analysis.use(myAnalysis, { token: \"YOUR-TOKEN\" });\n"
        }
      ]
    },
    "python-legacy": {
      "runtime": {
        "name": "python-legacy",
        "displayName": "Python Legacy",
        "language": "python",
        "exts": [
          ".py"
        ],
        "sourceDir": "snippets/analysis"
      },
      "snippets": [
        {
          "id": "autoscaling-profiles-limits",
          "title": "Autoscaling Profile Limits",
          "description": "Monitor and manage autoscaling profile limits and usage",
          "language": "python",
          "tags": [
            "autoscaling",
            "profile",
            "limits",
            "monitoring",
            "management"
          ],
          "filename": "autoscaling-profiles-limits.py",
          "file_path": "python-legacy/autoscaling-profiles-limits.py",
          "code": "\"\"\"\nTagoIO - Analysis Example\nAuto Scaling analysis\n\nCheck out the SDK documentation on: https://js.sdk.tago.io\n\nThs is a script to automatically check your current usage, and auto-scale your account if needed.\nYou can get the analysis template with all the Environment Variables here:\n        https://admin.tago.io/template/62151212ec8d8f0012c52772\n\nIn order to use this analysis, you must setup all the environment variables needed.\nYou're also required to create an Action of trigger type Schedule, and choose to run this analysis.\nIn the action you set how often you want to run this script to check your limits. It can set to a minimum of 1 minute.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\naccount_token: Your account token. Check the steps at the end to understand how to generate it.\ninput: 95. The 95 value will scale data input when it reachs 95% of the usage. Keep it blank to not scale data input.\noutput: 95\ndata_records: 95\nanalysis: 95\nsms: 95\nemail: 95\npush_notification: 95\nfile_storage: 95\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import Optional\n\nfrom tagoio_sdk import Account, Analysis\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\nfrom tagoio_sdk.modules.Account.Billing_Type import (\n    BillingPrices,\n    BillingSubscriptionServices,\n)\n\n\n@dataclass\nclass CheckAutoScaleSource:\n    type: str\n    current_value: int\n    limit: int\n    scale: float\n    billing: BillingPrices\n    account_limit: BillingSubscriptionServices\n\n\ndef check_auto_scale(data: CheckAutoScaleSource) -> Optional[int]:\n    # Stop if current use is less than 95% of what was hired.\n    if data.limit <= 0 or data.limit * (data.scale * 0.01) > data.current_value:\n        return None\n\n    service_billing = next(\n        (\n            obj\n            for obj in data.billing[data.type]\n            if obj[\"amount\"] > data.account_limit[data.type][\"limit\"]\n        ),\n        None,\n    )\n    return service_billing[\"amount\"] if service_billing else None\n\n\ndef get_profile_id_by_token(account: Account, token: str) -> Optional[str]:\n    profiles = account.profile.list()\n\n    for profile in profiles:\n        token_exist = [\n            obj\n            for obj in account.profile.tokenList(profileID=profile[\"id\"])\n            if obj[\"token\"] == token\n        ]\n        if token_exist:\n            return profile[\"id\"]\n    raise Exception(\n        \"Profile not found for the account token in the environment variable\"\n    )\n\n\ndef my_analysis(context, list: list = None):\n    # Get the environment variables and parses it to a JSON\n    environment = envToJson(environment=context.environment)\n\n    if not environment:\n        raise ValueError(\"[ERROR] environment variable empty.\")\n\n    if not environment.get(\"account_token\"):\n        raise ValueError(\n            \"[ERROR] You must enter a valid account_token in the environment variable\"\n        )\n\n    # Setup the account and get's the ID of the profile the account token belongs to.\n    account = Account({\"token\": environment[\"account_token\"]})\n    profile_id = get_profile_id_by_token(\n        account=account, token=environment[\"account_token\"]\n    )\n\n    # Get the current subscriptions of our account for all the services.\n    services_limit = (account.billing.getSubscription())[\"services\"]\n\n    # get current limit and used resources of the profile.\n    summary = account.profile.summary(profileID=profile_id)\n    limit, limit_used = summary[\"limit\"], summary[\"limit_used\"]\n\n    # get the tiers of all services, so we know the next tier for our limits.\n    billing_prices = account.billing.getPrices()\n\n    # Check each service to see if it needs scaling\n    auto_scale_services = {}\n    for statistic_key in limit:\n        if statistic_key not in environment:\n            continue\n\n        if not environment[statistic_key].isnumeric():\n            print(\n                f\"[ERROR] Ignoring {statistic_key}, because the environment variable value is not a number.\"\n            )\n            continue\n\n        scale = float(environment[statistic_key])\n        if scale == 0:\n            continue\n\n        data = CheckAutoScaleSource(\n            type=statistic_key,\n            current_value=limit_used[statistic_key],\n            limit=limit[statistic_key],\n            scale=scale,\n            billing=billing_prices,\n            account_limit=services_limit,\n        )\n        result = check_auto_scale(data=data)\n        if result:\n            auto_scale_services[statistic_key] = {\"limit\": result}\n\n    # Stop if no auto-scale needed\n    if not auto_scale_services:\n        print(\"Services are okay, no auto-scaling needed.\")\n        return \"Services are okay, no auto-scaling needed.\"\n\n    print(f\"Auto-scaling the services: {', '.join(auto_scale_services.keys())}\")\n    # Update our subscription, so we are actually scaling the account.\n    try:\n        billing_success = account.billing.editSubscription(\n            subscription={\"services\": auto_scale_services}\n        )\n    except Exception as error:\n        print(f\"[ERROR] {error}\")\n        return error\n\n    if not billing_success:\n        return\n\n    # Stop here if account has only one profile. No need to reallocate resources\n    profiles = account.profile.list()\n    if len(profiles) > 1:\n        # Make sure we realocate only what we just subscribed\n        amount_to_relocate = {}\n        for key in services_limit:\n            amount_to_relocate[key] = services_limit[key][\"limit\"] - (\n                amount_to_relocate.get(key, {}).get(\"limit\", 0)\n            )\n\n        # Allocate all the subscribed limit to the profile.\n        try:\n            account.billing.editAllocation(\n                allocation={\n                    \"profile\": profile_id,\n                    **amount_to_relocate,\n                }\n            )\n        except Exception as error:\n            print(f\"[ERROR] {error}\")\n            return error\n\n    return billing_success\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\n# To run the tests you need to comment out the line below\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "avg-min-max",
          "title": "Statistical Data Analysis",
          "description": "Calculate minimum, maximum, and average values from device variables",
          "language": "python",
          "tags": [
            "statistics",
            "average",
            "min",
            "max",
            "data",
            "calculation"
          ],
          "filename": "avg-min-max.py",
          "file_path": "python-legacy/avg-min-max.py",
          "code": "\"\"\"\nAnalysis Example\nMinimum, maximum, and average\n\nGet the minimum, maximum, and the average value of the variable temperature from your device,\nand save these values in new variables\n\nInstructions\nTo run this analysis you need to add a device token to the environment variables,\nTo do that, go to your device, then token and copy your token.\nGo the the analysis, then environment variables,\ntype device_token on key, and paste your token on value\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Device\n\n\ndef temperature_minimum(device: Device) -> None:\n    \"\"\"Record the minimum temperature of the last day in the bucket variable\n\n    Args:\n        device (Device): Instance of the Device class\n    \"\"\"\n    # This is a filter to get the minimum value of the variable temperature in the last day\n    min_filter = {\"variables\": \"temperature\", \"query\": \"min\", \"start_date\": \"1 day\"}\n\n    # Now we use the filter for the device to get the data\n    # check if the variable min has any value\n    # if so, we crete a new object to send to TagoIO\n    min_result = device.getData(queryParams=min_filter)\n\n    if min_result:\n        min_value = {\n            \"variable\": \"temperature_minimum\",\n            \"value\": min_result[0][\"value\"],\n            \"unit\": \"F\",\n        }\n\n        # now we insert the new object with the minimum value\n        device.sendData(data=min_value)\n        print(f\"Temperature Minimum - {min_result[0]['value']}\")\n    else:\n        print(\"Minimum value not found\")\n\n\ndef temperature_maximum(device: Device) -> None:\n    \"\"\"Record the maximum temperature of the last day in the bucket variable\n\n    Args:\n        device (Device): Instance of the Device class\n    \"\"\"\n    # This is a filter to get the maximum value of the variable temperature in the last day\n    max_filter = {\n        \"variables\": \"temperature\",\n        \"query\": \"max\",\n        \"start_date\": \"1 day\",\n    }\n\n    max_result = device.getData(queryParams=max_filter)\n    if max_result:\n        max_value = {\n            \"variable\": \"temperature_maximum\",\n            \"value\": max_result[0][\"value\"],\n            \"unit\": \"F\",\n        }\n\n        # now we insert the new object with the Maximum value\n        device.sendData(data=max_value)\n\n        print(f\"Temperature Maximum - {max_result[0]['value']}\")\n\n    else:\n        print(\"Maximum value not found\")\n\n\ndef temperature_average(device: Device) -> None:\n    \"\"\"Record the average of the last day's temperatures in the bucket variable\n\n    Args:\n        device (Device): Instance of the Device class\n    \"\"\"\n    # This is a filter to get the last 1000 values of the variable temperature in the last day\n    average_filter = {\n        \"variable\": \"temperature\",\n        \"qty\": 1000,\n        \"start_date\": \"1 day\",\n    }\n\n    average = device.getData(queryParams=average_filter)\n    if average:\n        temperature_average = 0\n        for item in average:\n            temperature_average = float(temperature_average) + float(item[\"value\"])\n\n        temperature_average = temperature_average / len(average)\n\n        average_value = {\n            \"variable\": \"temperature_average\",\n            \"value\": temperature_average,\n            \"unit\": \"F\",\n        }\n\n        device.sendData(data=average_value)\n\n        print(f\"Temperature Average - {temperature_average}\")\n    else:\n        print(\"No result found for the avg calculation\")\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list) -> None:\n    # reads the value of device_token from the environment variable\n    device_token = list(\n        filter(\n            lambda device_token: device_token[\"key\"] == \"device_token\",\n            context.environment,\n        )\n    )\n    device_token = device_token[0][\"value\"]\n\n    if not device_token:\n        raise ValueError(\"Missing value: 'device_token' Environment Variable.\")\n\n    my_device = Device({\"token\": device_token})\n\n    temperature_minimum(device=my_device)\n    temperature_maximum(device=my_device)\n    temperature_average(device=my_device)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "configuration-parameters-for-dynamic-last-value",
          "title": "Configuration Parameters for Dynamic Last Value",
          "description": "Manage configuration parameters for dynamic last value widgets",
          "language": "python",
          "tags": [
            "configuration",
            "parameters",
            "dynamic",
            "widget",
            "dashboard"
          ],
          "filename": "configuration-parameters-for-dynamic-last-value.py",
          "file_path": "python-legacy/configuration-parameters-for-dynamic-last-value.py",
          "code": "\"\"\"\nAnalysis Example\nConfiguration parameters for dynamic last value\n\nSet the configurations parameters with the last value of a given variable,\nin this example it is the \"temperature\" variable\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\naccount_token: Your account token. Check bellow how to get this.\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom queue import Queue\nfrom datetime import datetime\n\nfrom tagoio_sdk import Account, Analysis\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\nfrom tagoio_sdk.modules.Utils.getDevice import getDevice\n\n\ndef get_param(params: list, key: str) -> dict:\n    \"\"\"Get the desired parameter from the list of parameters\n\n    Args:\n        params (list): list of parameters\n        key (str): parameter desired to return\n\n    Returns:\n        dict: object with the key and value of the parameter you chose\n    \"\"\"\n    return next(\n        (x for x in params if x[\"key\"] == key),\n        {\"key\": key, \"value\": \"-\", \"sent\": False},\n    )\n\n\ndef apply_device_calculation(device: dict, timezone: str) -> None:\n    deviceID, name, account = device[\"id\"], device[\"name\"], device[\"account\"]\n    deviceInfoText = f\"{name}({deviceID})\"\n    print(f\"Processing Device {deviceInfoText})\")\n    device = getDevice(account, deviceID)\n\n    # Get the temperature variable inside the device bucket.\n    # notice it will get the last record at the time the analysis is running.\n    dataResult = device.getData({\"variables\": [\"temperature\"], \"query\": \"last_value\"})\n    if not dataResult:\n        print(f\"No data found for {deviceInfoText}\")\n        return\n\n    # Get configuration params list of the device\n    deviceParams = account.devices.paramList(deviceID)\n\n    # get the variable temperature from our dataResult array\n    temperature = next(\n        (data for data in dataResult if data[\"variable\"] == \"temperature\"), None\n    )\n    if temperature:\n        # get the config. parameter with key temperature\n        temperatureParam = get_param(deviceParams, \"temperature\")\n        # get the config. parameter with key last_record_time\n        lastRecordParam = get_param(deviceParams, \"last_record_time\")\n\n        timeString = (\n            datetime.fromtimestamp(temperature[\"time\"])\n            .astimezone(timezone)\n            .strftime(\"%Y/%m/%d %I:%M %p\")\n        )\n\n        # creates or edit the tempreature Param with the value of temperature.\n        # creates or edit the last_record_time Param with the time of temperature.\n        # Make sure to cast the value to STRING, otherwise you'll get an error.\n        account.devices.paramSet(\n            deviceID,\n            [\n                {**temperatureParam, \"value\": str(temperature[\"value\"])},\n                {**lastRecordParam, \"value\": timeString},\n            ],\n        )\n\n\ndef my_analysis(context: any, scope: list = None) -> None:\n    environment = envToJson(context.environment)\n\n    if not environment.get(\"account_token\"):\n        raise ValueError(\"Missing account_token environment var\")\n    # Make sure you have account_token tag in the environment variable of the analysis.\n    account = Account({\"token\": environment[\"account_token\"]})\n\n    # Create a queue, so we don't run on Throughput errors.\n    # The queue will make sure we check only 5 devices simultaneously.\n    processQueue = Queue(maxsize=5)\n    processQueue.put_nowait(apply_device_calculation)\n\n    # fetch device list filtered by tags.\n    # Device list always return an Array with DeviceInfo object.\n    deviceList = account.devices.listDevice(\n        {\n            \"amount\": 500,\n            \"fields\": [\"id\", \"name\", \"tags\"],\n            \"filter\": {\"tags\": [{\"key\": \"type\", \"value\": \"sensor\"}]},\n        }\n    )\n\n    for device in deviceList:\n        processQueue.put(\n            device={\"id\": device[\"id\"], \"name\": device[\"name\"], \"account\": account},\n            timezone=account.info().get(\"timezone\", \"America/New_York\"),\n        )\n\n    # Wait for all queue to be processed\n    processQueue.join()\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "console",
          "title": "Console Hello World",
          "description": "Basic hello world example showing how to send messages to the analysis console",
          "language": "python",
          "tags": [
            "basic",
            "console",
            "hello",
            "logging",
            "debug"
          ],
          "filename": "console.py",
          "file_path": "python-legacy/console.py",
          "code": "\"\"\"\nAnalysis Example\nHello World\n\nLearn how to send messages to the console located on the TagoIO analysis screen.\nYou can use this principle to show any information during and after development.\n\"\"\"\n\nfrom tagoio_sdk import Analysis\n\n\n# The function myAnalysis will run when you execute your analysis\ndef myAnalysis(context, scope: list) -> None:\n    # This will log \"Hello World\" at the TagoIO Analysis console\n    print(\"Hello World\")\n\n    #  This will log the environment to the TagoIO Analysis console\n    print(\"Environment:\", context.environment)\n\n    #  This will log the scope to the TagoIO Analysis console\n    print(\"my scope:\", scope)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(myAnalysis)\n"
        },
        {
          "id": "create-device",
          "title": "Create Device",
          "description": "Create new devices programmatically using dashboard inputs",
          "language": "python",
          "tags": [
            "device",
            "create",
            "dashboard",
            "automation"
          ],
          "filename": "create-device.py",
          "file_path": "python-legacy/create-device.py",
          "code": "\"\"\"\nAnalysis Example\nCreating devices using dashboard\n\nUsing an Input Widget in the dashboard, you will be able to create devices in your account.\nYou can get the dashboard template to use here: https://admin.tago.io/template/6143555a314cef001871ec78\nUse a dummy HTTPs device with the dashboard.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n  account_token: Your account token. Check bellow how to get this.\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Device, Account\nfrom tagoio_sdk.modules.Utils.getTokenByName import getTokenByName\nfrom tagoio_sdk.modules.Account.Device_Type import DeviceCreateInfo\n\n\ndef add_configuration_parameter_to_device(account: Account, device_id: str) -> None:\n    account.devices.paramSet(\n        deviceID=device_id, configObj={\"key\": \"param_key\", \"value\": \"10\", \"sent\": False}\n    )\n\n\ndef send_feedback_to_dashboard(account: Account, device_id: str) -> None:\n    dashboard_token = getTokenByName(account=account, deviceID=device_id)\n    device = Device(params={\"token\": dashboard_token})\n\n    # To add any data to the device that was just created:\n    # device.sendData({ \"variable\": \"temperature\", value: 17 })\n\n    device.sendData(\n        data={\n            \"variable\": \"validation\",\n            \"value\": \"Device successfully created!\",\n            \"metadata\": {\"type\": \"success\"},\n        }\n    )\n\n\ndef parse_new_device(scope: list[dict]) -> DeviceCreateInfo:\n    # Get the variables sent by the widget/dashboard.\n    device_network = [obj for obj in scope if obj[\"variable\"] == \"device_network\"]\n    device_connector = [obj for obj in scope if obj[\"variable\"] == \"device_connector\"]\n    device_name = [obj for obj in scope if obj[\"variable\"] == \"device_name\"]\n    device_eui = [obj for obj in scope if obj[\"variable\"] == \"device_eui\"]\n\n    if not device_network or not device_network[0][\"value\"]:\n        raise TypeError('Missing \"device_network\" in the data scope.')\n    elif not device_connector or not device_connector[0][\"value\"]:\n        raise TypeError('Missing \"device_connector\" in the data scope.')\n    elif not device_eui or not device_eui[0][\"value\"]:\n        raise TypeError('Missing \"device_eui\" in the data scope.')\n\n    return {\n        \"name\": device_name[0][\"value\"],\n        \"serie_number\": device_eui[0][\"value\"],\n        \"tags\": [\n            # You can add custom tags here.\n            {\"key\": \"type\", \"value\": \"sensor\"},\n            {\"key\": \"device_eui\", \"value\": device_eui[0][\"value\"]},\n        ],\n        \"connector\": device_connector[0][\"value\"],\n        \"network\": device_network[0][\"value\"],\n        \"active\": True,\n        \"type\": \"immutable\",\n        \"chunk_period\": \"month\",  # consider change\n        \"chunk_retention\": 1,  # consider change\n    }\n\n\ndef start_analysis(context: list[dict], scope: list[dict]) -> None:\n    if not scope:\n        return print(\"The analysis must be triggered by a widget.\")\n\n    # reads the value of account_token from the environment variable\n    account_token = list(\n        filter(\n            lambda account_token: account_token[\"key\"] == \"account_token\",\n            context.environment,\n        )\n    )\n    account_token = account_token[0][\"value\"]\n\n    if not account_token:\n        return print(\"Missing account_token Environment Variable.\")\n\n    account = Account(params={\"token\": account_token})\n\n    new_device = parse_new_device(scope=scope)\n\n    result = account.devices.create(deviceObj=new_device)\n    print(result)\n\n    add_configuration_parameter_to_device(\n        account=account, device_id=result[\"device_id\"]\n    )\n\n    send_feedback_to_dashboard(account=account, device_id=scope[0][\"device\"])\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(start_analysis)\n"
        },
        {
          "id": "data-retention",
          "title": "Custom Data Retention",
          "description": "Automatically remove old data from devices based on custom retention policies",
          "language": "python",
          "tags": [
            "data",
            "retention",
            "cleanup",
            "management",
            "automation"
          ],
          "filename": "data-retention.py",
          "file_path": "python-legacy/data-retention.py",
          "code": "\"\"\"\nAnalysis Example\nCustom Data Retention\n\nUse your account token to get the list of devices, then go to each device removing the\nvariables you chooses.\n\nInstructions\nTo run this analysis you need to add an account token to the environment variables,\nTo do that, go to your account settings, then token and copy your token.\nGo the the analysis, then environment variables,\ntype account_token on key, and paste your token on value\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Account, Device\nfrom tagoio_sdk.modules.Utils.getTokenByName import getTokenByName\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list):\n    # reads the value of account_token from the environment variable\n    account_token = next(\n        (item for item in context.environment if item[\"key\"] == \"account_token\"), None\n    )\n\n    if not account_token:\n        raise ValueError(\"Missing 'account_token' in the environment variables\")\n\n    account = Account({\"token\": account_token[\"value\"]})\n\n    # Bellow is an empty filter.\n    # Examples of filter:\n    # { tags: [{ key: 'tag-key', value: 'tag-value' }]}\n    # { name: 'name*' }\n    # { name: '*name' }\n    # { bucket: 'bucket-id' }\n    filter = {}\n\n    devices = account.devices.listDevice(\n        {\n            \"page\": 1,\n            \"fields\": [\"id\"],\n            \"filter\": filter,\n            \"amount\": 100,\n        }\n    )\n\n    for device_obj in devices:\n        token = getTokenByName(account, device_obj[\"id\"])\n        device = Device({\"token\": token})\n\n        variables = [\"temperature\"]\n        qty = 100  # remove 100 registers of each variable\n        end_date = \"30 days\"  # registers old than 30 days\n\n        result = device.deleteData(\n            {\"variables\": variables, \"qty\": qty, \"end_date\": end_date}\n        )\n        print(result)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "data-transaction",
          "title": "Data Transaction Counter",
          "description": "Calculate total transactions by device and group results by user tags",
          "language": "python",
          "tags": [
            "transaction",
            "data",
            "analytics",
            "calculation",
            "reporting"
          ],
          "filename": "data-transaction.py",
          "file_path": "python-legacy/data-transaction.py",
          "code": "\"\"\"\nAnalysis Example\nGet users total transactions\n\nThis analysis must run by an Scheduled Action.\nIt gets a total amount of transactions by device, calculating by the total amount of data in the bucket\neach time the analysis run. Group the result by a tag.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\ndevice_token: Token of a device where the total transactions will be stored. Get this in the Device's page.\naccount_token: Your account token. Check bellow how to get this.\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Account, Device\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\n\n\ndef calculate_user_transactions(\n    account: Account, storage: Device, user_value: str, device_list: list\n) -> None:\n    # Collect the data amount for each device.\n    # Result of bucket_results is:\n    # [0, 120, 500, 0, 1000]\n    for device in device_list:\n        total_transactions = account.buckets.amount(device[\"bucket\"])\n\n        # Get the total transactions of the last analysis run.\n        # Group is used to get only for this user.\n        # You can change that to get a specific device for the user, instead of using a global storage device.\n        # One way to do that is by just finding the device using a tag, see example:\n        #\n        # [user_device] = account.devices.list({'page': 1, 'fields': ['id', 'name', 'bucket', 'tags'], 'filter': {'tags': [{'key': 'user_device', 'value': user_value}]}, 'amount': 1})\n        # device_token = Utils.getTokenByName(account, user_device['id'])\n        # storage = Device({'token': device_token})\n        last_total_transactions = storage.getData(\n            {\"variable\": \"last_transactions\", \"qty\": 1, \"group\": user_value}\n        )\n\n        if not last_total_transactions:\n            last_total_transactions = [{\"value\": 0}]\n\n        last_total_transactions = last_total_transactions[0]\n\n        result = total_transactions - last_total_transactions[\"value\"]\n\n        # Store the current total of transactions, the result for this analysis run and the key.\n        # Now you can just plot these variables in a dynamic table.\n        storage.sendData(\n            data=[\n                {\n                    \"variable\": \"last_transactions\",\n                    \"value\": total_transactions,\n                    \"group\": user_value,\n                },\n                {\n                    \"variable\": \"transactions_result\",\n                    \"value\": result,\n                    \"group\": user_value,\n                },\n                {\"variable\": \"user\", \"value\": user_value, \"group\": user_value},\n            ]\n        )\n\n    print(\"Done!\")\n\n\ndef my_analysis(context: any, scope: list = None) -> None:\n    # Transform all Environment Variable to JSON.\n    environment = envToJson(context.environment)\n\n    if not environment.get(\"account_token\"):\n        raise ValueError(\n            \"You must setup an account_token in the Environment Variables.\"\n        )\n\n    elif not environment.get(\"device_token\"):\n        raise ValueError(\"You must setup an device_token in the Environment Variables.\")\n\n    # Instance the account class\n    account = Account(params={\"token\": environment[\"account_token\"]})\n    storage = Device(params={\"token\": environment[\"device_token\"]})\n\n    # Setup the tag we will be searching in the device list\n    tag_to_search = \"user_email\"\n\n    # Get the device_list and group it by the tag value.\n    device_list = account.devices.listDevice(\n        {\n            \"page\": 1,\n            \"fields\": [\"id\", \"name\", \"bucket\", \"tags\"],\n            \"filter\": {\"tags\": [{\"key\": tag_to_search}]},\n            \"amount\": 10000,\n        }\n    )\n\n    grouped_device_list = {}\n\n    for device in device_list:\n        tag_value = None\n\n        for tag in device[\"tags\"]:\n            if tag[\"key\"] == tag_to_search:\n                tag_value = tag[\"value\"]\n                break\n\n        if tag_value:\n            if tag_value not in grouped_device_list:\n                grouped_device_list[tag_value] = []\n            grouped_device_list[tag_value].append(device)\n\n    grouped_device_list = [\n        {\"value\": key, \"device_list\": value}\n        for key, value in grouped_device_list.items()\n    ]\n\n    # Call a new function for each group in assynchronous way.\n    calculate_user_transactions(\n        account=account,\n        storage=storage,\n        user_value=grouped_device_list[0][\"value\"],\n        device_list=grouped_device_list[0][\"device_list\"],\n    )\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "device-list",
          "title": "Device List",
          "description": "Get and display list of devices in your account",
          "language": "python",
          "tags": [
            "device",
            "list",
            "account",
            "management"
          ],
          "filename": "device-list.py",
          "file_path": "python-legacy/device-list.py",
          "code": "\"\"\"\nAnalysis Example\nGet Device List\n\nThis analysis retrieves the device list of your account and print to the console.\nThere are examples on how to apply filter.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\naccount_token: Your account token\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Account, Analysis\nfrom tagoio_sdk.modules.Account.Device_Type import DeviceInfoList\n\n\ndef get_device_list(account: Account) -> list[DeviceInfoList]:\n    \"\"\"Retrieves the device list of your account.\n\n    Args:\n        account (Account): Instance of the class Account\n\n    Returns:\n        list[DeviceInfoList]: List of devices\n    \"\"\"\n    # Example of filtering devices by Tag.\n    # You can filter by: name, last_input, last_output, bucket, etc.\n    my_filter = {\n        \"tags\": [\n            {\"key\": \"keyOfTagWeWantToSearch\", \"value\": \"valueOfTagWeWantToSearch\"}\n        ],\n        # \"bucket\": \"55d269211a2e236c25bb9859\",\n        # \"name\": \"My Device\",\n        # \"name\": \"My Dev*\"\n    }\n\n    devices = account.devices.listDevice(\n        {\"page\": 1, \"fields\": [\"id\", \"tags\"], \"filter\": my_filter, \"amount\": 20}\n    )\n\n    return devices\n\n\ndef my_analysis(context, scope: list) -> None:\n    # reads the value of account_token from the environment variable\n    account_token = list(\n        filter(\n            lambda account_token: account_token[\"key\"] == \"account_token\",\n            context.environment,\n        )\n    )\n    if account_token:\n        account_token = account_token[0].get(\"value\")\n\n    if not account_token:\n        return print(\"Missing account_token Environment Variable.\")\n\n    account = Account(params={\"token\": account_token})\n    list_devices = get_device_list(account=account)\n\n    print(list_devices)\n    print(f\"Total devices: {len(list_devices)}\")\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "device-offline",
          "title": "Device Offline Alert",
          "description": "Monitor devices and send alerts when they haven't communicated within specified time intervals",
          "language": "python",
          "tags": [
            "device",
            "offline",
            "alert",
            "monitoring",
            "notification"
          ],
          "filename": "device-offline.py",
          "file_path": "python-legacy/device-offline.py",
          "code": "\"\"\"\nAnalysis Example\nDevice Offline Alert\n\nThis analysis must run by Time Interval. It checks if devices with given Tags\nhad communication in the past minutes. If not, it sends an email or sms alert.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\naccount_token: Your account token\ncheck_in_time: Minutes between the last input of the device before sending the notification.\ntag_key: Device tag Key to filter the devices.\ntag_value: Device tag Value to filter the devices.\nemail_list: Email list comma separated.\nsms_list: Phone number list comma separated. The phone number must include the country code\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom datetime import datetime\n\nfrom tagoio_sdk import Account, Analysis, Services\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\n\n\ndef my_analysis(context, scope: list = None):\n    # Transform all Environment Variable to JSON.\n    env = envToJson(context.environment)\n\n    if not env.get(\"account_token\"):\n        return print(\"You must setup an account_token in the Environment Variables.\")\n    elif not env.get(\"check_in_time\"):\n        return print(\"You must setup a check_in_time in the Environment Variables.\")\n    elif not env.get(\"tag_key\"):\n        return print(\"You must setup a tag_key in the Environment Variables.\")\n    elif not env.get(\"tag_value\"):\n        return print(\"You must setup a tag_value in the Environment Variables.\")\n    elif not env.get(\"email_list\") and not env.get(\"sms_list\"):\n        return print(\n            \"You must setup an email_list or a sms_list in the Environment Variables.\"\n        )\n\n    check_in_time = int(env.get(\"check_in_time\"))\n    if check_in_time == 0:\n        return print(\"The check_in_time must be a number.\")\n\n    account = Account(params={\"token\": env[\"account_token\"]})\n\n    # You can remove the comments on line 51 and 57 to use the Tag Filter.\n    # filter = {'tags': [{'key': env['tag_key'], 'value': env['tag_value']}]}\n\n    devices = account.devices.listDevice(\n        queryObj={\n            \"page\": 1,\n            \"amount\": 1000,\n            \"fields\": [\"id\", \"name\", \"last_input\"],\n            # \"filter\": filter,\n        }\n    )\n\n    if not devices:\n        return print(\n            f\"No device found with given tags. Key: {env['tag_key']}, Value: {env['tag_value']} \"\n        )\n\n    print(\"Checking devices: \", \", \".join(x[\"name\"] for x in devices))\n\n    alert_devices = []\n    for device in devices:\n        now = datetime.utcnow()\n\n        # Check the difference in minutes.\n        diff = (now - device[\"last_input\"]).total_seconds() // 60\n        if diff > check_in_time:\n            alert_devices.append(device[\"name\"])\n\n    if not alert_devices:\n        return print(\"All devices are okay.\")\n\n    print(\"Sending notifications\")\n    email_service = Services(params={\"token\": context.token}).email\n    sms_service = Services(params={\"token\": context.token}).sms\n\n    message = f\"Hi!\\nYou're receiving this alert because the following devices didn't send data in the last {check_in_time} minutes.\\n\\nDevices:\"\n    message += \"\\n\".join(alert_devices)\n\n    if env.get(\"email_list\"):\n        # Remove space in the string\n        emails = env[\"email_list\"].replace(\" \", \"\")\n\n        email_service.send(\n            email={\n                \"to\": emails,\n                \"subject\": \"Device Offline Alert\",\n                \"message\": message,\n            }\n        )\n\n    if env.get(\"sms_list\"):\n        # Remove space in the string and convert to an Array.\n        smsNumbers = env[\"sms_list\"].replace(\" \", \"\").split(\",\")\n\n        for phone in smsNumbers:\n            sms_service.send(\n                sms={\n                    \"to\": phone,\n                    \"message\": message,\n                }\n            )\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "downlink-dashboard",
          "title": "Downlink Dashboard",
          "description": "Send downlink commands to devices from dashboard interface",
          "language": "python",
          "tags": [
            "downlink",
            "dashboard",
            "device",
            "command",
            "control"
          ],
          "filename": "downlink-dashboard.py",
          "file_path": "python-legacy/downlink-dashboard.py",
          "code": "\"\"\"\nAnalysis Example\nSending downlink using dashboard\nUsing an Input Widget in the dashboard, you will be able to trigger a downlink to\nany LoraWaN network server.\nYou can get the dashboard template to use here: https://admin.tago.io/template/5f514218d4555600278023c4\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\naccount_token: Your account token. Check bellow how to get this.\ndefault_PORT: The default port to be used if not sent by the dashboard.\ndevice_id: The default device id to be used if not sent by the dashboard (OPTIONAL).\npayload: The default payload to be used if not sent by the dashboard (OPTIONAL).\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Account, Analysis\nfrom tagoio_sdk.modules.Utils.sendDownlink import sendDownlink\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list[dict]) -> None:\n    account_token = list(\n        filter(\n            lambda account_token: account_token[\"key\"] == \"account_token\",\n            context.environment,\n        )\n    )\n\n    if not account_token:\n        return ValueError(\"Missing value: 'account_token' Environment Variable.\")\n\n    my_account = Account({\"token\": account_token[0][\"value\"]})\n    # Get the variables form_payload, form_port and device_id sent by the widget/dashboard.\n    payload = list(filter(lambda payload: payload[\"variable\"] == \"form_payload\", scope))\n\n    if not payload:\n        return print('Missing \"form_payload\" in the data scope.')\n\n    device_id = payload[0][\"device_id\"]\n    payload = payload[0][\"payload\"]\n\n    port = list(filter(lambda payload: payload[\"variable\"] == \"form_port\", scope))\n\n    if not port:\n        return print('Missing \"form_port\" in the data scope o.')\n\n    port = port[0][\"value\"]\n\n    result = sendDownlink(\n        account=my_account,\n        device_id=device_id,\n        dn_options={\"port\": port, \"payload\": payload},\n    )\n    print(result)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "dynamic-notification",
          "title": "Dynamic Notification",
          "description": "Send dynamic email, SMS and push notifications based on data conditions",
          "language": "python",
          "tags": [
            "notification",
            "dynamic",
            "email",
            "sms",
            "push"
          ],
          "filename": "dynamic-notification.py",
          "file_path": "python-legacy/dynamic-notification.py",
          "code": "\"\"\"\nAnalysis Example\nSending dynamic notification\n\nSend notifications using analysis. It's include example for Email, SMS and Push Notification to TagoRUN Users.\nIn order for this example to work, you must create an action by variable and set to run this analysis.\nOnce the action is triggered with your conditions, the data will be sent to this analysis.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\naccount_token: Your account token. Check bellow how to get this.\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Account, Services\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\n\n\ndef my_analysis(context, scope: list[dict]) -> None:\n    if not scope:\n        return print(\"This analysis must be triggered by an action.\")\n\n    # Get the environment variables.\n    environment_variables = envToJson(context.environment)\n\n    if environment_variables.get(\"account_token\"):\n        return print('Missing \"account_token\" environment variable')\n    elif len(environment_variables[\"account_token\"]) != 36:\n        return print('Invalid \"account_token\" in the environment variable')\n\n    # Instance the Account class\n    account = Account({\"token\": environment_variables[\"account_token\"]})\n\n    # Get the device ID from the scope and retrieve device information.\n    device_id = scope[0][\"device\"]\n    device_info = account.devices.info(device_id)\n\n    # Get the device name and tags from the device.\n    # [TAG KEY]    [TAG VALUE]\n    # email        example@tago.io\n    # phone        +1XXxxxxxxx\n    # user_id      5f495ae55ff03d0028d39fc5\n    #\n    # This is just a generic example how to get this information. You can get data from a device, search in tags, or any other way of correlation you have.\n    # For example, you can get the email directly from the user_id if it was specified:\n    # email = await account.run.user_info(user_id_tag[\"id\"])[\"email\"]\n    device_name = device_info[\"name\"]\n    email_tag = next(\n        (tag for tag in device_info[\"tags\"] if tag[\"key\"] == \"email\"), None\n    )\n    phone_tag = next(\n        (tag for tag in device_info[\"tags\"] if tag[\"key\"] == \"phone\"), None\n    )\n    user_id_tag = next(\n        (tag for tag in device_info[\"tags\"] if tag[\"key\"] == \"user_id\"), None\n    )\n\n    # Instance the SMS and Email service using the analysis token from the context.\n    email_service = Services({\"token\": context.token}).email\n    sms_service = Services({\"token\": context.token}).sms\n\n    # Send the notifications and output the results to the analysis console.\n    if email_tag:\n        result = email_service.send(\n            {\n                \"to\": email_tag[\"value\"],\n                \"subject\": \"Notification alert\",\n                \"message\": f\"You received a notification for the device: {device_name}. Variable: {scope[0]['variable']}, Value: {scope[0]['value']}\",\n            }\n        )\n        print(result)\n    else:\n        print(\"Email not found for this device.\")\n\n    if phone_tag:\n        result = sms_service.send(\n            {\n                \"to\": phone_tag[\"value\"],\n                \"message\": f\"You received a notification for the device: {device_name}. Variable: {scope[0]['variable']}, Value: {scope[0]['value']}\",\n            }\n        )\n        print(result)\n    else:\n        print(\"Phone number not found for this device.\")\n\n    if user_id_tag:\n        result = account.run.notificationCreate(\n            user_id_tag[\"value\"],\n            {\n                \"title\": \"Notification Alert\",\n                \"message\": f\"You received a notification for the device: {device_name}. Variable: {scope[0]['variable']}, Value: {scope[0]['value']}\",\n            },\n        )\n        print(result)\n    else:\n        print(\"User ID not found for this device.\")\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "email-export",
          "title": "Email Export",
          "description": "Export data and send via email as attachments",
          "language": "python",
          "tags": [
            "email",
            "export",
            "data",
            "attachment",
            "reporting"
          ],
          "filename": "email-export.py",
          "file_path": "python-legacy/email-export.py",
          "code": "\"\"\"\nAnalysis Example\nEmail export\n\nLearn how to send an email with data in a .csv file attachment.\n\nThis analysis will read the variable fuel_level from your device,\nand send the values in a .csv file to an e-mail address\n\nInstructions\nTo run this analysis you need to add a device token and the e-mail to the environment variables.\nTo do that, go to your device, then token and copy your token.\nGo the the analysis, then environment variables,\ntype device_token on key, and paste your token on value\nclick the + button to add a new environment\non key, type email and on value, type the e-mail address\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Device, Services\nfrom tagoio_sdk.modules.Utils import envToJson\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list[dict] = None) -> None:\n    # reads the values from the environment and saves it in the variable env_vars\n    env_vars = envToJson.envToJson(context.environment)\n\n    if not env_vars.get(\"device_token\"):\n        raise ValueError(\"Missing value: 'device_token' environment variable not found\")\n\n    if not env_vars.get(\"email\"):\n        raise ValueError(\"Missing value: 'email' environment variable not found\")\n\n    device = Device({\"token\": env_vars[\"device_token\"]})\n\n    # Get the 5 last records of the variable fuel_level in the device bucket.\n    fuel_list = device.getData({\"variable\": \"fuel_level\", \"qty\": 5})\n\n    # Create csv header\n    csv = \"Fuel Level\"\n\n    # For each record in the fuel_list, add the value in the csv text.\n    # Use \\n to break the line.\n    for item in fuel_list:\n        csv = f\"{csv},\\n{item['value']}\"\n\n    # Print the csv text to the TagoIO analysis console, as a preview\n    print(csv)\n\n    # Start the email service\n    email = Services({\"token\": context.token}).email\n\n    # Send the email.\n    service_response = email.send(\n        {\n            \"message\": \"This is an example of a body message\",\n            \"subject\": \"Exported File from TagoIO\",\n            \"to\": env_vars[\"email\"],\n            \"attachment\": {\n                \"archive\": csv,\n                \"filename\": \"exported_file.csv\",\n            },\n        }\n    )\n\n    print(service_response)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "find",
          "title": "Data Operations",
          "description": "Find and operate on data from devices with various filters",
          "language": "python",
          "tags": [
            "data",
            "find",
            "filter",
            "operations",
            "search"
          ],
          "filename": "find.py",
          "file_path": "python-legacy/find.py",
          "code": "\"\"\"\nAnalysis Example\nOperate data from devices\n\nRead information from a variable generated by devices,\nrun a simple calculation in real-time, and create a new variable with the output.\n\nInstructions\nTo run this analysis you need to add a device token to the environment variables,\nTo do that, go to your device, then token and copy your token.\nGo the the analysis, then environment variables,\ntype device_token on key, and paste your token on value\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Device\n\n\ndef my_analysis(context, scope: list = None) -> str:\n    # reads the value of account_token from the environment variable\n    device_token = next(\n        (item for item in context.environment if item[\"key\"] == \"device_token\"), None\n    )\n\n    if not device_token:\n        return print(\"Missing device_token environment variable\")\n\n    device = Device(params={\"token\": device_token[\"value\"]})\n\n    # create the filter options to get the data from TagoIO\n    query_filter = {\n        \"variable\": \"temperature\",\n        \"query\": \"last_item\",\n    }\n\n    result_array = device.getData(queryParams=query_filter)\n\n    # Check if the array is not empty\n    if not result_array or not result_array[0]:\n        return print(\"Empty Array\")\n\n    # query:last_item always returns only one value\n    value = result_array[0][\"value\"]\n    time = result_array[0][\"time\"]\n\n    # print to the console at TagoIO\n    print(f\"The last record of the water_level is {value}. It was inserted at {time}\")\n\n    # Multiplies the water_level value by 2 and inserts it in another variable\n    obj_to_save = {\n        \"variable\": \"temperature_double\",\n        \"value\": value * 2,\n    }\n\n    result = device.sendData(data=obj_to_save)\n    print(result)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "generate-pdf-report",
          "title": "Generate PDF Report",
          "description": "Generate PDF reports from device data and send via email",
          "language": "python",
          "tags": [
            "pdf",
            "report",
            "generation",
            "email",
            "data"
          ],
          "filename": "generate-pdf-report.py",
          "file_path": "python-legacy/generate-pdf-report.py",
          "code": "\"\"\"\nAnalysis Example\nGenerate pdf report and send via email\n\nInstructions\nTo run this analysis you need to add a email and device_token to the environment variables,\nGo the the analysis, then environment variables,\ntype email on key, and insert your email on value\ntype device_token on key and insert your device token on value\n\"\"\"\n\nimport base64\nfrom datetime import datetime\n\nfrom tagoio_sdk import Analysis, Device, Services\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\n\nDEVICE_VARIABLES = [\n    \"your_variable\"\n]  # enter the variable from your device you would like\n\n\ndef html_content_for_pdf(dataVal, dataVar) -> None:\n    return f\"\"\"\n    <head>\n        <style>\n            body, html {{\n                margin: 0;\n            }}\n            table {{\n                width: 100%;\n                border-collapse: collapse;\n            }}\n            td {{\n                border: 1px solid black;\n                padding: 5px;\n                padding-bottom: 25px;\n                font-style: italic;\n            }}\n        </style>\n    </head>\n    <body>\n    <table>\n        <tr>\n            <td colspan=\"7\">Issue date: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}</td>\n        </tr>\n        <tr>\n            <td colspan=\"4\">Start date: 2020-05-20 10:21:32</td>\n            <td colspan=\"3\">Stop date: 2020-10-08 22:56:19</td>\n        </tr>\n        <tr>\n            <td colspan=\"4\"> Report of the {dataVar}</td>\n            <td colspan=\"3\">Device Kitchen Oven 5</td>\n        </tr>\n        <tr>\n            <td>Counter</td>\n            <td>{dataVar}</td>\n            <td>Time</td>\n            <td>Date</td>\n            <td>Temperature 2</td>\n            <td>Time</td>\n            <td>Date</td>\n        </tr>\n        <tr>\n        <td>2</td>\n        <td>{dataVal}</td>\n        <td>10:53:20</td>\n        <td>2020-06-10</td>\n        <td>137</td>\n        <td>10:53:20</td>\n        <td>2020-06-10</td>\n        </tr>\n    </table>\n    </body>\n    </html>\n    \"\"\"\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context: any, scope: list = None) -> None:\n    # reads the values from the environment and saves it in the variable envVars\n    envVars = envToJson(context.environment)\n\n    if not envVars.get(\"email\"):\n        raise ValueError(\"email environment variable not found\")\n    if not envVars.get(\"device_token\"):\n        raise ValueError(\"device_token environment variable not found\")\n\n    device = Device({\"token\": envVars[\"device_token\"]})\n\n    variables_buckets = device.getData(\n        {\n            \"variables\": DEVICE_VARIABLES,\n            \"start_date\": \"1 month\",\n            \"qty\": 10,\n        }\n    )\n\n    dataParsed = \"variable,value,unit,time\"\n\n    for variable in variables_buckets:\n        dataParsed = f\"{variable.get('variable')},{variable.get('value')},{variable.get('unit')},{variable.get('time')}\"\n\n    dataArray = dataParsed.split(\",\")\n    dataVar = dataArray[0]\n    dataVal = dataArray[1]\n\n    html = html_content_for_pdf(dataVal, dataVar)\n\n    options = {\n        \"displayHeaderFooter\": True,\n        \"footerTemplate\": '<div class=\"page-footer\" style=\"width:100%; text-align:center; font-size:12px;\">Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span></div>',\n        \"margin\": {\n            \"top\": \"1.5cm\",\n            \"right\": \"1.5cm\",\n            \"left\": \"1.5cm\",\n            \"bottom\": \"1.5cm\",\n        },\n    }\n\n    base_64 = base64.b64encode(html.encode(\"utf-8\")).decode(\"utf-8\")\n\n    # start the PDF service\n    pdfService = Services({\"token\": context.token}).PDF\n    pdf_base64 = pdfService.generate(\n        {\n            \"base64\": base_64,\n            \"options\": options,\n        }\n    )\n\n    # Start the email service\n    emailService = Services({\"token\": context.token}).email\n\n    # Send the email.\n    emailService.send(\n        {\n            \"to\": envVars[\"email\"],\n            \"subject\": \"Exported File from TagoIO\",\n            \"message\": \"This is an example of a body message\",\n            \"attachment\": {\n                \"archive\": pdf_base64.json()[\"result\"],\n                \"type\": \"base64\",\n                \"filename\": \"exportedfile.pdf\",\n            },\n        }\n    )\n\n    print(\"Email sent successfully\")\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "http-get",
          "title": "HTTP GET Request",
          "description": "Make HTTP GET requests to external APIs and services",
          "language": "python",
          "tags": [
            "http",
            "get",
            "api",
            "request",
            "external"
          ],
          "filename": "http-get.py",
          "file_path": "python-legacy/http-get.py",
          "code": "\"\"\"\nAnalysis Example\nPost to HTTP Route\n\nThis analysis simple post to an HTTP route. It's a starting example for you to develop more\ncomplex algorithms.\nFollow the link of documentation https://api.docs.tago.io/\nIn this example we get the Account name and print to the console.\n\"\"\"\n\nimport urllib.request\n\nfrom tagoio_sdk import Analysis\n\n\nURL_TAGOIO = \"https://api.tago.io/info\"\n\n\ndef my_analysis(context, scope: list = None) -> dict:\n    account_token = next(\n        (item for item in context.environment if item[\"key\"] == \"account_token\"), None\n    )\n\n    if not account_token:\n        raise ValueError(\"Missing 'account_token' in the environment variables\")\n\n    headers = {\"Authorization\": account_token[\"value\"]}\n\n    req = urllib.request.Request(URL_TAGOIO, headers=headers, method=\"GET\")\n\n    try:\n        with urllib.request.urlopen(req) as response:\n            result = response.read().decode(\"utf-8\")\n            print(result)\n    except Exception as error:\n        print(f\"{error}\")\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "mqtt-push",
          "title": "MQTT Push",
          "description": "Push data to MQTT broker from dashboard interactions",
          "language": "python",
          "tags": [
            "mqtt",
            "push",
            "broker",
            "dashboard",
            "communication"
          ],
          "filename": "mqtt-push.py",
          "file_path": "python-legacy/mqtt-push.py",
          "code": "\"\"\"\nAnalysis Example\nGet Device List\n\nSnippet to push data to MQTT. Follow this pattern within your application\nIf you want more details about MQTT, search \"MQTT\" in TagoIO help center.\nYou can find plenty of documentation about this topic.\nTagoIO Team.\n\nHow to use?\nIn order to trigger this analysis you must setup a Dashboard.\nCreate a Widget \"Form\" and enter the variable 'push_payload' for the device you want to push with the MQTT.\nIn User Control, select this Analysis in the Analysis Option.\nSave and use the form.\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Services\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list[dict]) -> None:\n    if not scope:\n        return print(\"This analysis must be triggered by a dashboard.\")\n\n    my_data = [obj for obj in scope if obj[\"variable\"] == \"push_payload\"]\n    if not my_data:\n        return print(\"Couldn't find any variable in the scope.\")\n\n    # Create your data object to push to MQTT\n    # In this case we're sending a JSON object.\n    # You can send anything you want.\n    # Example:\n    # const myDataObject = 'This is a string';\n    my_data_object = {\n        \"variable\": \"temperature_celsius\",\n        \"value\": (int(my_data[0][\"value\"]) - 32) * (5 / 9),\n        \"unit\": \"C\",\n    }\n\n    # Create a object with the options you chooses\n    options = {\n        \"retain\": False,\n        \"qos\": 0,\n    }\n\n    # Publishing to MQTT\n    MQTT = Services({\"token\": context.token}).MQTT\n    result = MQTT.publish(\n        {\n            # bucket: myData.bucket, // for legacy devices\n            \"bucket\": my_data[0][\"device\"],  # for immutable/mutable devices\n            \"message\": str(my_data_object),\n            \"topic\": \"tago/my_topic\",\n            \"options\": options,\n        }\n    )\n    print(result)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "send-notification",
          "title": "Send Notification",
          "description": "Send notifications via email, SMS, or push notification to users",
          "language": "python",
          "tags": [
            "notification",
            "email",
            "sms",
            "push",
            "messaging"
          ],
          "filename": "send-notification.py",
          "file_path": "python-legacy/send-notification.py",
          "code": "\"\"\"\nAnalysis Example\nSend Notification to Yourself\n\nThe main function used by TagoIO to run the script.\nIt sends a notification to the account owner.\n\nEnvironment Variables\nYou must setup the following Environment Variables:\nmessage - Your Message\ntitle - Your Title\n\"\"\"\n\nfrom tagoio_sdk import Analysis\nfrom tagoio_sdk import Services\nfrom tagoio_sdk.modules.Account.Notification_Type import NotificationCreate\n\n\ndef send_notification(token_profile: str, object: NotificationCreate) -> None:\n    \"\"\"Send Notification to Yourself\n\n    Args:\n                object (NotificationCreate): Notification Object\n    \"\"\"\n    notification = Services({\"token\": token_profile}).Notification\n    notification.send(notification=object)\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list) -> None:\n    message = list(\n        filter(lambda message: message[\"key\"] == \"message\", context.environment)\n    )\n    if not message:\n        raise ValueError(\"Missing value: 'message' not found in environment variables\")\n    message = message[0].get(\"value\")\n\n    title = list(filter(lambda title: title[\"key\"] == \"title\", context.environment))\n    if not title:\n        raise ValueError(\"Missing value: 'title' not found in environment variables\")\n    title = title[0][\"value\"]\n\n    send_notification(\n        token_profile=context.token, object={\"message\": message, \"title\": title}\n    )\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        }
      ]
    },
    "python-rt2025": {
      "runtime": {
        "name": "python-rt2025",
        "displayName": "Python rt2025",
        "language": "python",
        "exts": [
          ".py"
        ],
        "sourceDir": "snippets/analysis"
      },
      "snippets": [
        {
          "id": "autoscaling-profiles-limits",
          "title": "Autoscaling Profile Limits",
          "description": "Monitor and manage autoscaling profile limits and usage",
          "language": "python",
          "tags": [
            "autoscaling",
            "profile",
            "limits",
            "monitoring",
            "management"
          ],
          "filename": "autoscaling-profiles-limits.py",
          "file_path": "python-rt2025/autoscaling-profiles-limits.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nTagoIO - Analysis Example\nAuto Scaling analysis\n\nCheck out the SDK documentation on: https://js.sdk.tago.io\n\nThs is a script to automatically check your current usage, and auto-scale your account if needed.\nYou can get the analysis template with all the Environment Variables here:\n        https://admin.tago.io/template/62151212ec8d8f0012c52772\n\nIn order to use this analysis, you must setup all the environment variables needed.\nYou're also required to create an Action of trigger type Schedule, and choose to run this analysis.\nIn the action you set how often you want to run this script to check your limits. It can set to a minimum of 1 minute.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\naccount_token: Your account token. Check the steps at the end to understand how to generate it.\ninput: 95. The 95 value will scale data input when it reachs 95% of the usage. Keep it blank to not scale data input.\noutput: 95\ndata_records: 95\nanalysis: 95\nsms: 95\nemail: 95\npush_notification: 95\nfile_storage: 95\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import Optional\n\nfrom tagoio_sdk import Account, Analysis\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\nfrom tagoio_sdk.modules.Account.Billing_Type import (\n    BillingPrices,\n    BillingSubscriptionServices,\n)\n\n\n@dataclass\nclass CheckAutoScaleSource:\n    type: str\n    current_value: int\n    limit: int\n    scale: float\n    billing: BillingPrices\n    account_limit: BillingSubscriptionServices\n\n\ndef check_auto_scale(data: CheckAutoScaleSource) -> Optional[int]:\n    # Stop if current use is less than 95% of what was hired.\n    if data.limit <= 0 or data.limit * (data.scale * 0.01) > data.current_value:\n        return None\n\n    service_billing = next(\n        (\n            obj\n            for obj in data.billing[data.type]\n            if obj[\"amount\"] > data.account_limit[data.type][\"limit\"]\n        ),\n        None,\n    )\n    return service_billing[\"amount\"] if service_billing else None\n\n\ndef get_profile_id_by_token(account: Account, token: str) -> Optional[str]:\n    profiles = account.profile.list()\n\n    for profile in profiles:\n        token_exist = [\n            obj\n            for obj in account.profile.tokenList(profileID=profile[\"id\"])\n            if obj[\"token\"] == token\n        ]\n        if token_exist:\n            return profile[\"id\"]\n    raise Exception(\n        \"Profile not found for the account token in the environment variable\"\n    )\n\n\ndef my_analysis(context, list: list = None):\n    # Get the environment variables and parses it to a JSON\n    environment = envToJson(environment=context.environment)\n\n    if not environment:\n        raise ValueError(\"[ERROR] environment variable empty.\")\n\n    if not environment.get(\"account_token\"):\n        raise ValueError(\n            \"[ERROR] You must enter a valid account_token in the environment variable\"\n        )\n\n    # Setup the account and get's the ID of the profile the account token belongs to.\n    account = Account({\"token\": environment[\"account_token\"]})\n    profile_id = get_profile_id_by_token(\n        account=account, token=environment[\"account_token\"]\n    )\n\n    # Get the current subscriptions of our account for all the services.\n    services_limit = (account.billing.getSubscription())[\"services\"]\n\n    # get current limit and used resources of the profile.\n    summary = account.profile.summary(profileID=profile_id)\n    limit, limit_used = summary[\"limit\"], summary[\"limit_used\"]\n\n    # get the tiers of all services, so we know the next tier for our limits.\n    billing_prices = account.billing.getPrices()\n\n    # Check each service to see if it needs scaling\n    auto_scale_services = {}\n    for statistic_key in limit:\n        if statistic_key not in environment:\n            continue\n\n        if not environment[statistic_key].isnumeric():\n            print(\n                f\"[ERROR] Ignoring {statistic_key}, because the environment variable value is not a number.\"\n            )\n            continue\n\n        scale = float(environment[statistic_key])\n        if scale == 0:\n            continue\n\n        data = CheckAutoScaleSource(\n            type=statistic_key,\n            current_value=limit_used[statistic_key],\n            limit=limit[statistic_key],\n            scale=scale,\n            billing=billing_prices,\n            account_limit=services_limit,\n        )\n        result = check_auto_scale(data=data)\n        if result:\n            auto_scale_services[statistic_key] = {\"limit\": result}\n\n    # Stop if no auto-scale needed\n    if not auto_scale_services:\n        print(\"Services are okay, no auto-scaling needed.\")\n        return \"Services are okay, no auto-scaling needed.\"\n\n    print(f\"Auto-scaling the services: {', '.join(auto_scale_services.keys())}\")\n    # Update our subscription, so we are actually scaling the account.\n    try:\n        billing_success = account.billing.editSubscription(\n            subscription={\"services\": auto_scale_services}\n        )\n    except Exception as error:\n        print(f\"[ERROR] {error}\")\n        return error\n\n    if not billing_success:\n        return\n\n    # Stop here if account has only one profile. No need to reallocate resources\n    profiles = account.profile.list()\n    if len(profiles) > 1:\n        # Make sure we realocate only what we just subscribed\n        amount_to_relocate = {}\n        for key in services_limit:\n            amount_to_relocate[key] = services_limit[key][\"limit\"] - (\n                amount_to_relocate.get(key, {}).get(\"limit\", 0)\n            )\n\n        # Allocate all the subscribed limit to the profile.\n        try:\n            account.billing.editAllocation(\n                allocation={\n                    \"profile\": profile_id,\n                    **amount_to_relocate,\n                }\n            )\n        except Exception as error:\n            print(f\"[ERROR] {error}\")\n            return error\n\n    return billing_success\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\n# To run the tests you need to comment out the line below\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "avg-min-max",
          "title": "Statistical Data Analysis",
          "description": "Calculate minimum, maximum, and average values from device variables",
          "language": "python",
          "tags": [
            "statistics",
            "average",
            "min",
            "max",
            "data",
            "calculation"
          ],
          "filename": "avg-min-max.py",
          "file_path": "python-rt2025/avg-min-max.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nMinimum, maximum, and average\n\nGet the minimum, maximum, and the average value of the variable temperature from your device,\nand save these values in new variables\n\nInstructions\nTo run this analysis you need to add a device token to the environment variables,\nTo do that, go to your device, then token and copy your token.\nGo the the analysis, then environment variables,\ntype device_token on key, and paste your token on value\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Device\n\n\ndef temperature_minimum(device: Device) -> None:\n    \"\"\"Record the minimum temperature of the last day in the bucket variable\n\n    Args:\n        device (Device): Instance of the Device class\n    \"\"\"\n    # This is a filter to get the minimum value of the variable temperature in the last day\n    min_filter = {\"variables\": \"temperature\", \"query\": \"min\", \"start_date\": \"1 day\"}\n\n    # Now we use the filter for the device to get the data\n    # check if the variable min has any value\n    # if so, we crete a new object to send to TagoIO\n    min_result = device.getData(queryParams=min_filter)\n\n    if min_result:\n        min_value = {\n            \"variable\": \"temperature_minimum\",\n            \"value\": min_result[0][\"value\"],\n            \"unit\": \"F\",\n        }\n\n        # now we insert the new object with the minimum value\n        device.sendData(data=min_value)\n        print(f\"Temperature Minimum - {min_result[0]['value']}\")\n    else:\n        print(\"Minimum value not found\")\n\n\ndef temperature_maximum(device: Device) -> None:\n    \"\"\"Record the maximum temperature of the last day in the bucket variable\n\n    Args:\n        device (Device): Instance of the Device class\n    \"\"\"\n    # This is a filter to get the maximum value of the variable temperature in the last day\n    max_filter = {\n        \"variables\": \"temperature\",\n        \"query\": \"max\",\n        \"start_date\": \"1 day\",\n    }\n\n    max_result = device.getData(queryParams=max_filter)\n    if max_result:\n        max_value = {\n            \"variable\": \"temperature_maximum\",\n            \"value\": max_result[0][\"value\"],\n            \"unit\": \"F\",\n        }\n\n        # now we insert the new object with the Maximum value\n        device.sendData(data=max_value)\n\n        print(f\"Temperature Maximum - {max_result[0]['value']}\")\n\n    else:\n        print(\"Maximum value not found\")\n\n\ndef temperature_average(device: Device) -> None:\n    \"\"\"Record the average of the last day's temperatures in the bucket variable\n\n    Args:\n        device (Device): Instance of the Device class\n    \"\"\"\n    # This is a filter to get the last 1000 values of the variable temperature in the last day\n    average_filter = {\n        \"variable\": \"temperature\",\n        \"qty\": 1000,\n        \"start_date\": \"1 day\",\n    }\n\n    average = device.getData(queryParams=average_filter)\n    if average:\n        temperature_average = 0\n        for item in average:\n            temperature_average = float(temperature_average) + float(item[\"value\"])\n\n        temperature_average = temperature_average / len(average)\n\n        average_value = {\n            \"variable\": \"temperature_average\",\n            \"value\": temperature_average,\n            \"unit\": \"F\",\n        }\n\n        device.sendData(data=average_value)\n\n        print(f\"Temperature Average - {temperature_average}\")\n    else:\n        print(\"No result found for the avg calculation\")\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list) -> None:\n    # reads the value of device_token from the environment variable\n    device_token = list(\n        filter(\n            lambda device_token: device_token[\"key\"] == \"device_token\",\n            context.environment,\n        )\n    )\n    device_token = device_token[0][\"value\"]\n\n    if not device_token:\n        raise ValueError(\"Missing value: 'device_token' Environment Variable.\")\n\n    my_device = Device({\"token\": device_token})\n\n    temperature_minimum(device=my_device)\n    temperature_maximum(device=my_device)\n    temperature_average(device=my_device)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "configuration-parameters-for-dynamic-last-value",
          "title": "Configuration Parameters for Dynamic Last Value",
          "description": "Manage configuration parameters for dynamic last value widgets",
          "language": "python",
          "tags": [
            "configuration",
            "parameters",
            "dynamic",
            "widget",
            "dashboard"
          ],
          "filename": "configuration-parameters-for-dynamic-last-value.py",
          "file_path": "python-rt2025/configuration-parameters-for-dynamic-last-value.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nConfiguration parameters for dynamic last value\n\nSet the configurations parameters with the last value of a given variable,\nin this example it is the \"temperature\" variable\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\naccount_token: Your account token. Check bellow how to get this.\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom queue import Queue\nfrom datetime import datetime\n\nfrom tagoio_sdk import Account, Analysis\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\nfrom tagoio_sdk.modules.Utils.getDevice import getDevice\n\n\ndef get_param(params: list, key: str) -> dict:\n    \"\"\"Get the desired parameter from the list of parameters\n\n    Args:\n        params (list): list of parameters\n        key (str): parameter desired to return\n\n    Returns:\n        dict: object with the key and value of the parameter you chose\n    \"\"\"\n    return next(\n        (x for x in params if x[\"key\"] == key),\n        {\"key\": key, \"value\": \"-\", \"sent\": False},\n    )\n\n\ndef apply_device_calculation(device: dict, timezone: str) -> None:\n    deviceID, name, account = device[\"id\"], device[\"name\"], device[\"account\"]\n    deviceInfoText = f\"{name}({deviceID})\"\n    print(f\"Processing Device {deviceInfoText})\")\n    device = getDevice(account, deviceID)\n\n    # Get the temperature variable inside the device bucket.\n    # notice it will get the last record at the time the analysis is running.\n    dataResult = device.getData({\"variables\": [\"temperature\"], \"query\": \"last_value\"})\n    if not dataResult:\n        print(f\"No data found for {deviceInfoText}\")\n        return\n\n    # Get configuration params list of the device\n    deviceParams = account.devices.paramList(deviceID)\n\n    # get the variable temperature from our dataResult array\n    temperature = next(\n        (data for data in dataResult if data[\"variable\"] == \"temperature\"), None\n    )\n    if temperature:\n        # get the config. parameter with key temperature\n        temperatureParam = get_param(deviceParams, \"temperature\")\n        # get the config. parameter with key last_record_time\n        lastRecordParam = get_param(deviceParams, \"last_record_time\")\n\n        timeString = (\n            datetime.fromtimestamp(temperature[\"time\"])\n            .astimezone(timezone)\n            .strftime(\"%Y/%m/%d %I:%M %p\")\n        )\n\n        # creates or edit the tempreature Param with the value of temperature.\n        # creates or edit the last_record_time Param with the time of temperature.\n        # Make sure to cast the value to STRING, otherwise you'll get an error.\n        account.devices.paramSet(\n            deviceID,\n            [\n                {**temperatureParam, \"value\": str(temperature[\"value\"])},\n                {**lastRecordParam, \"value\": timeString},\n            ],\n        )\n\n\ndef my_analysis(context: any, scope: list = None) -> None:\n    environment = envToJson(context.environment)\n\n    if not environment.get(\"account_token\"):\n        raise ValueError(\"Missing account_token environment var\")\n    # Make sure you have account_token tag in the environment variable of the analysis.\n    account = Account({\"token\": environment[\"account_token\"]})\n\n    # Create a queue, so we don't run on Throughput errors.\n    # The queue will make sure we check only 5 devices simultaneously.\n    processQueue = Queue(maxsize=5)\n    processQueue.put_nowait(apply_device_calculation)\n\n    # fetch device list filtered by tags.\n    # Device list always return an Array with DeviceInfo object.\n    deviceList = account.devices.listDevice(\n        {\n            \"amount\": 500,\n            \"fields\": [\"id\", \"name\", \"tags\"],\n            \"filter\": {\"tags\": [{\"key\": \"type\", \"value\": \"sensor\"}]},\n        }\n    )\n\n    for device in deviceList:\n        processQueue.put(\n            device={\"id\": device[\"id\"], \"name\": device[\"name\"], \"account\": account},\n            timezone=account.info().get(\"timezone\", \"America/New_York\"),\n        )\n\n    # Wait for all queue to be processed\n    processQueue.join()\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "console",
          "title": "Console Hello World",
          "description": "Basic hello world example showing how to send messages to the analysis console",
          "language": "python",
          "tags": [
            "basic",
            "console",
            "hello",
            "logging",
            "debug"
          ],
          "filename": "console.py",
          "file_path": "python-rt2025/console.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nHello World\n\nLearn how to send messages to the console located on the TagoIO analysis screen.\nYou can use this principle to show any information during and after development.\n\"\"\"\n\nfrom tagoio_sdk import Analysis\n\n\n# The function myAnalysis will run when you execute your analysis\ndef myAnalysis(context, scope: list) -> None:\n    # This will log \"Hello World\" at the TagoIO Analysis console\n    print(\"Hello World\")\n\n    #  This will log the environment to the TagoIO Analysis console\n    print(\"Environment:\", context.environment)\n\n    #  This will log the scope to the TagoIO Analysis console\n    print(\"my scope:\", scope)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(myAnalysis)\n"
        },
        {
          "id": "create-device",
          "title": "Create Device",
          "description": "Create new devices programmatically using dashboard inputs",
          "language": "python",
          "tags": [
            "device",
            "create",
            "dashboard",
            "automation"
          ],
          "filename": "create-device.py",
          "file_path": "python-rt2025/create-device.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nCreating devices using dashboard\n\nUsing an Input Widget in the dashboard, you will be able to create devices in your account.\nYou can get the dashboard template to use here: https://admin.tago.io/template/6143555a314cef001871ec78\nUse a dummy HTTPs device with the dashboard.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n  account_token: Your account token. Check bellow how to get this.\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Device, Account\nfrom tagoio_sdk.modules.Utils.getTokenByName import getTokenByName\nfrom tagoio_sdk.modules.Account.Device_Type import DeviceCreateInfo\n\n\ndef add_configuration_parameter_to_device(account: Account, device_id: str) -> None:\n    account.devices.paramSet(\n        deviceID=device_id, configObj={\"key\": \"param_key\", \"value\": \"10\", \"sent\": False}\n    )\n\n\ndef send_feedback_to_dashboard(account: Account, device_id: str) -> None:\n    dashboard_token = getTokenByName(account=account, deviceID=device_id)\n    device = Device(params={\"token\": dashboard_token})\n\n    # To add any data to the device that was just created:\n    # device.sendData({ \"variable\": \"temperature\", value: 17 })\n\n    device.sendData(\n        data={\n            \"variable\": \"validation\",\n            \"value\": \"Device successfully created!\",\n            \"metadata\": {\"type\": \"success\"},\n        }\n    )\n\n\ndef parse_new_device(scope: list[dict]) -> DeviceCreateInfo:\n    # Get the variables sent by the widget/dashboard.\n    device_network = [obj for obj in scope if obj[\"variable\"] == \"device_network\"]\n    device_connector = [obj for obj in scope if obj[\"variable\"] == \"device_connector\"]\n    device_name = [obj for obj in scope if obj[\"variable\"] == \"device_name\"]\n    device_eui = [obj for obj in scope if obj[\"variable\"] == \"device_eui\"]\n\n    if not device_network or not device_network[0][\"value\"]:\n        raise TypeError('Missing \"device_network\" in the data scope.')\n    elif not device_connector or not device_connector[0][\"value\"]:\n        raise TypeError('Missing \"device_connector\" in the data scope.')\n    elif not device_eui or not device_eui[0][\"value\"]:\n        raise TypeError('Missing \"device_eui\" in the data scope.')\n\n    return {\n        \"name\": device_name[0][\"value\"],\n        \"serie_number\": device_eui[0][\"value\"],\n        \"tags\": [\n            # You can add custom tags here.\n            {\"key\": \"type\", \"value\": \"sensor\"},\n            {\"key\": \"device_eui\", \"value\": device_eui[0][\"value\"]},\n        ],\n        \"connector\": device_connector[0][\"value\"],\n        \"network\": device_network[0][\"value\"],\n        \"active\": True,\n        \"type\": \"immutable\",\n        \"chunk_period\": \"month\",  # consider change\n        \"chunk_retention\": 1,  # consider change\n    }\n\n\ndef start_analysis(context: list[dict], scope: list[dict]) -> None:\n    if not scope:\n        return print(\"The analysis must be triggered by a widget.\")\n\n    # reads the value of account_token from the environment variable\n    account_token = list(\n        filter(\n            lambda account_token: account_token[\"key\"] == \"account_token\",\n            context.environment,\n        )\n    )\n    account_token = account_token[0][\"value\"]\n\n    if not account_token:\n        return print(\"Missing account_token Environment Variable.\")\n\n    account = Account(params={\"token\": account_token})\n\n    new_device = parse_new_device(scope=scope)\n\n    result = account.devices.create(deviceObj=new_device)\n    print(result)\n\n    add_configuration_parameter_to_device(\n        account=account, device_id=result[\"device_id\"]\n    )\n\n    send_feedback_to_dashboard(account=account, device_id=scope[0][\"device\"])\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(start_analysis)\n"
        },
        {
          "id": "data-retention",
          "title": "Custom Data Retention",
          "description": "Automatically remove old data from devices based on custom retention policies",
          "language": "python",
          "tags": [
            "data",
            "retention",
            "cleanup",
            "management",
            "automation"
          ],
          "filename": "data-retention.py",
          "file_path": "python-rt2025/data-retention.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nCustom Data Retention\n\nUse your account token to get the list of devices, then go to each device removing the\nvariables you chooses.\n\nInstructions\nTo run this analysis you need to add an account token to the environment variables,\nTo do that, go to your account settings, then token and copy your token.\nGo the the analysis, then environment variables,\ntype account_token on key, and paste your token on value\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Account, Device\nfrom tagoio_sdk.modules.Utils.getTokenByName import getTokenByName\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list):\n    # reads the value of account_token from the environment variable\n    account_token = next(\n        (item for item in context.environment if item[\"key\"] == \"account_token\"), None\n    )\n\n    if not account_token:\n        raise ValueError(\"Missing 'account_token' in the environment variables\")\n\n    account = Account({\"token\": account_token[\"value\"]})\n\n    # Bellow is an empty filter.\n    # Examples of filter:\n    # { tags: [{ key: 'tag-key', value: 'tag-value' }]}\n    # { name: 'name*' }\n    # { name: '*name' }\n    # { bucket: 'bucket-id' }\n    filter = {}\n\n    devices = account.devices.listDevice(\n        {\n            \"page\": 1,\n            \"fields\": [\"id\"],\n            \"filter\": filter,\n            \"amount\": 100,\n        }\n    )\n\n    for device_obj in devices:\n        token = getTokenByName(account, device_obj[\"id\"])\n        device = Device({\"token\": token})\n\n        variables = [\"temperature\"]\n        qty = 100  # remove 100 registers of each variable\n        end_date = \"30 days\"  # registers old than 30 days\n\n        result = device.deleteData(\n            {\"variables\": variables, \"qty\": qty, \"end_date\": end_date}\n        )\n        print(result)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "data-transaction",
          "title": "Data Transaction Counter",
          "description": "Calculate total transactions by device and group results by user tags",
          "language": "python",
          "tags": [
            "transaction",
            "data",
            "analytics",
            "calculation",
            "reporting"
          ],
          "filename": "data-transaction.py",
          "file_path": "python-rt2025/data-transaction.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nGet users total transactions\n\nThis analysis must run by an Scheduled Action.\nIt gets a total amount of transactions by device, calculating by the total amount of data in the bucket\neach time the analysis run. Group the result by a tag.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\ndevice_token: Token of a device where the total transactions will be stored. Get this in the Device's page.\naccount_token: Your account token. Check bellow how to get this.\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Account, Device\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\n\n\ndef calculate_user_transactions(\n    account: Account, storage: Device, user_value: str, device_list: list\n) -> None:\n    # Collect the data amount for each device.\n    # Result of bucket_results is:\n    # [0, 120, 500, 0, 1000]\n    for device in device_list:\n        total_transactions = account.buckets.amount(device[\"bucket\"])\n\n        # Get the total transactions of the last analysis run.\n        # Group is used to get only for this user.\n        # You can change that to get a specific device for the user, instead of using a global storage device.\n        # One way to do that is by just finding the device using a tag, see example:\n        #\n        # [user_device] = account.devices.list({'page': 1, 'fields': ['id', 'name', 'bucket', 'tags'], 'filter': {'tags': [{'key': 'user_device', 'value': user_value}]}, 'amount': 1})\n        # device_token = Utils.getTokenByName(account, user_device['id'])\n        # storage = Device({'token': device_token})\n        last_total_transactions = storage.getData(\n            {\"variable\": \"last_transactions\", \"qty\": 1, \"group\": user_value}\n        )\n\n        if not last_total_transactions:\n            last_total_transactions = [{\"value\": 0}]\n\n        last_total_transactions = last_total_transactions[0]\n\n        result = total_transactions - last_total_transactions[\"value\"]\n\n        # Store the current total of transactions, the result for this analysis run and the key.\n        # Now you can just plot these variables in a dynamic table.\n        storage.sendData(\n            data=[\n                {\n                    \"variable\": \"last_transactions\",\n                    \"value\": total_transactions,\n                    \"group\": user_value,\n                },\n                {\n                    \"variable\": \"transactions_result\",\n                    \"value\": result,\n                    \"group\": user_value,\n                },\n                {\"variable\": \"user\", \"value\": user_value, \"group\": user_value},\n            ]\n        )\n\n    print(\"Done!\")\n\n\ndef my_analysis(context: any, scope: list = None) -> None:\n    # Transform all Environment Variable to JSON.\n    environment = envToJson(context.environment)\n\n    if not environment.get(\"account_token\"):\n        raise ValueError(\n            \"You must setup an account_token in the Environment Variables.\"\n        )\n\n    elif not environment.get(\"device_token\"):\n        raise ValueError(\"You must setup an device_token in the Environment Variables.\")\n\n    # Instance the account class\n    account = Account(params={\"token\": environment[\"account_token\"]})\n    storage = Device(params={\"token\": environment[\"device_token\"]})\n\n    # Setup the tag we will be searching in the device list\n    tag_to_search = \"user_email\"\n\n    # Get the device_list and group it by the tag value.\n    device_list = account.devices.listDevice(\n        {\n            \"page\": 1,\n            \"fields\": [\"id\", \"name\", \"bucket\", \"tags\"],\n            \"filter\": {\"tags\": [{\"key\": tag_to_search}]},\n            \"amount\": 10000,\n        }\n    )\n\n    grouped_device_list = {}\n\n    for device in device_list:\n        tag_value = None\n\n        for tag in device[\"tags\"]:\n            if tag[\"key\"] == tag_to_search:\n                tag_value = tag[\"value\"]\n                break\n\n        if tag_value:\n            if tag_value not in grouped_device_list:\n                grouped_device_list[tag_value] = []\n            grouped_device_list[tag_value].append(device)\n\n    grouped_device_list = [\n        {\"value\": key, \"device_list\": value}\n        for key, value in grouped_device_list.items()\n    ]\n\n    # Call a new function for each group in assynchronous way.\n    calculate_user_transactions(\n        account=account,\n        storage=storage,\n        user_value=grouped_device_list[0][\"value\"],\n        device_list=grouped_device_list[0][\"device_list\"],\n    )\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "device-list",
          "title": "Device List",
          "description": "Get and display list of devices in your account",
          "language": "python",
          "tags": [
            "device",
            "list",
            "account",
            "management"
          ],
          "filename": "device-list.py",
          "file_path": "python-rt2025/device-list.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nGet Device List\n\nThis analysis retrieves the device list of your account and print to the console.\nThere are examples on how to apply filter.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\naccount_token: Your account token\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Account, Analysis\nfrom tagoio_sdk.modules.Account.Device_Type import DeviceInfoList\n\n\ndef get_device_list(account: Account) -> list[DeviceInfoList]:\n    \"\"\"Retrieves the device list of your account.\n\n    Args:\n        account (Account): Instance of the class Account\n\n    Returns:\n        list[DeviceInfoList]: List of devices\n    \"\"\"\n    # Example of filtering devices by Tag.\n    # You can filter by: name, last_input, last_output, bucket, etc.\n    my_filter = {\n        \"tags\": [\n            {\"key\": \"keyOfTagWeWantToSearch\", \"value\": \"valueOfTagWeWantToSearch\"}\n        ],\n        # \"bucket\": \"55d269211a2e236c25bb9859\",\n        # \"name\": \"My Device\",\n        # \"name\": \"My Dev*\"\n    }\n\n    devices = account.devices.listDevice(\n        {\"page\": 1, \"fields\": [\"id\", \"tags\"], \"filter\": my_filter, \"amount\": 20}\n    )\n\n    return devices\n\n\ndef my_analysis(context, scope: list) -> None:\n    # reads the value of account_token from the environment variable\n    account_token = list(\n        filter(\n            lambda account_token: account_token[\"key\"] == \"account_token\",\n            context.environment,\n        )\n    )\n    if account_token:\n        account_token = account_token[0].get(\"value\")\n\n    if not account_token:\n        return print(\"Missing account_token Environment Variable.\")\n\n    account = Account(params={\"token\": account_token})\n    list_devices = get_device_list(account=account)\n\n    print(list_devices)\n    print(f\"Total devices: {len(list_devices)}\")\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "device-offline",
          "title": "Device Offline Alert",
          "description": "Monitor devices and send alerts when they haven't communicated within specified time intervals",
          "language": "python",
          "tags": [
            "device",
            "offline",
            "alert",
            "monitoring",
            "notification"
          ],
          "filename": "device-offline.py",
          "file_path": "python-rt2025/device-offline.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nDevice Offline Alert\n\nThis analysis must run by Time Interval. It checks if devices with given Tags\nhad communication in the past minutes. If not, it sends an email or sms alert.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\naccount_token: Your account token\ncheck_in_time: Minutes between the last input of the device before sending the notification.\ntag_key: Device tag Key to filter the devices.\ntag_value: Device tag Value to filter the devices.\nemail_list: Email list comma separated.\nsms_list: Phone number list comma separated. The phone number must include the country code\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom datetime import datetime\n\nfrom tagoio_sdk import Account, Analysis, Services\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\n\n\ndef my_analysis(context, scope: list = None):\n    # Transform all Environment Variable to JSON.\n    env = envToJson(context.environment)\n\n    if not env.get(\"account_token\"):\n        return print(\"You must setup an account_token in the Environment Variables.\")\n    elif not env.get(\"check_in_time\"):\n        return print(\"You must setup a check_in_time in the Environment Variables.\")\n    elif not env.get(\"tag_key\"):\n        return print(\"You must setup a tag_key in the Environment Variables.\")\n    elif not env.get(\"tag_value\"):\n        return print(\"You must setup a tag_value in the Environment Variables.\")\n    elif not env.get(\"email_list\") and not env.get(\"sms_list\"):\n        return print(\n            \"You must setup an email_list or a sms_list in the Environment Variables.\"\n        )\n\n    check_in_time = int(env.get(\"check_in_time\"))\n    if check_in_time == 0:\n        return print(\"The check_in_time must be a number.\")\n\n    account = Account(params={\"token\": env[\"account_token\"]})\n\n    # You can remove the comments on line 51 and 57 to use the Tag Filter.\n    # filter = {'tags': [{'key': env['tag_key'], 'value': env['tag_value']}]}\n\n    devices = account.devices.listDevice(\n        queryObj={\n            \"page\": 1,\n            \"amount\": 1000,\n            \"fields\": [\"id\", \"name\", \"last_input\"],\n            # \"filter\": filter,\n        }\n    )\n\n    if not devices:\n        return print(\n            f\"No device found with given tags. Key: {env['tag_key']}, Value: {env['tag_value']} \"\n        )\n\n    print(\"Checking devices: \", \", \".join(x[\"name\"] for x in devices))\n\n    alert_devices = []\n    for device in devices:\n        now = datetime.utcnow()\n\n        # Check the difference in minutes.\n        diff = (now - device[\"last_input\"]).total_seconds() // 60\n        if diff > check_in_time:\n            alert_devices.append(device[\"name\"])\n\n    if not alert_devices:\n        return print(\"All devices are okay.\")\n\n    print(\"Sending notifications\")\n    email_service = Services(params={\"token\": context.token}).email\n    sms_service = Services(params={\"token\": context.token}).sms\n\n    message = f\"Hi!\\nYou're receiving this alert because the following devices didn't send data in the last {check_in_time} minutes.\\n\\nDevices:\"\n    message += \"\\n\".join(alert_devices)\n\n    if env.get(\"email_list\"):\n        # Remove space in the string\n        emails = env[\"email_list\"].replace(\" \", \"\")\n\n        email_service.send(\n            email={\n                \"to\": emails,\n                \"subject\": \"Device Offline Alert\",\n                \"message\": message,\n            }\n        )\n\n    if env.get(\"sms_list\"):\n        # Remove space in the string and convert to an Array.\n        smsNumbers = env[\"sms_list\"].replace(\" \", \"\").split(\",\")\n\n        for phone in smsNumbers:\n            sms_service.send(\n                sms={\n                    \"to\": phone,\n                    \"message\": message,\n                }\n            )\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "downlink-dashboard",
          "title": "Downlink Dashboard",
          "description": "Send downlink commands to devices from dashboard interface",
          "language": "python",
          "tags": [
            "downlink",
            "dashboard",
            "device",
            "command",
            "control"
          ],
          "filename": "downlink-dashboard.py",
          "file_path": "python-rt2025/downlink-dashboard.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nSending downlink using dashboard\nUsing an Input Widget in the dashboard, you will be able to trigger a downlink to\nany LoraWaN network server.\nYou can get the dashboard template to use here: https://admin.tago.io/template/5f514218d4555600278023c4\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\n\naccount_token: Your account token. Check bellow how to get this.\ndefault_PORT: The default port to be used if not sent by the dashboard.\ndevice_id: The default device id to be used if not sent by the dashboard (OPTIONAL).\npayload: The default payload to be used if not sent by the dashboard (OPTIONAL).\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Account, Analysis\nfrom tagoio_sdk.modules.Utils.sendDownlink import sendDownlink\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list[dict]) -> None:\n    account_token = list(\n        filter(\n            lambda account_token: account_token[\"key\"] == \"account_token\",\n            context.environment,\n        )\n    )\n\n    if not account_token:\n        return ValueError(\"Missing value: 'account_token' Environment Variable.\")\n\n    my_account = Account({\"token\": account_token[0][\"value\"]})\n    # Get the variables form_payload, form_port and device_id sent by the widget/dashboard.\n    payload = list(filter(lambda payload: payload[\"variable\"] == \"form_payload\", scope))\n\n    if not payload:\n        return print('Missing \"form_payload\" in the data scope.')\n\n    device_id = payload[0][\"device_id\"]\n    payload = payload[0][\"payload\"]\n\n    port = list(filter(lambda payload: payload[\"variable\"] == \"form_port\", scope))\n\n    if not port:\n        return print('Missing \"form_port\" in the data scope o.')\n\n    port = port[0][\"value\"]\n\n    result = sendDownlink(\n        account=my_account,\n        device_id=device_id,\n        dn_options={\"port\": port, \"payload\": payload},\n    )\n    print(result)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "dynamic-notification",
          "title": "Dynamic Notification",
          "description": "Send dynamic email, SMS and push notifications based on data conditions",
          "language": "python",
          "tags": [
            "notification",
            "dynamic",
            "email",
            "sms",
            "push"
          ],
          "filename": "dynamic-notification.py",
          "file_path": "python-rt2025/dynamic-notification.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nSending dynamic notification\n\nSend notifications using analysis. It's include example for Email, SMS and Push Notification to TagoRUN Users.\nIn order for this example to work, you must create an action by variable and set to run this analysis.\nOnce the action is triggered with your conditions, the data will be sent to this analysis.\n\nEnvironment Variables\nIn order to use this analysis, you must setup the Environment Variable table.\naccount_token: Your account token. Check bellow how to get this.\n\nSteps to generate an account_token:\n1 - Enter the following link: https://admin.tago.io/account/\n2 - Select your Profile.\n3 - Enter Tokens tab.\n4 - Generate a new Token with Expires Never.\n5 - Press the Copy Button and place at the Environment Variables tab of this analysis.\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Account, Services\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\n\n\ndef my_analysis(context, scope: list[dict]) -> None:\n    if not scope:\n        return print(\"This analysis must be triggered by an action.\")\n\n    # Get the environment variables.\n    environment_variables = envToJson(context.environment)\n\n    if environment_variables.get(\"account_token\"):\n        return print('Missing \"account_token\" environment variable')\n    elif len(environment_variables[\"account_token\"]) != 36:\n        return print('Invalid \"account_token\" in the environment variable')\n\n    # Instance the Account class\n    account = Account({\"token\": environment_variables[\"account_token\"]})\n\n    # Get the device ID from the scope and retrieve device information.\n    device_id = scope[0][\"device\"]\n    device_info = account.devices.info(device_id)\n\n    # Get the device name and tags from the device.\n    # [TAG KEY]    [TAG VALUE]\n    # email        example@tago.io\n    # phone        +1XXxxxxxxx\n    # user_id      5f495ae55ff03d0028d39fc5\n    #\n    # This is just a generic example how to get this information. You can get data from a device, search in tags, or any other way of correlation you have.\n    # For example, you can get the email directly from the user_id if it was specified:\n    # email = await account.run.user_info(user_id_tag[\"id\"])[\"email\"]\n    device_name = device_info[\"name\"]\n    email_tag = next(\n        (tag for tag in device_info[\"tags\"] if tag[\"key\"] == \"email\"), None\n    )\n    phone_tag = next(\n        (tag for tag in device_info[\"tags\"] if tag[\"key\"] == \"phone\"), None\n    )\n    user_id_tag = next(\n        (tag for tag in device_info[\"tags\"] if tag[\"key\"] == \"user_id\"), None\n    )\n\n    # Instance the SMS and Email service using the analysis token from the context.\n    email_service = Services({\"token\": context.token}).email\n    sms_service = Services({\"token\": context.token}).sms\n\n    # Send the notifications and output the results to the analysis console.\n    if email_tag:\n        result = email_service.send(\n            {\n                \"to\": email_tag[\"value\"],\n                \"subject\": \"Notification alert\",\n                \"message\": f\"You received a notification for the device: {device_name}. Variable: {scope[0]['variable']}, Value: {scope[0]['value']}\",\n            }\n        )\n        print(result)\n    else:\n        print(\"Email not found for this device.\")\n\n    if phone_tag:\n        result = sms_service.send(\n            {\n                \"to\": phone_tag[\"value\"],\n                \"message\": f\"You received a notification for the device: {device_name}. Variable: {scope[0]['variable']}, Value: {scope[0]['value']}\",\n            }\n        )\n        print(result)\n    else:\n        print(\"Phone number not found for this device.\")\n\n    if user_id_tag:\n        result = account.run.notificationCreate(\n            user_id_tag[\"value\"],\n            {\n                \"title\": \"Notification Alert\",\n                \"message\": f\"You received a notification for the device: {device_name}. Variable: {scope[0]['variable']}, Value: {scope[0]['value']}\",\n            },\n        )\n        print(result)\n    else:\n        print(\"User ID not found for this device.\")\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "email-export",
          "title": "Email Export",
          "description": "Export data and send via email as attachments",
          "language": "python",
          "tags": [
            "email",
            "export",
            "data",
            "attachment",
            "reporting"
          ],
          "filename": "email-export.py",
          "file_path": "python-rt2025/email-export.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nEmail export\n\nLearn how to send an email with data in a .csv file attachment.\n\nThis analysis will read the variable fuel_level from your device,\nand send the values in a .csv file to an e-mail address\n\nInstructions\nTo run this analysis you need to add a device token and the e-mail to the environment variables.\nTo do that, go to your device, then token and copy your token.\nGo the the analysis, then environment variables,\ntype device_token on key, and paste your token on value\nclick the + button to add a new environment\non key, type email and on value, type the e-mail address\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Device, Services\nfrom tagoio_sdk.modules.Utils import envToJson\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list[dict] = None) -> None:\n    # reads the values from the environment and saves it in the variable env_vars\n    env_vars = envToJson.envToJson(context.environment)\n\n    if not env_vars.get(\"device_token\"):\n        raise ValueError(\"Missing value: 'device_token' environment variable not found\")\n\n    if not env_vars.get(\"email\"):\n        raise ValueError(\"Missing value: 'email' environment variable not found\")\n\n    device = Device({\"token\": env_vars[\"device_token\"]})\n\n    # Get the 5 last records of the variable fuel_level in the device bucket.\n    fuel_list = device.getData({\"variable\": \"fuel_level\", \"qty\": 5})\n\n    # Create csv header\n    csv = \"Fuel Level\"\n\n    # For each record in the fuel_list, add the value in the csv text.\n    # Use \\n to break the line.\n    for item in fuel_list:\n        csv = f\"{csv},\\n{item['value']}\"\n\n    # Print the csv text to the TagoIO analysis console, as a preview\n    print(csv)\n\n    # Start the email service\n    email = Services({\"token\": context.token}).email\n\n    # Send the email.\n    service_response = email.send(\n        {\n            \"message\": \"This is an example of a body message\",\n            \"subject\": \"Exported File from TagoIO\",\n            \"to\": env_vars[\"email\"],\n            \"attachment\": {\n                \"archive\": csv,\n                \"filename\": \"exported_file.csv\",\n            },\n        }\n    )\n\n    print(service_response)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "find",
          "title": "Data Operations",
          "description": "Find and operate on data from devices with various filters",
          "language": "python",
          "tags": [
            "data",
            "find",
            "filter",
            "operations",
            "search"
          ],
          "filename": "find.py",
          "file_path": "python-rt2025/find.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nOperate data from devices\n\nRead information from a variable generated by devices,\nrun a simple calculation in real-time, and create a new variable with the output.\n\nInstructions\nTo run this analysis you need to add a device token to the environment variables,\nTo do that, go to your device, then token and copy your token.\nGo the the analysis, then environment variables,\ntype device_token on key, and paste your token on value\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Device\n\n\ndef my_analysis(context, scope: list = None) -> str:\n    # reads the value of account_token from the environment variable\n    device_token = next(\n        (item for item in context.environment if item[\"key\"] == \"device_token\"), None\n    )\n\n    if not device_token:\n        return print(\"Missing device_token environment variable\")\n\n    device = Device(params={\"token\": device_token[\"value\"]})\n\n    # create the filter options to get the data from TagoIO\n    query_filter = {\n        \"variable\": \"temperature\",\n        \"query\": \"last_item\",\n    }\n\n    result_array = device.getData(queryParams=query_filter)\n\n    # Check if the array is not empty\n    if not result_array or not result_array[0]:\n        return print(\"Empty Array\")\n\n    # query:last_item always returns only one value\n    value = result_array[0][\"value\"]\n    time = result_array[0][\"time\"]\n\n    # print to the console at TagoIO\n    print(f\"The last record of the water_level is {value}. It was inserted at {time}\")\n\n    # Multiplies the water_level value by 2 and inserts it in another variable\n    obj_to_save = {\n        \"variable\": \"temperature_double\",\n        \"value\": value * 2,\n    }\n\n    result = device.sendData(data=obj_to_save)\n    print(result)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "generate-pdf-report",
          "title": "Generate PDF Report",
          "description": "Generate PDF reports from device data and send via email",
          "language": "python",
          "tags": [
            "pdf",
            "report",
            "generation",
            "email",
            "data"
          ],
          "filename": "generate-pdf-report.py",
          "file_path": "python-rt2025/generate-pdf-report.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nGenerate pdf report and send via email\n\nInstructions\nTo run this analysis you need to add a email and device_token to the environment variables,\nGo the the analysis, then environment variables,\ntype email on key, and insert your email on value\ntype device_token on key and insert your device token on value\n\"\"\"\n\nimport base64\nfrom datetime import datetime\n\nfrom tagoio_sdk import Analysis, Device, Services\nfrom tagoio_sdk.modules.Utils.envToJson import envToJson\n\nDEVICE_VARIABLES = [\n    \"your_variable\"\n]  # enter the variable from your device you would like\n\n\ndef html_content_for_pdf(dataVal, dataVar) -> None:\n    return f\"\"\"\n    <head>\n        <style>\n            body, html {{\n                margin: 0;\n            }}\n            table {{\n                width: 100%;\n                border-collapse: collapse;\n            }}\n            td {{\n                border: 1px solid black;\n                padding: 5px;\n                padding-bottom: 25px;\n                font-style: italic;\n            }}\n        </style>\n    </head>\n    <body>\n    <table>\n        <tr>\n            <td colspan=\"7\">Issue date: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}</td>\n        </tr>\n        <tr>\n            <td colspan=\"4\">Start date: 2020-05-20 10:21:32</td>\n            <td colspan=\"3\">Stop date: 2020-10-08 22:56:19</td>\n        </tr>\n        <tr>\n            <td colspan=\"4\"> Report of the {dataVar}</td>\n            <td colspan=\"3\">Device Kitchen Oven 5</td>\n        </tr>\n        <tr>\n            <td>Counter</td>\n            <td>{dataVar}</td>\n            <td>Time</td>\n            <td>Date</td>\n            <td>Temperature 2</td>\n            <td>Time</td>\n            <td>Date</td>\n        </tr>\n        <tr>\n        <td>2</td>\n        <td>{dataVal}</td>\n        <td>10:53:20</td>\n        <td>2020-06-10</td>\n        <td>137</td>\n        <td>10:53:20</td>\n        <td>2020-06-10</td>\n        </tr>\n    </table>\n    </body>\n    </html>\n    \"\"\"\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context: any, scope: list = None) -> None:\n    # reads the values from the environment and saves it in the variable envVars\n    envVars = envToJson(context.environment)\n\n    if not envVars.get(\"email\"):\n        raise ValueError(\"email environment variable not found\")\n    if not envVars.get(\"device_token\"):\n        raise ValueError(\"device_token environment variable not found\")\n\n    device = Device({\"token\": envVars[\"device_token\"]})\n\n    variables_buckets = device.getData(\n        {\n            \"variables\": DEVICE_VARIABLES,\n            \"start_date\": \"1 month\",\n            \"qty\": 10,\n        }\n    )\n\n    dataParsed = \"variable,value,unit,time\"\n\n    for variable in variables_buckets:\n        dataParsed = f\"{variable.get('variable')},{variable.get('value')},{variable.get('unit')},{variable.get('time')}\"\n\n    dataArray = dataParsed.split(\",\")\n    dataVar = dataArray[0]\n    dataVal = dataArray[1]\n\n    html = html_content_for_pdf(dataVal, dataVar)\n\n    options = {\n        \"displayHeaderFooter\": True,\n        \"footerTemplate\": '<div class=\"page-footer\" style=\"width:100%; text-align:center; font-size:12px;\">Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span></div>',\n        \"margin\": {\n            \"top\": \"1.5cm\",\n            \"right\": \"1.5cm\",\n            \"left\": \"1.5cm\",\n            \"bottom\": \"1.5cm\",\n        },\n    }\n\n    base_64 = base64.b64encode(html.encode(\"utf-8\")).decode(\"utf-8\")\n\n    # start the PDF service\n    pdfService = Services({\"token\": context.token}).PDF\n    pdf_base64 = pdfService.generate(\n        {\n            \"base64\": base_64,\n            \"options\": options,\n        }\n    )\n\n    # Start the email service\n    emailService = Services({\"token\": context.token}).email\n\n    # Send the email.\n    emailService.send(\n        {\n            \"to\": envVars[\"email\"],\n            \"subject\": \"Exported File from TagoIO\",\n            \"message\": \"This is an example of a body message\",\n            \"attachment\": {\n                \"archive\": pdf_base64.json()[\"result\"],\n                \"type\": \"base64\",\n                \"filename\": \"exportedfile.pdf\",\n            },\n        }\n    )\n\n    print(\"Email sent successfully\")\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "http-get",
          "title": "HTTP GET Request",
          "description": "Make HTTP GET requests to external APIs and services",
          "language": "python",
          "tags": [
            "http",
            "get",
            "api",
            "request",
            "external"
          ],
          "filename": "http-get.py",
          "file_path": "python-rt2025/http-get.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nPost to HTTP Route\n\nThis analysis simple post to an HTTP route. It's a starting example for you to develop more\ncomplex algorithms.\nFollow the link of documentation https://api.docs.tago.io/\nIn this example we get the Account name and print to the console.\n\"\"\"\n\nimport urllib.request\n\nfrom tagoio_sdk import Analysis\n\n\nURL_TAGOIO = \"https://api.tago.io/info\"\n\n\ndef my_analysis(context, scope: list = None) -> dict:\n    account_token = next(\n        (item for item in context.environment if item[\"key\"] == \"account_token\"), None\n    )\n\n    if not account_token:\n        raise ValueError(\"Missing 'account_token' in the environment variables\")\n\n    headers = {\"Authorization\": account_token[\"value\"]}\n\n    req = urllib.request.Request(URL_TAGOIO, headers=headers, method=\"GET\")\n\n    try:\n        with urllib.request.urlopen(req) as response:\n            result = response.read().decode(\"utf-8\")\n            print(result)\n    except Exception as error:\n        print(f\"{error}\")\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis(params={\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "mqtt-push",
          "title": "MQTT Push",
          "description": "Push data to MQTT broker from dashboard interactions",
          "language": "python",
          "tags": [
            "mqtt",
            "push",
            "broker",
            "dashboard",
            "communication"
          ],
          "filename": "mqtt-push.py",
          "file_path": "python-rt2025/mqtt-push.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nGet Device List\n\nSnippet to push data to MQTT. Follow this pattern within your application\nIf you want more details about MQTT, search \"MQTT\" in TagoIO help center.\nYou can find plenty of documentation about this topic.\nTagoIO Team.\n\nHow to use?\nIn order to trigger this analysis you must setup a Dashboard.\nCreate a Widget \"Form\" and enter the variable 'push_payload' for the device you want to push with the MQTT.\nIn User Control, select this Analysis in the Analysis Option.\nSave and use the form.\n\"\"\"\n\nfrom tagoio_sdk import Analysis, Services\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list[dict]) -> None:\n    if not scope:\n        return print(\"This analysis must be triggered by a dashboard.\")\n\n    my_data = [obj for obj in scope if obj[\"variable\"] == \"push_payload\"]\n    if not my_data:\n        return print(\"Couldn't find any variable in the scope.\")\n\n    # Create your data object to push to MQTT\n    # In this case we're sending a JSON object.\n    # You can send anything you want.\n    # Example:\n    # const myDataObject = 'This is a string';\n    my_data_object = {\n        \"variable\": \"temperature_celsius\",\n        \"value\": (int(my_data[0][\"value\"]) - 32) * (5 / 9),\n        \"unit\": \"C\",\n    }\n\n    # Create a object with the options you chooses\n    options = {\n        \"retain\": False,\n        \"qos\": 0,\n    }\n\n    # Publishing to MQTT\n    MQTT = Services({\"token\": context.token}).MQTT\n    result = MQTT.publish(\n        {\n            # bucket: myData.bucket, // for legacy devices\n            \"bucket\": my_data[0][\"device\"],  # for immutable/mutable devices\n            \"message\": str(my_data_object),\n            \"topic\": \"tago/my_topic\",\n            \"options\": options,\n        }\n    )\n    print(result)\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        },
        {
          "id": "send-notification",
          "title": "Send Notification",
          "description": "Send notifications via email, SMS, or push notification to users",
          "language": "python",
          "tags": [
            "notification",
            "email",
            "sms",
            "push",
            "messaging"
          ],
          "filename": "send-notification.py",
          "file_path": "python-rt2025/send-notification.py",
          "code": "# /// script\n# dependencies = [\n#   \"tagoio-sdk\"\n# ]\n# ///\n\n\"\"\"\nAnalysis Example\nSend Notification to Yourself\n\nThe main function used by TagoIO to run the script.\nIt sends a notification to the account owner.\n\nEnvironment Variables\nYou must setup the following Environment Variables:\nmessage - Your Message\ntitle - Your Title\n\"\"\"\n\nfrom tagoio_sdk import Analysis\nfrom tagoio_sdk import Services\nfrom tagoio_sdk.modules.Account.Notification_Type import NotificationCreate\n\n\ndef send_notification(token_profile: str, object: NotificationCreate) -> None:\n    \"\"\"Send Notification to Yourself\n\n    Args:\n                object (NotificationCreate): Notification Object\n    \"\"\"\n    notification = Services({\"token\": token_profile}).Notification\n    notification.send(notification=object)\n\n\n# The function myAnalysis will run when you execute your analysis\ndef my_analysis(context, scope: list) -> None:\n    message = list(\n        filter(lambda message: message[\"key\"] == \"message\", context.environment)\n    )\n    if not message:\n        raise ValueError(\"Missing value: 'message' not found in environment variables\")\n    message = message[0].get(\"value\")\n\n    title = list(filter(lambda title: title[\"key\"] == \"title\", context.environment))\n    if not title:\n        raise ValueError(\"Missing value: 'title' not found in environment variables\")\n    title = title[0][\"value\"]\n\n    send_notification(\n        token_profile=context.token, object={\"message\": message, \"title\": title}\n    )\n\n\n# The analysis token in only necessary to run the analysis outside TagoIO\nAnalysis({\"token\": \"MY-ANALYSIS-TOKEN-HERE\"}).init(my_analysis)\n"
        }
      ]
    }
  },
  "payloadParser": {
    "javascript": {
      "runtime": {
        "name": "javascript",
        "displayName": "JavaScript",
        "language": "javascript",
        "exts": [
          ".js"
        ],
        "sourceDir": "snippets/payload-parser"
      },
      "snippets": [
        {
          "id": "base64-decoder",
          "title": "Base64 Payload Decoder",
          "description": "Decodes Base64 encoded payload data into readable sensor values using Buffer utilities",
          "language": "javascript",
          "tags": [
            "base64",
            "decoder",
            "protocol",
            "utility",
            "basic"
          ],
          "filename": "base64-decoder.js",
          "file_path": "javascript/base64-decoder.js",
          "code": "/**\n * This snippet decodes Base64 encoded payloads commonly used by various IoT protocols.\n * Some devices send sensor data encoded in Base64 format which needs to be decoded\n * before parsing the binary data.\n *\n * Testing:\n * You can test this with the Device Emulator using:\n * [{ \"variable\": \"data\", \"value\": \"AQlhE5UA359\" }]\n */\n\n// Find Base64 encoded payload\nconst payload_raw = payload.find((x) => x.variable === \"data\" || x.variable === \"payload\");\n\nif (payload_raw) {\n  try {\n    // Decode Base64 data using Buffer\n    const buffer = Buffer.from(payload_raw.value, \"base64\");\n\n    // Example parsing (adjust based on your device's data format)\n    // Let's assume:\n    // Byte 0: Device ID\n    // Bytes 1-2: Temperature (signed, divide by 100)\n    // Byte 3: Battery level\n    const data = [\n      { variable: \"device_id\", value: buffer.readUInt8(0) },\n      { variable: \"temperature\", value: buffer.readInt16BE(1) / 100, unit: \"°C\" },\n      { variable: \"battery\", value: buffer.readUInt8(3), unit: \"%\" },\n    ];\n\n    // Add to payload with group and time\n    const group = payload_raw.group || String(Date.now());\n    const time = payload_raw.time;\n\n    const newData = data.map((item) => ({\n      ...item,\n      group,\n      ...(time && { time }),\n    }));\n\n    payload = payload.concat(newData);\n  } catch (e) {\n    // Print the error to the Live Inspector\n    console.error(\"Base64 decode error:\", e.message);\n\n    // Add error variable for debugging\n    payload.push({\n      variable: \"parse_error\",\n      value: `Base64 decode failed: ${e.message}`,\n      group: String(Date.now()),\n    });\n  }\n}\n"
        },
        {
          "id": "bitwise-operations-parser",
          "title": "Bitwise Operations Parser",
          "description": "Parse binary data using bitwise operations for compact sensor protocols",
          "language": "javascript",
          "tags": [
            "bitwise",
            "binary",
            "compact",
            "sensor",
            "basic"
          ],
          "filename": "bitwise-operations-parser.js",
          "file_path": "javascript/bitwise-operations-parser.js",
          "code": "/**\n * This snippet demonstrates parsing compact binary protocols where multiple\n * sensor values are packed into bytes using bitwise operations.\n *\n * Example format (5 bytes):\n * - Byte 0: Device ID\n * - Byte 1: Status flags (8 bits)\n * - Bytes 2-3: Temperature (16 bits)\n * - Byte 4: Battery level\n *\n * Testing:\n * You can test with the Device Emulator using:\n * [{ \"variable\": \"data\", \"value\": \"FF8A5C7F80\" }]\n */\n\n// Find hexadecimal payload\nconst payload_raw = payload.find((x) => x.variable === \"data\" || x.variable === \"payload\");\n\nif (payload_raw) {\n  try {\n    // Convert hex to buffer\n    const buffer = Buffer.from(payload_raw.value, \"hex\");\n\n    if (buffer.length >= 5) {\n      // Parse device ID (byte 0)\n      const deviceId = buffer.readUInt8(0);\n\n      // Parse status flags (byte 1) - extract individual bits\n      const statusByte = buffer.readUInt8(1);\n      const alarmActive = (statusByte & 0x80) !== 0; // bit 7\n      const lowBattery = (statusByte & 0x40) !== 0; // bit 6\n      const motionDetected = (statusByte & 0x20) !== 0; // bit 5\n\n      // Parse temperature (bytes 2-3, signed 16-bit)\n      const temperatureRaw = buffer.readInt16BE(2);\n      const temperature = temperatureRaw / 100.0; // Scale factor\n\n      // Parse battery level (byte 4)\n      const batteryLevel = buffer.readUInt8(4);\n\n      // Build the parsed data\n      const data = [\n        { variable: \"device_id\", value: deviceId },\n        { variable: \"temperature\", value: temperature, unit: \"°C\" },\n        { variable: \"battery\", value: batteryLevel, unit: \"%\" },\n        { variable: \"alarm\", value: alarmActive ? 1 : 0 },\n        { variable: \"low_battery_flag\", value: lowBattery ? 1 : 0 },\n        { variable: \"motion\", value: motionDetected ? 1 : 0 },\n      ];\n\n      // Add to payload with group and time\n      const group = payload_raw.group || String(Date.now());\n      const time = payload_raw.time;\n\n      const newData = data.map((item) => ({\n        ...item,\n        group,\n        ...(time && { time }),\n      }));\n\n      payload = payload.concat(newData);\n    } else {\n      console.log(`Invalid payload length: expected 5 bytes, got ${buffer.length}`);\n    }\n  } catch (e) {\n    console.error(\"Bitwise parsing error:\", e.message);\n\n    payload.push({\n      variable: \"parse_error\",\n      value: `Parsing failed: ${e.message}`,\n      group: String(Date.now()),\n    });\n  }\n}\n"
        },
        {
          "id": "data-validation",
          "title": "Data Validation and Error Handling",
          "description": "Validates sensor data ranges and handles invalid values",
          "language": "javascript",
          "tags": [
            "validation",
            "error-handling",
            "sensor",
            "utility",
            "basic"
          ],
          "filename": "data-validation.js",
          "file_path": "javascript/data-validation.js",
          "code": "/**\n * This snippet validates sensor data against expected ranges.\n * Invalid data is flagged with error messages.\n *\n * Testing:\n * You can test with the Device Emulator using:\n * [{ \"variable\": \"temperature\", \"value\": -50 }, { \"variable\": \"humidity\", \"value\": 150 }]\n */\n\n// Define valid ranges for common sensors\nconst SENSOR_RANGES = {\n  temperature: { min: -40, max: 85, unit: \"°C\" },\n  humidity: { min: 0, max: 100, unit: \"%\" },\n  battery: { min: 0, max: 100, unit: \"%\" },\n  pressure: { min: 300, max: 1100, unit: \"hPa\" },\n};\n\n// Validate each item in the payload\nfor (const item of payload) {\n  if (item.variable && typeof item.value === \"number\") {\n    const range = SENSOR_RANGES[item.variable];\n\n    if (range) {\n      // Check if value is within valid range\n      if (item.value < range.min || item.value > range.max) {\n        // Add error for out-of-range values\n        payload.push({\n          variable: `${item.variable}_error`,\n          value: `Value ${item.value} outside range ${range.min}-${range.max}`,\n          group: item.group || String(Date.now()),\n        });\n\n        console.log(\n          `Validation error: ${item.variable} = ${item.value} (expected: ${range.min}-${range.max})`\n        );\n      } else {\n        // Add unit if not present\n        if (!item.unit) {\n          item.unit = range.unit;\n        }\n      }\n    }\n  }\n}\n"
        },
        {
          "id": "json-to-tago-format",
          "title": "JSON to TagoIO Format Converter",
          "description": "Converts raw JSON data to TagoIO format with support for nested objects and metadata",
          "language": "javascript",
          "tags": [
            "json",
            "converter",
            "format",
            "utility",
            "basic"
          ],
          "filename": "json-to-tago-format.js",
          "file_path": "javascript/json-to-tago-format.js",
          "code": "/* What does this snippet do?\n ** It simply converts raw JSON to formatted TagoIO JSON.\n ** So if you send { \"temperature\": 10 }\n ** This script will convert it to { \"variable\": \"temperature\", \"value\": 10 }\n **\n ** The ignore_vars variable in this code should be used to ignore variables\n ** from the device that you don't want.\n */\n// Add ignorable variables in this array.\nconst ignore_vars = [];\n\n/**\n * Convert an object to TagoIO object format.\n * Can be used in two ways:\n * toTagoFormat({ myvariable: myvalue , anothervariable: anothervalue... })\n * toTagoFormat({ myvariable: { value: myvalue, unit: 'C', metadata: { color: 'green' }} , anothervariable: anothervalue... })\n *\n * @param {Object} object_item Object containing key and value.\n * @param {String} group Group for the variables\n * @param {String} prefix Add a prefix to the variable names\n */\nfunction toTagoFormat(object_item, group, prefix = \"\") {\n  const result = [];\n  for (const key in object_item) {\n    if (ignore_vars.includes(key)) continue;\n\n    if (typeof object_item[key] === \"object\") {\n      result.push({\n        variable: object_item[key].variable || `${prefix}${key}`,\n        value: object_item[key].value,\n        group: object_item[key].group || group,\n        metadata: object_item[key].metadata,\n        location: object_item[key].location,\n        unit: object_item[key].unit,\n      });\n    } else {\n      result.push({\n        variable: `${prefix}${key}`,\n        value: object_item[key],\n        group,\n      });\n    }\n  }\n\n  return result;\n}\n\n// Check if what is being stored is the ttn_payload.\n// Payload is an environment variable. Is where what is being inserted to your device comes in.\nif (!payload[0].variable) {\n  // Get a unique group for the incoming data.\n  const group = payload[0].group || String(Date.now());\n\n  payload = toTagoFormat(payload[0], group);\n}\n"
        },
        {
          "id": "lorawan-hexadecimal-parser",
          "title": "LoRaWAN Hexadecimal Payload Parser",
          "description": "Generic payload parser for LoRaWAN devices compatible with any network server",
          "language": "javascript",
          "tags": [
            "lorawan",
            "hexadecimal",
            "buffer",
            "protocol",
            "basic"
          ],
          "filename": "lorawan-hexadecimal-parser.js",
          "file_path": "javascript/lorawan-hexadecimal-parser.js",
          "code": "/* This is a generic payload parser for LoRaWAN. It will work for any network server.\n ** The code finds the \"payload\" variable sent by your sensor and parses it if it exists.\n ** The content of the payload variable is always a hexadecimal value.\n **\n ** Note: Additional variables can be created by the Network Server and sent directly to the bucket. Normally they aren't handled here.\n **\n ** Testing:\n ** You can do manual tests to the parser by using the Device Emulator. Copy and paste the following JSON:\n ** [{ \"variable\": \"data\", \"value\": \"0109611395\" }]\n */\n\n// Search for the payload variable in the payload global variable. Its contents are always [{ variable, value...}, {variable, value...} ...]\nconst payload_raw = payload.find(\n  (x) => x.variable === \"payload_raw\" || x.variable === \"payload\" || x.variable === \"data\"\n);\nif (payload_raw) {\n  try {\n    // Convert the data from hexadecimal to JavaScript Buffer\n    const buffer = Buffer.from(payload_raw.value, \"hex\");\n\n    // Let's say you have a payload of 5 bytes:\n    // 0 - Protocol Version\n    // 1,2 - Temperature\n    // 3,4 - Humidity\n    // More information about buffers can be found here: https://nodejs.org/api/buffer.html\n    const data = [\n      { variable: \"protocol_version\", value: buffer.readInt8(0) },\n      {\n        variable: \"temperature\",\n        value: buffer.readInt16BE(1) / 100,\n        unit: \"°C\",\n      },\n      { variable: \"humidity\", value: buffer.readUInt16BE(3) / 100, unit: \"%\" },\n    ];\n\n    // This will concatenate the content sent by your device with the content generated in this payload parser.\n    // It also adds the \"group\" and \"time\" fields to it, copying from your sensor data.\n    payload = payload.concat(\n      data.map((x) => ({\n        ...x,\n        group: String(payload_raw.serie || payload_raw.group),\n        time: String(payload_raw.time),\n      }))\n    );\n  } catch (e) {\n    // Print the error to the Live Inspector.\n    console.error(e);\n\n    // Return the variable parse_error for debugging.\n    payload = [{ variable: \"parse_error\", value: e.message }];\n  }\n}\n"
        },
        {
          "id": "mqtt-comma-separated-parser",
          "title": "MQTT Comma-Separated Values Parser",
          "description": "Enhanced parser for MQTT devices sending comma-separated data",
          "language": "javascript",
          "tags": [
            "mqtt",
            "csv",
            "comma-separated",
            "parser",
            "basic"
          ],
          "filename": "mqtt-comma-separated-parser.js",
          "file_path": "javascript/mqtt-comma-separated-parser.js",
          "code": "/**\n * This parser handles MQTT devices sending comma-separated data.\n * It supports both key-value pairs and positional data formats.\n *\n * Supported formats:\n * - \"temp,12,hum,50\" (alternating key-value)\n * - \"25.5,60,85\" (positional values)\n *\n * Testing:\n * You can test with the Device Emulator using:\n * [{ \"variable\": \"payload\", \"value\": \"temp,12,hum,50\", \"metadata\": { \"mqtt_topic\": \"sensors/data\" } }]\n */\n\n// Find MQTT payload data\nconst mqttPayload = payload.find(\n  (data) => data.variable === \"payload\" || data.metadata?.mqtt_topic\n);\n\nif (mqttPayload?.value) {\n  try {\n    const dataString = String(mqttPayload.value);\n    const parts = dataString.split(\",\");\n    const parsedData = [];\n\n    // Check if it's alternating key-value format (even number of parts)\n    if (parts.length % 2 === 0) {\n      // Parse \"key,value,key,value\" format\n      for (let i = 0; i < parts.length - 1; i += 2) {\n        const variable = parts[i].trim();\n        const value = Number(parts[i + 1].trim());\n\n        // Add unit based on variable name\n        let unit = null;\n        if (variable.toLowerCase().includes(\"temp\")) unit = \"°C\";\n        else if (variable.toLowerCase().includes(\"hum\")) unit = \"%\";\n        else if (variable.toLowerCase().includes(\"batt\")) unit = \"%\";\n\n        parsedData.push({\n          variable,\n          value: Number.isNaN(value) ? parts[i + 1].trim() : value,\n          ...(unit && { unit }),\n        });\n      }\n    } else {\n      // Positional format - assume common sensor order\n      const mapping = [\"temperature\", \"humidity\", \"battery\"];\n\n      for (let i = 0; i < parts.length; i++) {\n        const value = Number(parts[i].trim());\n        const variable = mapping[i] || `sensor_${i + 1}`;\n\n        parsedData.push({\n          variable,\n          value: Number.isNaN(value) ? parts[i].trim() : value,\n          unit: i === 0 ? \"°C\" : i === 1 ? \"%\" : null,\n        });\n      }\n    }\n\n    // Add group and time information\n    const group = mqttPayload.group || String(Date.now());\n    const time = mqttPayload.time;\n\n    const newData = parsedData.map((item) => ({\n      ...item,\n      group,\n      ...(time && { time }),\n    }));\n\n    // Add to payload\n    payload = payload.concat(newData);\n\n    console.log(`Parsed ${parsedData.length} values from MQTT data`);\n  } catch (error) {\n    console.error(\"MQTT parsing error:\", error.message);\n\n    payload.push({\n      variable: \"parse_error\",\n      value: `MQTT parsing failed: ${error.message}`,\n      group: mqttPayload.group || String(Date.now()),\n    });\n  }\n}\n"
        },
        {
          "id": "mqtt-hexadecimal-parser",
          "title": "MQTT Hexadecimal Payload Parser",
          "description": "Generic payload parser for MQTT devices sending hexadecimal data",
          "language": "javascript",
          "tags": [
            "mqtt",
            "hexadecimal",
            "buffer",
            "protocol",
            "basic"
          ],
          "filename": "mqtt-hexadecimal-parser.js",
          "file_path": "javascript/mqtt-hexadecimal-parser.js",
          "code": "/* This is a generic payload parser that can be used as a starting point for MQTT devices\n ** The code expects to receive hexadecimal string data, not JSON formatted data.\n **\n ** Testing:\n ** You can do manual tests to the parser by using the Device Emulator. Copy and paste the following JSON:\n ** [{ \"variable\": \"payload\", \"value\": \"0109611395\", \"metadata\": { \"mqtt_topic\": \"data\" } } ]\n */\n\n// Prevent the code from running for other types of data insertions.\n// We search for a variable named \"payload\" or a variable with metadata.mqtt_topic\nconst mqtt_payload = payload.find(\n  (data) => data.variable === \"payload\" || data.metadata?.mqtt_topic\n);\nif (mqtt_payload) {\n  // Cast the hexadecimal string to a buffer\n  const buffer = Buffer.from(mqtt_payload.value, \"hex\");\n\n  // Normalize the data to TagoIO format\n  // We use the Number function to cast number values, so we can use them in chart widgets, etc.\n  const data = [\n    { variable: \"protocol_version\", value: buffer.readInt8(0) },\n    { variable: \"temperature\", value: buffer.readInt16BE(1) / 100, unit: \"°C\" },\n    { variable: \"humidity\", value: buffer.readUInt16BE(3) / 100, unit: \"%\" },\n  ];\n\n  // This will concatenate the content sent by your device with the content generated in this payload parser\n  // It also adds the field \"group\" to be able to group data in tables and other widgets\n  const group = String(Date.now());\n  payload = payload.concat(data).map((x) => ({ ...x, group }));\n}\n"
        },
        {
          "id": "multi-sensor-aggregator",
          "title": "Multi-Sensor Data Aggregator",
          "description": "Aggregates data from multiple sensors and calculates simple derived metrics",
          "language": "javascript",
          "tags": [
            "aggregation",
            "multi-sensor",
            "calculations",
            "basic"
          ],
          "filename": "multi-sensor-aggregator.js",
          "file_path": "javascript/multi-sensor-aggregator.js",
          "code": "/**\n * This snippet demonstrates basic sensor data aggregation and calculations.\n * It calculates a simple heat index and comfort score from temperature and humidity.\n *\n * Testing:\n * You can test with the Device Emulator using:\n * [\n *   { \"variable\": \"temperature\", \"value\": 25.5 },\n *   { \"variable\": \"humidity\", \"value\": 60 }\n * ]\n */\n\n// Find sensor values from payload\nlet temperature = null;\nlet humidity = null;\n\nfor (const item of payload) {\n  if (item.variable === \"temperature\" && typeof item.value === \"number\") {\n    temperature = item.value;\n  } else if (item.variable === \"humidity\" && typeof item.value === \"number\") {\n    humidity = item.value;\n  }\n}\n\n// Calculate derived metrics if we have both temperature and humidity\nif (temperature !== null && humidity !== null) {\n  const group = String(Date.now());\n\n  // Simple heat index calculation (for temperatures above 20°C)\n  let heatIndex = temperature;\n  if (temperature > 20) {\n    heatIndex = temperature + (humidity / 100) * 2; // Simplified formula\n  }\n\n  // Comfort score (0-100, higher is better)\n  let comfortScore = 50; // Base score\n\n  // Temperature comfort (20-25°C is optimal)\n  if (temperature >= 20 && temperature <= 25) {\n    comfortScore += 30;\n  } else if (temperature >= 18 && temperature <= 28) {\n    comfortScore += 15;\n  }\n\n  // Humidity comfort (40-60% is optimal)\n  if (humidity >= 40 && humidity <= 60) {\n    comfortScore += 20;\n  } else if (humidity >= 30 && humidity <= 70) {\n    comfortScore += 10;\n  }\n\n  // Add calculated values to payload\n  payload.push(\n    {\n      variable: \"heat_index\",\n      value: Math.round(heatIndex * 10) / 10,\n      unit: \"°C\",\n      group,\n    },\n    {\n      variable: \"comfort_score\",\n      value: Math.min(100, comfortScore),\n      unit: \"points\",\n      group,\n    }\n  );\n\n  console.log(`Calculated heat index: ${heatIndex}°C, comfort score: ${comfortScore}`);\n}\n"
        },
        {
          "id": "senml-parser",
          "title": "SenML (Sensor Markup Language) Parser",
          "description": "Parses SenML formatted data according to RFC 8428 specification using dayjs",
          "language": "javascript",
          "tags": [
            "senml",
            "sensor",
            "protocol",
            "parser",
            "dayjs",
            "advanced"
          ],
          "filename": "senml-parser.js",
          "file_path": "javascript/senml-parser.js",
          "code": "/**\n * Parses the value of the reading\n *\n * Value  Value of the entry.  Optional if a Sum value is present,\n * otherwise required.  Values are represented using three basic data\n * types, Floating point numbers (\"v\" field for \"Value\"), Booleans\n * (\"vb\" for \"Boolean Value\") and Strings (\"vs\" for \"String Value\").\n * Exactly one of these three fields MUST appear.\n * @param {Object} item\n * @returns {number | boolean | string}\n */\nfunction parseValue(item) {\n  if (\"vb\" in item) {\n    return !!item.vb;\n  }\n\n  if (\"v\" in item) {\n    return Number(item.v);\n  }\n\n  if (\"vs\" in item) {\n    return item.vs;\n  }\n}\n\n/**\n * Parses the measurement time\n * If either the Base Time or Time value is missing, the missing\n * attribute is considered to have a value of zero.  The Base Time and\n * Time values are added together to get the time of measurement.  A\n * time of zero indicates that the sensor does not know the absolute\n * time and the measurement was made roughly \"now\".  A negative value is\n * used to indicate seconds in the past from roughly \"now\".  A positive\n * value is used to indicate the number of seconds, excluding leap\n * seconds, since the start of the year 1970 in UTC.\n * @param {dayjs.Dayjs | Date} curr_time current time when this code is running\n * @param {Object} item measurement object\n * @returns {dayjs.Dayjs}\n */\nfunction parseTime(curr_time = dayjs(), item) {\n  if (!item.t) {\n    return dayjs(curr_time).toISOString();\n  }\n\n  if (Number(item.t) < 0) {\n    return dayjs(curr_time)\n      .subtract(item.t * -1, \"seconds\")\n      .toISOString();\n  }\n\n  return dayjs(curr_time).add(item.t, \"seconds\").toISOString();\n}\n\n/**\n * Removes unaccepted parameters from the variable name\n * @param {string} variable\n */\nfunction parseVariable(variable) {\n  const variableParsed = variable.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>{}[\\]\\\\/]/gi, \"\");\n  if (!variableParsed) {\n    return \"measurement\";\n  }\n  return variableParsed;\n}\n\n/**\n *\n * @param {Object[]} senml_obj\n */\nfunction decoder(senml_obj) {\n  const toTagoJSON = [];\n  const serie = String(Date.now());\n\n  let curr_time = dayjs();\n  let base_unit;\n  let base_name;\n  for (const item of senml_obj) {\n    if (item.bt) {\n      curr_time = dayjs(item.bt, \"X\");\n    }\n    if (item.bn) {\n      base_name = item.bn;\n    }\n    if (item.bu) {\n      base_unit = item.bu;\n    }\n\n    const itemTago = {\n      variable: parseVariable(item.n || base_name),\n      unit: item.u || base_unit,\n      value: parseValue(item),\n      time: parseTime(curr_time, item),\n      serie,\n      group: serie,\n    };\n\n    toTagoJSON.push(itemTago);\n  }\n\n  return toTagoJSON;\n}\n\ntry {\n  if (Array.isArray(payload) && payload[0].bn) {\n    payload = decoder(payload);\n  }\n} catch (e) {\n  console.log(e.message);\n}\n"
        },
        {
          "id": "sigfox-hexadecimal-parser",
          "title": "Sigfox Hexadecimal Payload Parser",
          "description": "Generic payload parser for Sigfox devices with GPS coordinates and sensor data",
          "language": "javascript",
          "tags": [
            "sigfox",
            "hexadecimal",
            "buffer",
            "gps",
            "coordinates",
            "advanced"
          ],
          "filename": "sigfox-hexadecimal-parser.js",
          "file_path": "javascript/sigfox-hexadecimal-parser.js",
          "code": "/* This is a generic payload parser that can be used as a starting point for Sigfox devices.\n ** The code finds the \"data\" variable sent by your sensor and parses it if it exists.\n ** The content of the value from the \"data\" variable is always a hexadecimal value.\n **\n ** Testing:\n ** You can do manual tests of the parser by using the Device Emulator. Copy and paste the following JSON:\n ** [{ \"variable\": \"data\", \"value\": \"0109611395000DF9011EB9\" }]\n */\n\n// Search for the payload variable in the global payload variable. Its contents are always [{ variable, value...}, {variable, value...} ...]\nconst payload_raw = payload.find((x) => x.variable === \"data\");\n\n// Check if payload_raw exists\nif (payload_raw) {\n  try {\n    // Convert the data from hexadecimal to JavaScript Buffer\n    const buffer = Buffer.from(payload_raw.value, \"hex\");\n\n    // Let's say you have a payload of 11 bytes:\n    // 0 - Counter (1 byte, 0 - 255)\n    // 1,2 - Temperature (multiplied by 100, unit = Celsius)\n    // 3,4 - Humidity (multiplied by 100, unit = Percent)\n    // 5 - Latitude indicator: 00 = positive | 01 = negative\n    // 6,7 - (Latitude value * 10000) / 1000000\n    // 8 - Longitude indicator: 00 = positive | 01 = negative\n    // 9,10 - (Longitude value * 10000) / 1000000\n    // More information about buffers can be found here: https://nodejs.org/api/buffer.html\n\n    // Latitude indicator\n    const lat_indicator = buffer.readInt8(5);\n    // Longitude indicator\n    const lng_indicator = buffer.readInt8(8);\n\n    // Latitude value\n    let lat = (buffer.readUInt16BE(6) * 10022) / 1000000;\n\n    // Apply indicator rule: if 0, it's positive; if 1, it's negative\n    lat = lat_indicator === 0 ? lat : -lat;\n\n    // Longitude value\n    let lng = (buffer.readUInt16BE(9) * 10022) / 1000000;\n\n    // Apply indicator rule: if 0, it's positive; if 1, it's negative\n    lng = lng_indicator === 0 ? lng : -lng;\n\n    const data = [\n      { variable: \"counter\", value: buffer.readInt8(0) },\n      { variable: \"temperature\", value: buffer.readInt16BE(1) / 100, unit: \"°C\" },\n      { variable: \"humidity\", value: buffer.readUInt16BE(3) / 100, unit: \"%\" },\n      { variable: \"location\", value: `${lat}, ${lng}`, location: { lat, lng } },\n    ];\n\n    // This will concatenate the content sent by your device with the content generated in this payload parser.\n    // It also adds the \"group\" and \"time\" fields to it, copying from your sensor data.\n    payload = payload.concat(\n      data.map((x) => ({\n        ...x,\n        group: payload_raw.serie || payload_raw.group,\n        time: payload_raw.time,\n      }))\n    );\n  } catch (e) {\n    // Print the error to the Live Inspector.\n    console.error(e);\n\n    // Return the variable parse_error for debugging.\n    payload = [{ variable: \"parse_error\", value: e.message }];\n  }\n}\n"
        },
        {
          "id": "string-payload-parser",
          "title": "String Payload Parser",
          "description": "Parse string-based payload with delimiters and key-value pairs",
          "language": "javascript",
          "tags": [
            "string",
            "parser",
            "delimiter",
            "key-value",
            "basic"
          ],
          "filename": "string-payload-parser.js",
          "file_path": "javascript/string-payload-parser.js",
          "code": "/**\n * This snippet parses string-based payloads with various delimiters.\n * Common formats include:\n * - \"temp:25.5;humidity:60;battery:80\"\n * - \"temp=25.5&humidity=60&battery=80\"\n * - \"25.5|60|80\" (positional values)\n *\n * Testing:\n * You can test with the Device Emulator using:\n * [{ \"variable\": \"payload\", \"value\": \"temp:25.5;humidity:60;battery:80\" }]\n */\n\n// Configuration: adjust these settings based on your device's format\nconst PAIR_DELIMITER = \";\"; // Separator between key-value pairs\nconst KEY_VALUE_DELIMITER = \":\"; // Separator between key and value\nconst POSITIONAL_DELIMITER = \"|\"; // Delimiter for positional data\n\n// Mapping for positional data (when no keys are provided)\nconst POSITIONAL_MAPPING = [\n  { variable: \"temperature\", unit: \"°C\" },\n  { variable: \"humidity\", unit: \"%\" },\n  { variable: \"battery\", unit: \"%\" },\n  { variable: \"signal\", unit: \"dBm\" },\n];\n\n// Helper function to trim whitespace\nfunction trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n}\n\n// Helper function to convert a value to number if possible\nfunction parseValue(value) {\n  const num = Number(value);\n  return Number.isNaN(num) ? value : num;\n}\n\n// Find string payload in the data\nconst payload_raw = payload.find(\n  (x) => x.variable === \"payload\" || x.variable === \"data\" || x.variable === \"message\"\n);\n\nif (payload_raw && typeof payload_raw.value === \"string\") {\n  const data = [];\n  const payloadValue = payload_raw.value;\n\n  // Check if it's key-value pairs format\n  if (payloadValue.includes(KEY_VALUE_DELIMITER)) {\n    // Parse key-value pairs\n    const pairs = payloadValue.split(PAIR_DELIMITER);\n\n    for (const pair of pairs) {\n      const parts = pair.split(KEY_VALUE_DELIMITER);\n      if (parts.length >= 2) {\n        const key = trim(parts[0]);\n        const value = trim(parts.slice(1).join(KEY_VALUE_DELIMITER)); // Handle values with delimiters\n\n        // Determine unit based on variable name\n        let unit = null;\n        const lowerKey = key.toLowerCase();\n        if (lowerKey.includes(\"temp\")) {\n          unit = \"°C\";\n        } else if (lowerKey.includes(\"humid\")) {\n          unit = \"%\";\n        } else if (lowerKey.includes(\"batt\")) {\n          unit = \"%\";\n        } else if (lowerKey.includes(\"signal\") || lowerKey.includes(\"rssi\")) {\n          unit = \"dBm\";\n        }\n\n        data.push({\n          variable: key,\n          value: parseValue(value),\n          ...(unit && { unit }),\n        });\n      }\n    }\n\n    // Check if it's positional format\n  } else if (payloadValue.includes(POSITIONAL_DELIMITER)) {\n    const values = payloadValue.split(POSITIONAL_DELIMITER);\n\n    values.forEach((value, index) => {\n      const trimmedValue = trim(value);\n      const mapping = POSITIONAL_MAPPING[index];\n\n      if (mapping) {\n        data.push({\n          variable: mapping.variable,\n          value: parseValue(trimmedValue),\n          unit: mapping.unit,\n        });\n      } else {\n        // Fallback for unmapped positions\n        data.push({\n          variable: `sensor_${index + 1}`,\n          value: parseValue(trimmedValue),\n        });\n      }\n    });\n\n    // Single value format\n  } else {\n    // Assume it's a single temperature value\n    data.push({\n      variable: \"temperature\",\n      value: parseValue(payloadValue),\n      unit: \"°C\",\n    });\n  }\n\n  // Add to payload with group and time\n  const group = payload_raw.group || String(Date.now());\n  const time = payload_raw.time;\n\n  const newData = data.map((item) => ({\n    ...item,\n    group,\n    ...(time && { time }),\n  }));\n\n  payload = payload.concat(newData);\n}\n"
        },
        {
          "id": "temperature-fahrenheit-to-celsius",
          "title": "Temperature Fahrenheit to Celsius Converter",
          "description": "Converts temperature values from Fahrenheit to Celsius with validation",
          "language": "javascript",
          "tags": [
            "temperature",
            "conversion",
            "fahrenheit",
            "celsius",
            "basic"
          ],
          "filename": "temperature-fahrenheit-to-celsius.js",
          "file_path": "javascript/temperature-fahrenheit-to-celsius.js",
          "code": "/**\n * This snippet converts temperature values from Fahrenheit to Celsius.\n * It includes basic validation and supports multiple temperature variables.\n *\n * Testing:\n * You can test with the Device Emulator using:\n * [{ \"variable\": \"temperature\", \"value\": 68 }]\n */\n\n// Find temperature variables in the payload\nconst temperatureItems = payload.filter(\n  (item) => item.variable?.toLowerCase().includes(\"temp\") && typeof item.value === \"number\"\n);\n\nfor (const item of temperatureItems) {\n  // Validate temperature range (reasonable Fahrenheit values)\n  if (item.value >= -40 && item.value <= 140) {\n    // Convert from Fahrenheit to Celsius\n    const celsius = ((item.value - 32) * 5) / 9;\n\n    // Update the item\n    item.value = Math.round(celsius * 100) / 100; // Round to 2 decimal places\n    item.unit = \"°C\";\n\n    console.log(`Converted ${item.variable}: ${item.value}°C`);\n  } else {\n    // Add error for invalid temperatures\n    payload.push({\n      variable: `${item.variable}_error`,\n      value: \"invalid_temperature_range\",\n      metadata: { original_value: item.value },\n      group: item.group || String(Date.now()),\n    });\n  }\n}\n"
        },
        {
          "id": "time-based-filter",
          "title": "Time-Based Data Filter",
          "description": "Filter data based on time of day using dayjs",
          "language": "javascript",
          "tags": [
            "filter",
            "time",
            "dayjs",
            "utility",
            "basic"
          ],
          "filename": "time-based-filter.js",
          "file_path": "javascript/time-based-filter.js",
          "code": "/**\n * This snippet filters data based on time of day.\n * Useful for ignoring data during maintenance hours or specific time periods.\n *\n * Testing:\n * You can test with the Device Emulator using:\n * [{ \"variable\": \"humidity\", \"value\": 65, \"time\": \"2023-06-15T08:00:00Z\" }]\n */\n\n// Configuration\nconst MAINTENANCE_START_HOUR = 7; // 7 AM\nconst MAINTENANCE_END_HOUR = 9; // 9 AM\n\n// Find the variable we want to filter\nconst sensorItem = payload.find((item) => item.variable === \"humidity\");\n\nif (sensorItem?.time) {\n  const itemTime = dayjs(sensorItem.time);\n  const hour = itemTime.hour();\n\n  // Filter out data during maintenance hours\n  if (hour >= MAINTENANCE_START_HOUR && hour <= MAINTENANCE_END_HOUR) {\n    console.log(`Filtering data at hour ${hour} - maintenance time`);\n\n    // Add a filtered notification\n    payload.push({\n      variable: \"filtered_data\",\n      value: `${sensorItem.variable} filtered during maintenance`,\n      group: String(Date.now()),\n    });\n\n    // Remove the original item\n    const index = payload.indexOf(sensorItem);\n    payload.splice(index, 1);\n  }\n}\n"
        },
        {
          "id": "timezone-data-processor",
          "title": "Timezone Data Processor",
          "description": "Convert timestamps between timezones using dayjs and timeUtils",
          "language": "javascript",
          "tags": [
            "timezone",
            "dayjs",
            "timestamp",
            "conversion",
            "basic"
          ],
          "filename": "timezone-data-processor.js",
          "file_path": "javascript/timezone-data-processor.js",
          "code": "/**\n * This snippet demonstrates timezone conversion using TagoIO's timeUtils and dayjs.\n * It converts timestamps to different timezones and formats them.\n *\n * Testing:\n * You can test with the Device Emulator using:\n * [{ \"variable\": \"timestamp\", \"value\": \"2023-06-15T14:30:00.000Z\" }]\n */\n\n// Find timestamp data in payload\nconst timestampItem = payload.find(\n  (item) =>\n    item.variable?.toLowerCase().includes(\"timestamp\") ||\n    item.variable?.toLowerCase().includes(\"time\")\n);\n\nif (timestampItem?.value) {\n  try {\n    const originalTime = timestampItem.value;\n    const group = timestampItem.group || String(Date.now());\n\n    // Use dayjs for basic formatting\n    const dayjsTime = dayjs(originalTime);\n\n    // Add formatted timestamp using dayjs\n    payload.push({\n      variable: \"formatted_time\",\n      value: dayjsTime.format(\"YYYY-MM-DD HH:mm:ss\"),\n      group,\n    });\n\n    // Use timeUtils for timezone conversion (if available)\n    if (typeof timeUtils !== \"undefined\") {\n      try {\n        // Convert to New York timezone\n        const nyTime = timeUtils.formatInTimezone(\n          originalTime,\n          \"America/New_York\",\n          \"%Y-%m-%d %H:%M:%S %z\"\n        );\n        payload.push({\n          variable: \"time_ny\",\n          value: nyTime,\n          group,\n        });\n\n        // Convert to Tokyo timezone\n        const tokyoTime = timeUtils.formatInTimezone(\n          originalTime,\n          \"Asia/Tokyo\",\n          \"%Y-%m-%d %H:%M:%S %z\"\n        );\n        payload.push({\n          variable: \"time_tokyo\",\n          value: tokyoTime,\n          group,\n        });\n      } catch (conversionError) {\n        console.log(\"Timezone conversion error:\", conversionError.message);\n      }\n    }\n\n    console.log(`Processed timestamp: ${originalTime}`);\n  } catch (error) {\n    console.error(\"Timestamp processing error:\", error.message);\n\n    payload.push({\n      variable: \"timestamp_error\",\n      value: `Processing failed: ${error.message}`,\n      group: String(Date.now()),\n    });\n  }\n}\n"
        }
      ]
    }
  }
}